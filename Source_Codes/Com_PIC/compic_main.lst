CCS PCM C Compiler, Version 5.050, 43599               09-8-24 10:02

               Filename:   c:\Users\schulz\OneDrive - Kyushu Institute Of Technolgy\Leopard Project\Software\COM PIC\compic_main.lst

               ROM used:   6125 words (37%)
                           Largest free fragment is 2048
               RAM used:   271 (13%) at main() level
                           468 (23%) worst case
               Stack used: 6 locations (5 in main + 1 for interrupts)
               Stack size: 16

*
0000:  MOVLP  10
0001:  GOTO   69C
0002:  NOP
*
0004:  CLRF   03
0005:  MOVLP  00
0006:  MOVLB  00
0007:  MOVF   77,W
0008:  MOVWF  20
0009:  MOVF   78,W
000A:  MOVWF  21
000B:  MOVF   79,W
000C:  MOVWF  22
000D:  MOVF   7A,W
000E:  MOVWF  23
000F:  CLRF   05
0010:  MOVLW  91
0011:  MOVWF  04
0012:  BTFSS  00.5
0013:  GOTO   016
0014:  BTFSC  11.5
0015:  GOTO   01F
0016:  MOVF   20,W
0017:  MOVWF  77
0018:  MOVF   21,W
0019:  MOVWF  78
001A:  MOVF   22,W
001B:  MOVWF  79
001C:  MOVF   23,W
001D:  MOVWF  7A
001E:  RETFIE
001F:  MOVLP  00
0020:  GOTO   021
.................... #include <16F1789.h> 
.................... //////////// Standard Header file for the PIC16F1789 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F1789 
*
00C1:  BTFSC  03.1
00C2:  GOTO   0C7
00C3:  MOVLW  21
00C4:  MOVWF  05
00C5:  MOVLW  40
00C6:  MOVWF  04
00C7:  CLRF   77
00C8:  CLRF   78
00C9:  CLRF   79
00CA:  CLRF   7A
00CB:  MOVLB  04
00CC:  CLRF   20
00CD:  CLRF   21
00CE:  CLRF   22
00CF:  CLRF   23
00D0:  MOVLB  03
00D1:  MOVF   6F,W
00D2:  IORWF  6E,W
00D3:  IORWF  6D,W
00D4:  IORWF  6C,W
00D5:  BTFSC  03.2
00D6:  GOTO   123
00D7:  MOVLW  20
00D8:  MOVLB  04
00D9:  MOVWF  24
00DA:  BCF    03.0
00DB:  MOVLB  03
00DC:  RLF    68,F
00DD:  RLF    69,F
00DE:  RLF    6A,F
00DF:  RLF    6B,F
00E0:  MOVLB  04
00E1:  RLF    20,F
00E2:  RLF    21,F
00E3:  RLF    22,F
00E4:  RLF    23,F
00E5:  MOVLB  03
00E6:  MOVF   6F,W
00E7:  MOVLB  04
00E8:  SUBWF  23,W
00E9:  BTFSS  03.2
00EA:  GOTO   0FB
00EB:  MOVLB  03
00EC:  MOVF   6E,W
00ED:  MOVLB  04
00EE:  SUBWF  22,W
00EF:  BTFSS  03.2
00F0:  GOTO   0FB
00F1:  MOVLB  03
00F2:  MOVF   6D,W
00F3:  MOVLB  04
00F4:  SUBWF  21,W
00F5:  BTFSS  03.2
00F6:  GOTO   0FB
00F7:  MOVLB  03
00F8:  MOVF   6C,W
00F9:  MOVLB  04
00FA:  SUBWF  20,W
00FB:  BTFSS  03.0
00FC:  GOTO   11C
00FD:  MOVLB  03
00FE:  MOVF   6C,W
00FF:  MOVLB  04
0100:  SUBWF  20,F
0101:  MOVLB  03
0102:  MOVF   6D,W
0103:  BTFSS  03.0
0104:  INCFSZ 6D,W
0105:  GOTO   107
0106:  GOTO   10A
0107:  MOVLB  04
0108:  SUBWF  21,F
0109:  MOVLB  03
010A:  MOVF   6E,W
010B:  BTFSS  03.0
010C:  INCFSZ 6E,W
010D:  GOTO   10F
010E:  GOTO   112
010F:  MOVLB  04
0110:  SUBWF  22,F
0111:  MOVLB  03
0112:  MOVF   6F,W
0113:  BTFSS  03.0
0114:  INCFSZ 6F,W
0115:  GOTO   117
0116:  GOTO   11A
0117:  MOVLB  04
0118:  SUBWF  23,F
0119:  MOVLB  03
011A:  BSF    03.0
011B:  MOVLB  04
011C:  RLF    77,F
011D:  RLF    78,F
011E:  RLF    79,F
011F:  RLF    7A,F
0120:  DECFSZ 24,F
0121:  GOTO   0DA
0122:  MOVLB  03
0123:  MOVLB  04
0124:  MOVF   20,W
0125:  MOVWF  00
0126:  MOVF   21,W
0127:  MOVWI  W,[FSR0+01]
0128:  MOVF   22,W
0129:  MOVWI  W,[FSR0+02]
012A:  MOVF   23,W
012B:  MOVWI  W,[FSR0+03]
012C:  MOVLB  00
012D:  RETURN
*
07CB:  MOVLW  20
07CC:  MOVLB  04
07CD:  MOVWF  2E
07CE:  CLRF   2A
07CF:  CLRF   2B
07D0:  CLRF   2C
07D1:  CLRF   2D
07D2:  MOVF   23,W
07D3:  MOVWF  7A
07D4:  MOVF   22,W
07D5:  MOVWF  79
07D6:  MOVF   21,W
07D7:  MOVWF  78
07D8:  MOVF   20,W
07D9:  MOVWF  77
07DA:  BCF    03.0
07DB:  BTFSS  77.0
07DC:  GOTO   7EB
07DD:  MOVF   24,W
07DE:  ADDWF  2A,F
07DF:  MOVF   25,W
07E0:  BTFSC  03.0
07E1:  INCFSZ 25,W
07E2:  ADDWF  2B,F
07E3:  MOVF   26,W
07E4:  BTFSC  03.0
07E5:  INCFSZ 26,W
07E6:  ADDWF  2C,F
07E7:  MOVF   27,W
07E8:  BTFSC  03.0
07E9:  INCFSZ 27,W
07EA:  ADDWF  2D,F
07EB:  RRF    2D,F
07EC:  RRF    2C,F
07ED:  RRF    2B,F
07EE:  RRF    2A,F
07EF:  RRF    7A,F
07F0:  RRF    79,F
07F1:  RRF    78,F
07F2:  RRF    77,F
07F3:  DECFSZ 2E,F
07F4:  GOTO   7DA
07F5:  MOVLB  00
07F6:  RETURN
*
1160:  MOVLW  10
1161:  MOVWF  44
1162:  CLRF   77
1163:  CLRF   7A
1164:  RRF    41,F
1165:  RRF    40,F
1166:  BTFSS  03.0
1167:  GOTO   16E
1168:  MOVF   42,W
1169:  ADDWF  77,F
116A:  BTFSC  03.0
116B:  INCF   7A,F
116C:  MOVF   43,W
116D:  ADDWF  7A,F
116E:  RRF    7A,F
116F:  RRF    77,F
1170:  RRF    79,F
1171:  RRF    78,F
1172:  DECFSZ 44,F
1173:  GOTO   164
*
1363:  CLRF   77
1364:  CLRF   78
1365:  MOVF   61,W
1366:  BCF    03.0
1367:  BTFSC  62.0
1368:  ADDWF  77,F
1369:  RRF    77,F
136A:  RRF    78,F
136B:  BTFSC  62.1
136C:  ADDWF  77,F
136D:  RRF    77,F
136E:  RRF    78,F
136F:  BTFSC  62.2
1370:  ADDWF  77,F
1371:  RRF    77,F
1372:  RRF    78,F
1373:  BTFSC  62.3
1374:  ADDWF  77,F
1375:  RRF    77,F
1376:  RRF    78,F
1377:  BTFSC  62.4
1378:  ADDWF  77,F
1379:  RRF    77,F
137A:  RRF    78,F
137B:  BTFSC  62.5
137C:  ADDWF  77,F
137D:  RRF    77,F
137E:  RRF    78,F
137F:  BTFSC  62.6
1380:  ADDWF  77,F
1381:  RRF    77,F
1382:  RRF    78,F
1383:  BTFSC  62.7
1384:  ADDWF  77,F
1385:  RRF    77,F
1386:  RRF    78,F
....................  
.................... #list 
....................  
.................... #device adc = 16 
.................... #fuses NOMCLR, WDT, NOPUT, NOBROWNOUT 
.................... #use delay(crystal = 16mhz) 
*
0079:  MOVLW  21
007A:  MOVWF  05
007B:  MOVLW  38
007C:  MOVWF  04
007D:  MOVF   00,W
007E:  BTFSC  03.2
007F:  GOTO   08E
0080:  MOVLW  05
0081:  MOVWF  78
0082:  CLRF   77
0083:  DECFSZ 77,F
0084:  GOTO   083
0085:  DECFSZ 78,F
0086:  GOTO   082
0087:  MOVLW  2E
0088:  MOVWF  77
0089:  DECFSZ 77,F
008A:  GOTO   089
008B:  GOTO   08C
008C:  DECFSZ 00,F
008D:  GOTO   080
008E:  RETURN
....................  
.................... #ifndef EM 
.................... #warning "Building for FM" 
.................... #define SPACECRAFT_ID 0x53 
.................... #else 
.................... #warning "Building for EM" 
....................  
.................... #define SPACECRAFT_ID 0x54 
.................... #endif // !EM 
....................  
.................... int8 next_in = 0; 
.................... int cw_enabled = true; // Current state of CW 
....................  
.................... #include <compicreg.h>       // Com pic registers header. 
....................  
....................  
.................... #byte RCREG = 0x199 
.................... #byte PIR1 = 0x011 
.................... #bit bit5 = PIR1 .5 
....................  
.................... #byte PORTA = 0x00C 
.................... #bit RA0 = PORTA .0 
.................... #bit RA1 = PORTA .1 
.................... #bit RA2 = PORTA .2 
.................... #bit RA3 = PORTA .3 
.................... #bit RA4 = PORTA .4 
.................... #bit RA5 = PORTA .5 
.................... #bit RA6 = PORTA .6 
.................... #bit RA7 = PORTA .7 
....................  
.................... #byte PORTB = 0x00D 
.................... #bit RB0 = PORTB .0 
.................... #bit RB1 = PORTB .1 
.................... #bit RB2 = PORTB .2 
.................... #bit RB3 = PORTB .3 
.................... #bit RB4 = PORTB .4 
.................... #bit RB5 = PORTB .5 
.................... #bit RB6 = PORTB .6 
.................... #bit RB7 = PORTB .7 
....................  
.................... #byte PORTC = 0x00E 
.................... #bit RC0 = PORTC .0 
.................... #bit RC1 = PORTC .1 
.................... #bit RC2 = PORTC .2 
.................... #bit RC3 = PORTC .3 
.................... #bit RC4 = PORTC .4 
.................... #bit RC5 = PORTC .5 
.................... #bit RC6 = PORTC .6 
.................... #bit RC7 = PORTC .7 
....................  
.................... #byte PORTD = 0x00F 
.................... #bit RD0 = PORTD .0 
.................... #bit CW = PORTD .1 
.................... #bit RD2 = PORTD .2 
.................... #bit RD3 = PORTD .3 
.................... #bit RD4 = PORTD .4 
.................... #bit RD5 = PORTD .5 
.................... #bit RD6 = PORTD .6 
.................... #bit RD7 = PORTD .7 
....................  
.................... #byte PORTE = 0x010 
....................  
.................... #byte TRISA = 0x08C 
.................... #bit TRISA0 = TRISA .0 
.................... #bit TRISA1 = TRISA .1 
.................... #bit TRISA2 = TRISA .2 
.................... #bit TRISA3 = TRISA .3 
.................... #bit TRISA4 = TRISA .4 
.................... #bit TRISA5 = TRISA .5 
.................... #bit TRISA6 = TRISA .6 
.................... #bit TRISA7 = TRISA .7 
....................  
.................... #byte TRISB = 0x08D 
.................... #bit TRISB0 = TRISB .0 
.................... #bit TRISB1 = TRISB .1 
.................... #bit TRISB2 = TRISB .2 
.................... #bit TRISB3 = TRISB .3 
.................... #bit TRISB4 = TRISB .4 
.................... #bit TRISB5 = TRISB .5 
.................... #bit TRISB6 = TRISB .6 
.................... #bit TRISB7 = TRISB .7 
....................  
.................... #byte TRISC = 0x08E 
.................... #bit TRISC0 = TRISC .0 
.................... #bit TRISC1 = TRISC .1 
.................... #bit TRISC2 = TRISC .2 
.................... #bit TRISC3 = TRISC .3 
.................... #bit TRISC4 = TRISC .4 
.................... #bit TRISC5 = TRISC .5 
.................... #bit TRISC6 = TRISC .6 
.................... #bit TRISC7 = TRISC .7 
....................  
.................... #byte TRISD = 0x08F 
.................... #bit TRISD0 = TRISD .0 
.................... #bit TRISD1 = TRISD .1 
.................... #bit TRISD2 = TRISD .2 
.................... #bit TRISD3 = TRISD .3 
.................... #bit TRISD4 = TRISD .4 
.................... #bit TRISD5 = TRISD .5 
.................... #bit TRISD6 = TRISD .6 
.................... #bit TRISD7 = TRISD .7 
....................  
.................... #byte TRISE = 0x090 
....................  
.................... #byte LATA = 0x10C 
.................... #bit LATA0 = LATA .0 
.................... #bit LATA1 = LATA .1 
.................... #bit LATA2 = LATA .2 
.................... #bit LATA3 = LATA .3 
.................... #bit LATA4 = LATA .4 
.................... #bit LATA5 = LATA .5 
.................... #bit LATA6 = LATA .6 
.................... #bit LATA7 = LATA .7 
....................  
.................... #byte LATB = 0x10D 
.................... #bit LATB0 = LATB .0 
.................... #bit LATB1 = LATB .1 
.................... #bit LATB2 = LATB .2 
.................... #bit LATB3 = LATB .3 
.................... #bit LATB4 = LATB .4 
.................... #bit LATB5 = LATB .5 
.................... #bit LATB6 = LATB .6 
.................... #bit LATB7 = LATB .7 
....................  
.................... #byte LATC = 0x10E 
.................... #bit LATC0 = LATC .0 
.................... #bit LATC1 = LATC .1 
.................... #bit LATC2 = LATC .2 
.................... #bit LATC3 = LATC .3 
.................... #bit LATC4 = LATC .4 
.................... #bit LATC5 = LATC .5 
.................... #bit LATC6 = LATC .6 
.................... #bit LATC7 = LATC .7 
....................  
.................... #byte LATD = 0x10F 
.................... #bit LATD0 = LATD .0 
.................... #bit LATD1 = LATD .1 
.................... #bit LATD2 = LATD .2 
.................... #bit LATD3 = LATD .3 
.................... #bit LATD4 = LATD .4 
.................... #bit LATD5 = LATD .5 
.................... #bit LATD6 = LATD .6 
.................... #bit LATD7 = LATD .7 
....................  
.................... #byte T1CON = 0x018 
.................... #bit TMR1ON = T1CON .0 
.................... #bit T1SYNC = T1CON .2 
.................... #bit T1OSCEN = T1CON .3 
.................... #bit T1CKPS0 = T1CON .4 
.................... #bit T1CKPS1 = T1CON .5 
.................... #bit TMR1CS0 = T1CON .6 
.................... #bit TMR1CS1 = T1CON .7 
....................  
.................... #include <compic_main_sri.h> // Com main header file. 
.................... /* This file contains everything related to compic functions and compic settings 
....................    ,compic comuniction ports 
.................... */ 
....................  
.................... //_______________________________________________________________________________________________________________ 
.................... //#use rs232(baud=9600, parity=N, xmit=PIN_B7, rcv=PIN_B6, bits=8, stream=PORT1)    //PC reading port 
.................... //_______________________________________________________________________________________________________________ 
.................... #use rs232(uart1, baud = 115200, parity = N, bits = 8, stream = TR_CP, errors) //UART________TRX 
*
002D:  MOVLB  00
002E:  BTFSS  11.5
002F:  GOTO   02E
0030:  MOVLB  03
0031:  MOVF   1D,W
0032:  MOVLB  00
0033:  MOVWF  26
0034:  MOVLB  03
0035:  MOVF   19,W
0036:  MOVWF  78
0037:  MOVLB  00
0038:  BTFSS  26.1
0039:  GOTO   03E
003A:  MOVLB  03
003B:  BCF    1D.4
003C:  BSF    1D.4
003D:  MOVLB  00
*
06DB:  BTFSS  11.4
06DC:  GOTO   6DB
06DD:  MOVLB  03
06DE:  MOVWF  1A
06DF:  MOVLB  00
06E0:  RETURN
....................  
.................... #use rs232(baud = 4800, parity = N, xmit = PIN_B3, rcv = PIN_B4, bits = 8, stream = RP_CP, errors) //UART________RESET-PIC 
.................... #use rs232(baud = 9600, parity = N, xmit = PIN_B1, rcv = PIN_B2, bits = 8, stream = MP_CP, errors) //UART________MAIN-PIC 
*
01FC:  MOVLB  01
01FD:  BCF    0D.1
01FE:  MOVLB  02
01FF:  BCF    0D.1
0200:  MOVLW  08
0201:  MOVWF  78
0202:  GOTO   203
0203:  NOP
0204:  BSF    78.7
0205:  GOTO   216
0206:  BCF    78.7
0207:  MOVLB  03
0208:  RRF    49,F
0209:  MOVLB  02
020A:  BTFSC  03.0
020B:  BSF    0D.1
020C:  BTFSS  03.0
020D:  BCF    0D.1
020E:  BSF    78.6
020F:  GOTO   216
0210:  BCF    78.6
0211:  DECFSZ 78,F
0212:  GOTO   207
0213:  GOTO   214
0214:  NOP
0215:  BSF    0D.1
0216:  MOVLW  84
0217:  MOVWF  04
0218:  DECFSZ 04,F
0219:  GOTO   218
021A:  NOP
021B:  BTFSC  78.7
021C:  GOTO   206
021D:  BTFSC  78.6
021E:  GOTO   210
*
0245:  MOVLB  01
0246:  BSF    0D.2
0247:  MOVLB  00
0248:  BTFSC  0D.2
0249:  GOTO   248
024A:  MOVLW  08
024B:  MOVWF  77
024C:  MOVLB  03
024D:  CLRF   48
024E:  BSF    77.7
024F:  GOTO   260
0250:  BCF    77.7
0251:  GOTO   260
0252:  BCF    03.0
0253:  MOVLB  00
0254:  BTFSC  0D.2
0255:  BSF    03.0
0256:  MOVLB  03
0257:  RRF    48,F
0258:  BSF    77.6
0259:  GOTO   260
025A:  BCF    77.6
025B:  DECFSZ 77,F
025C:  GOTO   252
025D:  MOVF   48,W
025E:  MOVWF  78
025F:  GOTO   26C
0260:  MOVLW  84
0261:  BTFSC  77.7
0262:  MOVLW  24
0263:  MOVWF  78
0264:  DECFSZ 78,F
0265:  GOTO   264
0266:  GOTO   267
0267:  BTFSC  77.7
0268:  GOTO   250
0269:  BTFSC  77.6
026A:  GOTO   25A
026B:  GOTO   252
.................... // #use rs232(baud = 38400, parity = N, xmit = PIN_A2, bits = 8, stream = CBAND, errors)           //UART________CBAND 
.................... //_______________________________________________________________________________________________________________ 
.................... #use spi(MASTER, CLK = PIN_D4, DI = PIN_D6, DO = PIN_D7, BAUD = 400000, BITS = 8, STREAM = CFM, MODE = 0) //FLASH_M_______COM 
*
0886:  MOVLB  04
0887:  MOVF   2B,W
0888:  SUBLW  08
0889:  BTFSC  03.2
088A:  GOTO   08F
088B:  MOVWF  2C
088C:  RLF    2A,F
088D:  DECFSZ 2C,F
088E:  GOTO   08C
088F:  MOVLB  01
0890:  BSF    0F.6
0891:  BCF    0F.7
0892:  BCF    0F.4
0893:  MOVLB  02
0894:  BCF    0F.4
0895:  MOVLB  04
0896:  MOVF   2B,W
0897:  MOVWF  2C
0898:  BTFSC  2A.7
0899:  GOTO   09D
089A:  MOVLB  02
089B:  BCF    0F.7
089C:  MOVLB  04
089D:  BTFSS  2A.7
089E:  GOTO   0A2
089F:  MOVLB  02
08A0:  BSF    0F.7
08A1:  MOVLB  04
08A2:  RLF    2A,F
08A3:  MOVLB  02
08A4:  BSF    0F.4
08A5:  RLF    78,F
08A6:  MOVLB  00
08A7:  BTFSS  0F.6
08A8:  BCF    78.0
08A9:  BTFSC  0F.6
08AA:  BSF    78.0
08AB:  MOVLB  02
08AC:  BCF    0F.4
08AD:  MOVLB  04
08AE:  DECFSZ 2C,F
08AF:  GOTO   098
08B0:  MOVLB  00
08B1:  RETURN
.................... #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, BAUD = 400000, BITS = 8, STREAM = SFM, MODE = 0) //FLASH_M_______SHARED 
*
0908:  MOVLB  04
0909:  MOVF   2B,W
090A:  SUBLW  08
090B:  BTFSC  03.2
090C:  GOTO   111
090D:  MOVWF  2C
090E:  RLF    2A,F
090F:  DECFSZ 2C,F
0910:  GOTO   10E
0911:  MOVLB  01
0912:  BSF    0E.4
0913:  BCF    0E.5
0914:  BCF    0E.3
0915:  MOVLB  02
0916:  BCF    0E.3
0917:  MOVLB  04
0918:  MOVF   2B,W
0919:  MOVWF  2C
091A:  BTFSC  2A.7
091B:  GOTO   11F
091C:  MOVLB  02
091D:  BCF    0E.5
091E:  MOVLB  04
091F:  BTFSS  2A.7
0920:  GOTO   124
0921:  MOVLB  02
0922:  BSF    0E.5
0923:  MOVLB  04
0924:  RLF    2A,F
0925:  MOVLB  02
0926:  BSF    0E.3
0927:  RLF    78,F
0928:  MOVLB  00
0929:  BTFSS  0E.4
092A:  BCF    78.0
092B:  BTFSC  0E.4
092C:  BSF    78.0
092D:  MOVLB  02
092E:  BCF    0E.3
092F:  MOVLB  04
0930:  DECFSZ 2C,F
0931:  GOTO   11A
0932:  MOVLB  00
0933:  RETURN
.................... //_______________________________________________________________________________________________________________ 
....................  
.................... unsigned int16 rssi_value; 
.................... unsigned int32 data_size; 
....................  
.................... #include <compic_fun.c> //_1_2_ 
.................... // This is the function for initial settings for compic 
....................  
.................... void settings() 
.................... { 
....................     TRISD5 = 0; 
*
004D:  MOVLB  01
004E:  BCF    0F.5
....................     LATD5 = 1; //CFM CS pin_output 
004F:  MOVLB  02
0050:  BSF    0F.5
....................     TRISC2 = 0; 
0051:  MOVLB  01
0052:  BCF    0E.2
....................     LATC2 = 1; //SFM CS pin_output 
0053:  MOVLB  02
0054:  BSF    0E.2
....................  
....................     TRISD1 = 0; 
0055:  MOVLB  01
0056:  BCF    0F.1
....................     LATD1 = 0; //TX on Pin_output 
0057:  MOVLB  02
0058:  BCF    0F.1
....................     TRISD2 = 0; 
0059:  MOVLB  01
005A:  BCF    0F.2
....................     LATD2 = 0; //RX on Pin_output 
005B:  MOVLB  02
005C:  BCF    0F.2
....................     TRISD3 = 0; 
005D:  MOVLB  01
005E:  BCF    0F.3
....................     LATD3 = 0; //CW ky pin_output 
005F:  MOVLB  02
0060:  BCF    0F.3
....................  
....................     setup_adc(ADC_CLOCK_INTERNAL); 
0061:  MOVLB  01
0062:  BSF    1E.4
0063:  BSF    1E.5
0064:  BCF    1E.6
0065:  BCF    1E.7
0066:  BSF    1D.0
....................     setup_adc_ports(san4 | san5); //chanal 4-5 is enable for ADC 
0067:  BCF    1E.0
0068:  BCF    1E.1
0069:  BCF    1E.2
006A:  MOVLW  20
006B:  MOVLB  03
006C:  MOVWF  0C
006D:  MOVLW  01
006E:  MOVWF  10
006F:  MOVLW  00
0070:  MOVWF  0D
0071:  MOVWF  0F
....................  
....................     enable_interrupts(global); 
0072:  MOVLW  C0
0073:  IORWF  0B,F
....................     enable_interrupts(INT_RDA); 
0074:  MOVLB  01
0075:  BSF    11.5
0076:  MOVLP  10
0077:  MOVLB  00
0078:  GOTO   6FC (RETURN)
.................... } 
....................  
.................... //_____________________TRX Controlling_________________________________________ 
.................... void tx_on() 
.................... { 
....................     LATD1 = 1; // TX on pin (1) 
*
07B5:  MOVLB  02
07B6:  BSF    0F.1
....................     delay_ms(100); 
07B7:  MOVLW  64
07B8:  MOVLB  03
07B9:  MOVWF  68
07BA:  MOVLB  00
07BB:  CALL   079
....................     LATD2 = 0; // 0 
07BC:  MOVLB  02
07BD:  BCF    0F.2
....................     delay_ms(100); 
07BE:  MOVLW  64
07BF:  MOVLB  03
07C0:  MOVWF  68
07C1:  MOVLB  00
07C2:  CALL   079
....................     LATD3 = 0; // 0 
07C3:  MOVLB  02
07C4:  BCF    0F.3
....................     delay_ms(100); 
07C5:  MOVLW  64
07C6:  MOVLB  03
07C7:  MOVWF  68
07C8:  MOVLB  00
07C9:  CALL   079
....................     return; 
07CA:  RETURN
.................... } 
....................  
.................... void cw_on() 
.................... { 
....................     LATD1 = 0; // 0 
*
0283:  MOVLB  02
0284:  BCF    0F.1
....................     delay_ms(100); 
0285:  MOVLW  64
0286:  MOVLB  03
0287:  MOVWF  68
0288:  MOVLB  00
0289:  CALL   079
....................     LATD2 = 1; // CW on pin (1) 
028A:  MOVLB  02
028B:  BSF    0F.2
....................     delay_ms(100); 
028C:  MOVLW  64
028D:  MOVLB  03
028E:  MOVWF  68
028F:  MOVLB  00
0290:  CALL   079
....................     LATD3 = 0; // 0 
0291:  MOVLB  02
0292:  BCF    0F.3
....................     delay_ms(100); 
0293:  MOVLW  64
0294:  MOVLB  03
0295:  MOVWF  68
0296:  MOVLB  00
0297:  CALL   079
....................     return; 
0298:  RETURN
.................... } 
....................  
.................... void rx_on() 
.................... { 
....................     LATD1 = 0; // 0 
*
008F:  MOVLB  02
0090:  BCF    0F.1
....................     delay_ms(100); 
0091:  MOVLW  64
0092:  MOVLB  03
0093:  MOVWF  68
0094:  MOVLB  00
0095:  CALL   079
....................     LATD2 = 0; // 0 
0096:  MOVLB  02
0097:  BCF    0F.2
....................     delay_ms(100); 
0098:  MOVLW  64
0099:  MOVLB  03
009A:  MOVWF  68
009B:  MOVLB  00
009C:  CALL   079
....................     LATD3 = 0; // 0 
009D:  MOVLB  02
009E:  BCF    0F.3
....................     delay_ms(100); 
009F:  MOVLW  64
00A0:  MOVLB  03
00A1:  MOVWF  68
00A2:  MOVLB  00
00A3:  CALL   079
....................  
....................     return; 
00A4:  RETURN
.................... } 
.................... //--------------------------------------------------------------------- 
....................  
.................... //_________________Received signal strength indication_________________________ 
.................... unsigned int16 trx_rssi_read() 
.................... { 
....................     set_adc_channel(4); 
00A5:  MOVLW  10
00A6:  MOVWF  78
00A7:  MOVLB  01
00A8:  MOVF   1D,W
00A9:  ANDLW  83
00AA:  IORWF  78,W
00AB:  MOVWF  1D
00AC:  MOVLW  0F
00AD:  MOVWF  78
00AE:  MOVF   1F,W
00AF:  ANDLW  F0
00B0:  IORWF  78,W
00B1:  MOVWF  1F
....................     delay_us(10); 
00B2:  MOVLW  0D
00B3:  MOVWF  77
00B4:  DECFSZ 77,F
00B5:  GOTO   0B4
....................     return (read_adc()); 
00B6:  BSF    1D.1
00B7:  BTFSC  1D.1
00B8:  GOTO   0B7
00B9:  MOVF   1C,W
00BA:  MOVWF  7A
00BB:  MOVF   1B,W
00BC:  MOVWF  78
00BD:  MOVF   1C,W
00BE:  MOVWF  79
00BF:  MOVLB  00
00C0:  RETURN
.................... } 
....................  
.................... //_________________TEMP funtion________________________________________________ 
.................... unsigned int16 trx_temp_read() 
.................... { 
....................     set_adc_channel(5); 
*
121A:  MOVLW  14
121B:  MOVWF  78
121C:  MOVF   1D,W
121D:  ANDLW  83
121E:  IORWF  78,W
121F:  MOVWF  1D
1220:  MOVLW  0F
1221:  MOVWF  78
1222:  MOVF   1F,W
1223:  ANDLW  F0
1224:  IORWF  78,W
1225:  MOVWF  1F
....................     delay_us(10); 
1226:  MOVLW  0D
1227:  MOVWF  77
1228:  DECFSZ 77,F
1229:  GOTO   228
....................     return (read_adc()); 
122A:  BSF    1D.1
122B:  BTFSC  1D.1
122C:  GOTO   22B
122D:  MOVF   1C,W
122E:  MOVWF  7A
122F:  MOVF   1B,W
1230:  MOVWF  78
1231:  MOVF   1C,W
1232:  MOVWF  79
.................... } 
....................  
.................... #include <com_flash.c>  //_1_2_ 
.................... // Flash memory commands 
.................... #define READ_DATA_BYTES 0x13 //0x03 for 3byte mode 
.................... #define ENABLE_WRITE 0x06 
.................... #define WRITE_BYTE 0x12   //0x02 for 3byte mode 
.................... #define ERASE_SECTOR 0xDC //0xD8 for 3byte mode 
....................  
.................... //______________________Write Enable Codes____________________________________________________ 
.................... void cf_write_enable() 
.................... { 
....................     LATD5 = 0; 
*
0E7D:  MOVLB  02
0E7E:  BCF    0F.5
....................     delay_us(50); 
0E7F:  MOVLW  42
0E80:  MOVWF  77
0E81:  DECFSZ 77,F
0E82:  GOTO   681
0E83:  NOP
....................     spi_xfer(CFM, ENABLE_WRITE); //Send 0x06 
0E84:  MOVLW  06
0E85:  MOVLB  04
0E86:  MOVWF  2A
0E87:  MOVLW  08
0E88:  MOVWF  2B
0E89:  MOVLB  00
0E8A:  CALL   086
....................     LATD5 = 1; 
0E8B:  MOVLB  02
0E8C:  BSF    0F.5
....................     return; 
0E8D:  MOVLB  00
0E8E:  RETURN
.................... } 
....................  
.................... void sf_write_enable() 
.................... { 
....................     LATC2 = 0; 
....................     delay_us(50); 
....................     spi_xfer(SFM, ENABLE_WRITE); //Send 0x06 
....................     LATC2 = 1; 
....................     return; 
.................... } 
.................... //---------------------------------------------------------------------------------------------- 
.................... //---------------------------------------------------------------------------------------------- 
....................  
.................... //_____________________Sector Erase Functions___________________________________________________ 
.................... void cf_sector_erase(unsigned int32 sector_address) 
.................... { 
....................     unsigned int8 address[4]; 
....................  
....................     address[0] = (unsigned int8)((sector_address >> 24) & 0xFF); // 0x _ _ 00 00 00 
0E8F:  MOVLB  03
0E90:  CLRF   5E
0E91:  CLRF   5F
0E92:  CLRF   60
0E93:  CLRF   78
0E94:  CLRF   79
0E95:  CLRF   7A
0E96:  MOVF   53,W
0E97:  MOVWF  54
....................     address[1] = (unsigned int8)((sector_address >> 16) & 0xFF); // 0x 00 _ _ 00 00 
0E98:  CLRF   5F
0E99:  CLRF   60
0E9A:  CLRF   78
0E9B:  CLRF   79
0E9C:  CLRF   7A
0E9D:  MOVF   52,W
0E9E:  MOVWF  55
....................     address[2] = (unsigned int8)((sector_address >> 8) & 0xFF);  // 0x 00 00 _ _ 00 
0E9F:  CLRF   60
0EA0:  CLRF   78
0EA1:  CLRF   79
0EA2:  CLRF   7A
0EA3:  MOVF   51,W
0EA4:  MOVWF  56
....................     address[3] = (unsigned int8)((sector_address)&0xFF);         // 0x 00 00 00 _ _ 
0EA5:  CLRF   78
0EA6:  CLRF   79
0EA7:  CLRF   7A
0EA8:  MOVF   50,W
0EA9:  MOVWF  57
....................  
....................     cf_write_enable(); 
0EAA:  MOVLB  00
0EAB:  CALL   67D
....................  
....................     LATD5 = 0; //lower the CS PIN 
0EAC:  MOVLB  02
0EAD:  BCF    0F.5
....................     delay_us(2); 
0EAE:  MOVLW  02
0EAF:  MOVWF  77
0EB0:  DECFSZ 77,F
0EB1:  GOTO   6B0
0EB2:  NOP
....................     /////////////////////////////////////////////////////////////////// 
....................     spi_xfer(CFM, ERASE_SECTOR); //SECTOR ERASE COMAND   (0xDC) 
0EB3:  MOVLW  DC
0EB4:  MOVLB  04
0EB5:  MOVWF  2A
0EB6:  MOVLW  08
0EB7:  MOVWF  2B
0EB8:  MOVLB  00
0EB9:  CALL   086
....................     spi_xfer(CFM, address[0]); 
0EBA:  MOVLB  03
0EBB:  MOVF   54,W
0EBC:  MOVLB  04
0EBD:  MOVWF  2A
0EBE:  MOVLW  08
0EBF:  MOVWF  2B
0EC0:  MOVLB  00
0EC1:  CALL   086
....................     spi_xfer(CFM, address[1]); 
0EC2:  MOVLB  03
0EC3:  MOVF   55,W
0EC4:  MOVLB  04
0EC5:  MOVWF  2A
0EC6:  MOVLW  08
0EC7:  MOVWF  2B
0EC8:  MOVLB  00
0EC9:  CALL   086
....................     spi_xfer(CFM, address[2]); 
0ECA:  MOVLB  03
0ECB:  MOVF   56,W
0ECC:  MOVLB  04
0ECD:  MOVWF  2A
0ECE:  MOVLW  08
0ECF:  MOVWF  2B
0ED0:  MOVLB  00
0ED1:  CALL   086
....................     spi_xfer(CFM, address[3]); 
0ED2:  MOVLB  03
0ED3:  MOVF   57,W
0ED4:  MOVLB  04
0ED5:  MOVWF  2A
0ED6:  MOVLW  08
0ED7:  MOVWF  2B
0ED8:  MOVLB  00
0ED9:  CALL   086
....................     ////////////////////////////////////////////////////////////////// 
....................     delay_us(2); 
0EDA:  MOVLW  02
0EDB:  MOVWF  77
0EDC:  DECFSZ 77,F
0EDD:  GOTO   6DC
0EDE:  NOP
....................     LATD5 = 1; //take CS PIN higher back 
0EDF:  MOVLB  02
0EE0:  BSF    0F.5
....................     delay_ms(3000); 
0EE1:  MOVLW  0C
0EE2:  MOVLB  03
0EE3:  MOVWF  5C
0EE4:  MOVLW  FA
0EE5:  MOVWF  68
0EE6:  MOVLP  00
0EE7:  MOVLB  00
0EE8:  CALL   079
0EE9:  MOVLP  08
0EEA:  MOVLB  03
0EEB:  DECFSZ 5C,F
0EEC:  GOTO   6E4
....................     return; 
0EED:  MOVLB  00
0EEE:  RETURN
.................... } 
....................  
.................... void sf_sector_erase(unsigned int32 sector_address) 
.................... { 
....................     unsigned int8 address[4]; 
....................  
....................     address[0] = (unsigned int8)((sector_address >> 24) & 0xFF); // 0x _ _ 00 00 00 
....................     address[1] = (unsigned int8)((sector_address >> 16) & 0xFF); // 0x 00 _ _ 00 00 
....................     address[2] = (unsigned int8)((sector_address >> 8) & 0xFF);  // 0x 00 00 _ _ 00 
....................     address[3] = (unsigned int8)((sector_address)&0xFF);         // 0x 00 00 00 _ _ 
....................  
....................     sf_write_enable(); 
....................  
....................     LATC2 = 0; //lower the CS PIN 
....................     delay_us(2); 
....................     /////////////////////////////////////////////////////////////////// 
....................     spi_xfer(SFM, ERASE_SECTOR); //SECTOR ERASE COMAND   (0xDC) 
....................     spi_xfer(SFM, address[0]); 
....................     spi_xfer(SFM, address[1]); 
....................     spi_xfer(SFM, address[2]); 
....................     spi_xfer(SFM, address[3]); 
....................     ////////////////////////////////////////////////////////////////// 
....................     delay_us(2); 
....................     LATC2 = 1; //take CS PIN higher back 
....................     delay_ms(3000); 
....................     return; 
.................... } 
.................... //----------------------------------------------------------------------------------------------- 
.................... //----------------------------------------------------------------------------------------------- 
....................  
.................... //________________________BYTE WRITE Function____________________________________________________ 
.................... void cf_byte_write(unsigned int32 byte_address, int8 data) 
.................... { 
....................     unsigned int8 address[4]; 
....................  
....................     //Byte extraction 
....................     address[0] = (unsigned int8)((byte_address >> 24) & 0xFF); // 0x _ _ 00 00 00 
0EEF:  MOVLB  03
0EF0:  CLRF   63
0EF1:  CLRF   64
0EF2:  CLRF   65
0EF3:  CLRF   78
0EF4:  CLRF   79
0EF5:  CLRF   7A
0EF6:  MOVF   58,W
0EF7:  MOVWF  5A
....................     address[1] = (unsigned int8)((byte_address >> 16) & 0xFF); // 0x 00 _ _ 00 00 
0EF8:  CLRF   64
0EF9:  CLRF   65
0EFA:  CLRF   78
0EFB:  CLRF   79
0EFC:  CLRF   7A
0EFD:  MOVF   57,W
0EFE:  MOVWF  5B
....................     address[2] = (unsigned int8)((byte_address >> 8) & 0xFF);  // 0x 00 00 _ _ 00 
0EFF:  CLRF   65
0F00:  CLRF   78
0F01:  CLRF   79
0F02:  CLRF   7A
0F03:  MOVF   56,W
0F04:  MOVWF  5C
....................     address[3] = (unsigned int8)((byte_address)&0xFF);         // 0x 00 00 00 _ _ 
0F05:  CLRF   78
0F06:  CLRF   79
0F07:  CLRF   7A
0F08:  MOVF   55,W
0F09:  MOVWF  5D
....................  
....................     cf_write_enable(); 
0F0A:  MOVLB  00
0F0B:  CALL   67D
....................  
....................     LATD5 = 0; //lower the CS PIN 
0F0C:  MOVLB  02
0F0D:  BCF    0F.5
....................     delay_us(2); 
0F0E:  MOVLW  02
0F0F:  MOVWF  77
0F10:  DECFSZ 77,F
0F11:  GOTO   710
0F12:  NOP
....................  
....................     //////////////////////////////////////////////////////////////// 
....................     spi_xfer(CFM, WRITE_BYTE); //Byte WRITE COMAND  (0x12) 
0F13:  MOVLW  12
0F14:  MOVLB  04
0F15:  MOVWF  2A
0F16:  MOVLW  08
0F17:  MOVWF  2B
0F18:  MOVLB  00
0F19:  CALL   086
....................     spi_xfer(CFM, address[0]); 
0F1A:  MOVLB  03
0F1B:  MOVF   5A,W
0F1C:  MOVLB  04
0F1D:  MOVWF  2A
0F1E:  MOVLW  08
0F1F:  MOVWF  2B
0F20:  MOVLB  00
0F21:  CALL   086
....................     spi_xfer(CFM, address[1]); 
0F22:  MOVLB  03
0F23:  MOVF   5B,W
0F24:  MOVLB  04
0F25:  MOVWF  2A
0F26:  MOVLW  08
0F27:  MOVWF  2B
0F28:  MOVLB  00
0F29:  CALL   086
....................     spi_xfer(CFM, address[2]); 
0F2A:  MOVLB  03
0F2B:  MOVF   5C,W
0F2C:  MOVLB  04
0F2D:  MOVWF  2A
0F2E:  MOVLW  08
0F2F:  MOVWF  2B
0F30:  MOVLB  00
0F31:  CALL   086
....................     spi_xfer(CFM, address[3]); 
0F32:  MOVLB  03
0F33:  MOVF   5D,W
0F34:  MOVLB  04
0F35:  MOVWF  2A
0F36:  MOVLW  08
0F37:  MOVWF  2B
0F38:  MOVLB  00
0F39:  CALL   086
....................  
....................     spi_xfer(CFM, data); 
0F3A:  MOVLB  03
0F3B:  MOVF   59,W
0F3C:  MOVLB  04
0F3D:  MOVWF  2A
0F3E:  MOVLW  08
0F3F:  MOVWF  2B
0F40:  MOVLB  00
0F41:  CALL   086
....................     //////////////////////////////////////////////////////////////// 
....................  
....................     LATD5 = 1; //take CS PIN higher back 
0F42:  MOVLB  02
0F43:  BSF    0F.5
....................  
....................     return; 
0F44:  MOVLB  00
0F45:  RETURN
.................... } 
....................  
.................... void sf_byte_write(unsigned int32 byte_address, int8 data) 
.................... { 
....................     unsigned int8 address[4]; 
....................  
....................     //Byte extraction 
....................     address[0] = (unsigned int8)((byte_address >> 24) & 0xFF); // 0x _ _ 00 00 00 
....................     address[1] = (unsigned int8)((byte_address >> 16) & 0xFF); // 0x 00 _ _ 00 00 
....................     address[2] = (unsigned int8)((byte_address >> 8) & 0xFF);  // 0x 00 00 _ _ 00 
....................     address[3] = (unsigned int8)((byte_address)&0xFF);         // 0x 00 00 00 _ _ 
....................  
....................     sf_write_enable(); 
....................  
....................     LATC2 = 0; //lower the CS PIN 
....................     delay_us(2); 
....................  
....................     //////////////////////////////////////////////////////////////// 
....................     spi_xfer(SFM, WRITE_BYTE); //PAGE WRITE COMAND  (0x12) 
....................     spi_xfer(SFM, address[0]); 
....................     spi_xfer(SFM, address[1]); 
....................     spi_xfer(SFM, address[2]); 
....................     spi_xfer(SFM, address[3]); 
....................  
....................     spi_xfer(SFM, data); 
....................     //////////////////////////////////////////////////////////////// 
....................  
....................     LATC2 = 1; //take CS PIN higher back 
....................  
....................     return; 
.................... } 
.................... //----------------------------------------------------------------------------------------------- 
.................... //----------------------------------------------------------------------------------------------- 
....................  
.................... //________________________BYTE read Function____________________________________________________ 
.................... unsigned int8 cf_byte_read(unsigned int32 address) 
.................... { 
....................  
....................     unsigned int8 address_[4]; 
....................     //Byte extraction 
....................     address_[0] = (unsigned int8)((address >> 24) & 0xFF); // 0x _ _ 00 00 00 
*
08B2:  MOVLB  04
08B3:  CLRF   2C
08B4:  CLRF   2D
08B5:  CLRF   2E
08B6:  CLRF   78
08B7:  CLRF   79
08B8:  CLRF   7A
08B9:  MOVF   23,W
08BA:  MOVWF  24
....................     address_[1] = (unsigned int8)((address >> 16) & 0xFF); // 0x 00 _ _ 00 00 
08BB:  CLRF   2D
08BC:  CLRF   2E
08BD:  CLRF   78
08BE:  CLRF   79
08BF:  CLRF   7A
08C0:  MOVF   22,W
08C1:  MOVWF  25
....................     address_[2] = (unsigned int8)((address >> 8) & 0xFF);  // 0x 00 00 _ _ 00 
08C2:  CLRF   2E
08C3:  CLRF   78
08C4:  CLRF   79
08C5:  CLRF   7A
08C6:  MOVF   21,W
08C7:  MOVWF  26
....................     address_[3] = (unsigned int8)((address)&0xFF);         // 0x 00 00 00 _ _ 
08C8:  CLRF   78
08C9:  CLRF   79
08CA:  CLRF   7A
08CB:  MOVF   20,W
08CC:  MOVWF  27
....................  
....................     LATD5 = 0; //lower the CS PIN 
08CD:  MOVLB  02
08CE:  BCF    0F.5
....................     delay_us(2); 
08CF:  MOVLW  02
08D0:  MOVWF  77
08D1:  DECFSZ 77,F
08D2:  GOTO   0D1
08D3:  NOP
....................     ////////////////////////////////////////////////////////////////// 
....................     int8 data; 
....................     spi_xfer(CFM, READ_DATA_BYTES); //READ DATA COMAND   (0x13) 
08D4:  MOVLW  13
08D5:  MOVLB  04
08D6:  MOVWF  2A
08D7:  MOVLW  08
08D8:  MOVWF  2B
08D9:  MOVLB  00
08DA:  CALL   086
....................     spi_xfer(CFM, address_[0]); 
08DB:  MOVLB  04
08DC:  MOVF   24,W
08DD:  MOVWF  2A
08DE:  MOVLW  08
08DF:  MOVWF  2B
08E0:  MOVLB  00
08E1:  CALL   086
....................     spi_xfer(CFM, address_[1]); 
08E2:  MOVLB  04
08E3:  MOVF   25,W
08E4:  MOVWF  2A
08E5:  MOVLW  08
08E6:  MOVWF  2B
08E7:  MOVLB  00
08E8:  CALL   086
....................     spi_xfer(CFM, address_[2]); 
08E9:  MOVLB  04
08EA:  MOVF   26,W
08EB:  MOVWF  2A
08EC:  MOVLW  08
08ED:  MOVWF  2B
08EE:  MOVLB  00
08EF:  CALL   086
....................     spi_xfer(CFM, address_[3]); 
08F0:  MOVLB  04
08F1:  MOVF   27,W
08F2:  MOVWF  2A
08F3:  MOVLW  08
08F4:  MOVWF  2B
08F5:  MOVLB  00
08F6:  CALL   086
....................  
....................     data = spi_xfer(CFM); 
08F7:  MOVLW  01
08F8:  MOVLB  04
08F9:  MOVWF  2A
08FA:  MOVLW  08
08FB:  MOVWF  2B
08FC:  MOVLB  00
08FD:  CALL   086
08FE:  MOVF   78,W
08FF:  MOVLB  04
0900:  MOVWF  28
....................     ////////////////////////////////////////////////////////////////// 
....................  
....................     LATD5 = 1; //take CS PIN higher back 
0901:  MOVLB  02
0902:  BSF    0F.5
....................     return data; 
0903:  MOVLB  04
0904:  MOVF   28,W
0905:  MOVWF  78
0906:  MOVLB  00
0907:  RETURN
.................... } 
....................  
.................... unsigned int8 sf_byte_read(unsigned int32 address) 
.................... { 
....................  
....................     unsigned int8 address_[4]; 
....................     //Byte extraction 
....................     address_[0] = (unsigned int8)((address >> 24) & 0xFF); // 0x _ _ 00 00 00 
*
0934:  MOVLB  04
0935:  CLRF   2C
0936:  CLRF   2D
0937:  CLRF   2E
0938:  CLRF   78
0939:  CLRF   79
093A:  CLRF   7A
093B:  MOVF   23,W
093C:  MOVWF  24
....................     address_[1] = (unsigned int8)((address >> 16) & 0xFF); // 0x 00 _ _ 00 00 
093D:  CLRF   2D
093E:  CLRF   2E
093F:  CLRF   78
0940:  CLRF   79
0941:  CLRF   7A
0942:  MOVF   22,W
0943:  MOVWF  25
....................     address_[2] = (unsigned int8)((address >> 8) & 0xFF);  // 0x 00 00 _ _ 00 
0944:  CLRF   2E
0945:  CLRF   78
0946:  CLRF   79
0947:  CLRF   7A
0948:  MOVF   21,W
0949:  MOVWF  26
....................     address_[3] = (unsigned int8)((address)&0xFF);         // 0x 00 00 00 _ _ 
094A:  CLRF   78
094B:  CLRF   79
094C:  CLRF   7A
094D:  MOVF   20,W
094E:  MOVWF  27
....................  
....................     LATC2 = 0; //lower the CS PIN 
094F:  MOVLB  02
0950:  BCF    0E.2
....................     delay_us(2); 
0951:  MOVLW  02
0952:  MOVWF  77
0953:  DECFSZ 77,F
0954:  GOTO   153
0955:  NOP
....................     ////////////////////////////////////////////////////////////////// 
....................     int8 data; 
....................     spi_xfer(SFM, READ_DATA_BYTES); //READ DATA COMAND   (0x13) 
0956:  MOVLW  13
0957:  MOVLB  04
0958:  MOVWF  2A
0959:  MOVLW  08
095A:  MOVWF  2B
095B:  MOVLB  00
095C:  CALL   108
....................     spi_xfer(SFM, address_[0]); 
095D:  MOVLB  04
095E:  MOVF   24,W
095F:  MOVWF  2A
0960:  MOVLW  08
0961:  MOVWF  2B
0962:  MOVLB  00
0963:  CALL   108
....................     spi_xfer(SFM, address_[1]); 
0964:  MOVLB  04
0965:  MOVF   25,W
0966:  MOVWF  2A
0967:  MOVLW  08
0968:  MOVWF  2B
0969:  MOVLB  00
096A:  CALL   108
....................     spi_xfer(SFM, address_[2]); 
096B:  MOVLB  04
096C:  MOVF   26,W
096D:  MOVWF  2A
096E:  MOVLW  08
096F:  MOVWF  2B
0970:  MOVLB  00
0971:  CALL   108
....................     spi_xfer(SFM, address_[3]); 
0972:  MOVLB  04
0973:  MOVF   27,W
0974:  MOVWF  2A
0975:  MOVLW  08
0976:  MOVWF  2B
0977:  MOVLB  00
0978:  CALL   108
....................  
....................     data = spi_xfer(SFM); 
0979:  MOVLW  02
097A:  MOVLB  04
097B:  MOVWF  2A
097C:  MOVLW  08
097D:  MOVWF  2B
097E:  MOVLB  00
097F:  CALL   108
0980:  MOVF   78,W
0981:  MOVLB  04
0982:  MOVWF  28
....................     ////////////////////////////////////////////////////////////////// 
....................  
....................     LATC2 = 1; //take CS PIN higher back 
0983:  MOVLB  02
0984:  BSF    0E.2
....................     return data; 
0985:  MOVLB  04
0986:  MOVF   28,W
0987:  MOVWF  78
0988:  MOVLB  00
0989:  RETURN
.................... } 
.................... //----------------------------------------------------------------------------------------------- 
.................... //----------------------------------------------------------------------------------------------- 
....................  
.................... void flash_copy(unsigned int32 start_address, unsigned int32 data_length) 
.................... { 
....................  
....................     cf_sector_erase(start_address); 
*
0F46:  MOVLB  03
0F47:  MOVF   45,W
0F48:  MOVWF  53
0F49:  MOVF   44,W
0F4A:  MOVWF  52
0F4B:  MOVF   43,W
0F4C:  MOVWF  51
0F4D:  MOVF   42,W
0F4E:  MOVWF  50
0F4F:  MOVLB  00
0F50:  CALL   68F
....................  
....................     for (int32 inc = 0; inc < data_length; inc++) { 
0F51:  MOVLB  03
0F52:  CLRF   4D
0F53:  CLRF   4C
0F54:  CLRF   4B
0F55:  CLRF   4A
0F56:  MOVF   4D,W
0F57:  SUBWF  49,W
0F58:  BTFSS  03.0
0F59:  GOTO   7AD
0F5A:  BTFSS  03.2
0F5B:  GOTO   76C
0F5C:  MOVF   4C,W
0F5D:  SUBWF  48,W
0F5E:  BTFSS  03.0
0F5F:  GOTO   7AD
0F60:  BTFSS  03.2
0F61:  GOTO   76C
0F62:  MOVF   4B,W
0F63:  SUBWF  47,W
0F64:  BTFSS  03.0
0F65:  GOTO   7AD
0F66:  BTFSS  03.2
0F67:  GOTO   76C
0F68:  MOVF   46,W
0F69:  SUBWF  4A,W
0F6A:  BTFSC  03.0
0F6B:  GOTO   7AD
....................         cf_byte_write(start_address + inc, sf_byte_read(start_address + inc)); 
0F6C:  MOVF   4A,W
0F6D:  ADDWF  42,W
0F6E:  MOVWF  50
0F6F:  MOVF   4B,W
0F70:  ADDWFC 43,W
0F71:  MOVWF  51
0F72:  MOVF   4C,W
0F73:  ADDWFC 44,W
0F74:  MOVWF  52
0F75:  MOVF   4D,W
0F76:  ADDWFC 45,W
0F77:  MOVWF  53
0F78:  MOVF   4A,W
0F79:  ADDWF  42,W
0F7A:  MOVWF  54
0F7B:  MOVF   4B,W
0F7C:  ADDWFC 43,W
0F7D:  MOVWF  55
0F7E:  MOVF   4C,W
0F7F:  ADDWFC 44,W
0F80:  MOVWF  56
0F81:  MOVF   4D,W
0F82:  ADDWFC 45,W
0F83:  MOVWF  57
0F84:  MOVLB  04
0F85:  MOVWF  23
0F86:  MOVLB  03
0F87:  MOVF   56,W
0F88:  MOVLB  04
0F89:  MOVWF  22
0F8A:  MOVLB  03
0F8B:  MOVF   55,W
0F8C:  MOVLB  04
0F8D:  MOVWF  21
0F8E:  MOVLB  03
0F8F:  MOVF   54,W
0F90:  MOVLB  04
0F91:  MOVWF  20
0F92:  MOVLB  00
0F93:  CALL   134
0F94:  MOVF   78,W
0F95:  MOVLB  03
0F96:  MOVWF  54
0F97:  MOVF   53,W
0F98:  MOVWF  58
0F99:  MOVF   52,W
0F9A:  MOVWF  57
0F9B:  MOVF   51,W
0F9C:  MOVWF  56
0F9D:  MOVF   50,W
0F9E:  MOVWF  55
0F9F:  MOVF   54,W
0FA0:  MOVWF  59
0FA1:  MOVLB  00
0FA2:  CALL   6EF
0FA3:  MOVLW  01
0FA4:  MOVLB  03
0FA5:  ADDWF  4A,F
0FA6:  BTFSC  03.0
0FA7:  INCF   4B,F
0FA8:  BTFSC  03.2
0FA9:  INCF   4C,F
0FAA:  BTFSC  03.2
0FAB:  INCF   4D,F
0FAC:  GOTO   756
....................     } 
....................     return; 
0FAD:  MOVLB  00
0FAE:  RETURN
.................... } 
....................  
.................... /* 
.................... int8 READ_CHIP_ID() 
.................... { 
....................    RC7 = 0;           //lower the CS PIN 
....................   
....................    //////////////////////////////////////////////////////////////// 
....................    int8 chip_id; 
....................    spi_xfer(SPIPORT,READ_ID);    //READ ID COMAND   (0x9F) 
....................    chip_id = spi_xfer(SPIPORT); 
....................    //////////////////////////////////////////////////////////////// 
....................   
....................    RC7 = 1;         //take CS PIN higher back 
....................    return chip_id; 
.................... } 
....................  
....................  
.................... int8 READ_STATUS_REGISTER() 
.................... { 
....................  RC7 = 0;           //lower the CS PIN 
....................   
....................  ///////////////////////////////////////////////////////////////// 
....................  int8 status_reg; 
....................  spi_xfer(SPIPORT,READ_STATUS_REG); //READ STATUS REGISTER COMAND  (0x05) 
....................  status_reg = spi_xfer(SPIPORT); 
....................  ///////////////////////////////////////////////////////////////// 
....................   
....................  RC7 = 1;         //take CS PIN higher back 
....................  return status_reg; 
.................... } 
....................  
....................  
....................  
.................... */ 
....................  
.................... #include <packet_codesri.c> 
.................... #define NRZI3_DATA_SIZE 101 
....................  
.................... unsigned int8 sat_id; 
.................... int crc = 0; // 0 when CRC is wrong, 1 when CRC is correct. 
.................... int8 mbi = 0; 
.................... unsigned int32 num = 0; 
....................  
.................... // CRC calculation function 
.................... int16 mk_crc(unsigned int8* data, unsigned int8 size) 
*
0594:  MOVLB  03
0595:  CLRF   6E
0596:  CLRF   6D
0597:  MOVLW  FF
0598:  MOVWF  6C
0599:  MOVWF  6B
059A:  MOVLB  04
059B:  CLRF   23
059C:  CLRF   22
059D:  MOVLW  84
059E:  MOVWF  21
059F:  MOVLW  08
05A0:  MOVWF  20
.................... { 
....................     unsigned int32 crcreg = 0xffff; 
....................     unsigned int32 calc = 0x8408; 
....................     unsigned int8 w; 
....................     int32 i; 
....................     int32 k; 
....................     unsigned int8 cal_data[NRZI3_DATA_SIZE]; 
....................  
....................     for (k = 0; k < size; k++) { 
05A1:  CLRF   2B
05A2:  CLRF   2A
05A3:  CLRF   29
05A4:  CLRF   28
05A5:  MOVF   2B,F
05A6:  BTFSS  03.2
05A7:  GOTO   646
05A8:  MOVF   2A,F
05A9:  BTFSS  03.2
05AA:  GOTO   646
05AB:  MOVF   29,F
05AC:  BTFSS  03.2
05AD:  GOTO   646
05AE:  MOVLB  03
05AF:  MOVF   6A,W
05B0:  MOVLB  04
05B1:  SUBWF  28,W
05B2:  BTFSC  03.0
05B3:  GOTO   646
....................         cal_data[k] = data[k]; 
05B4:  MOVLW  4C
05B5:  ADDWF  28,W
05B6:  MOVWF  78
05B7:  MOVLW  21
05B8:  ADDWFC 29,W
05B9:  MOVWF  7A
05BA:  MOVF   78,W
05BB:  MOVLB  05
05BC:  MOVWF  44
05BD:  MOVF   7A,W
05BE:  MOVWF  45
05BF:  MOVLB  03
05C0:  MOVF   68,W
05C1:  MOVLB  04
05C2:  ADDWF  28,W
05C3:  MOVWF  04
05C4:  MOVLB  03
05C5:  MOVF   69,W
05C6:  MOVLB  04
05C7:  ADDWFC 29,W
05C8:  MOVWF  05
05C9:  MOVF   00,W
05CA:  MOVLB  05
05CB:  MOVWF  46
05CC:  MOVF   45,W
05CD:  MOVWF  05
05CE:  MOVF   44,W
05CF:  MOVWF  04
05D0:  MOVF   46,W
05D1:  MOVWF  00
....................  
....................         for (i = 0; i < 8; i++) { 
05D2:  MOVLB  04
05D3:  CLRF   27
05D4:  CLRF   26
05D5:  CLRF   25
05D6:  CLRF   24
05D7:  MOVF   27,F
05D8:  BTFSS  03.2
05D9:  GOTO   63D
05DA:  MOVF   26,F
05DB:  BTFSS  03.2
05DC:  GOTO   63D
05DD:  MOVF   25,F
05DE:  BTFSS  03.2
05DF:  GOTO   63D
05E0:  MOVF   24,W
05E1:  SUBLW  07
05E2:  BTFSS  03.0
05E3:  GOTO   63D
....................             w = (crcreg ^ cal_data[k]) & 0x0001; 
05E4:  MOVLW  4C
05E5:  ADDWF  28,W
05E6:  MOVWF  04
05E7:  MOVLW  21
05E8:  ADDWFC 29,W
05E9:  MOVWF  05
05EA:  MOVF   00,W
05EB:  MOVLB  03
05EC:  XORWF  6B,W
05ED:  MOVLB  05
05EE:  MOVWF  44
05EF:  MOVLB  03
05F0:  MOVF   6C,W
05F1:  MOVLB  05
05F2:  MOVWF  45
05F3:  MOVLB  03
05F4:  MOVF   6D,W
05F5:  MOVLB  05
05F6:  MOVWF  46
05F7:  MOVLB  03
05F8:  MOVF   6E,W
05F9:  MOVLB  05
05FA:  MOVWF  47
05FB:  MOVF   44,W
05FC:  ANDLW  01
05FD:  MOVLB  03
05FE:  MOVWF  6F
....................             crcreg = crcreg >> 1; 
05FF:  BCF    03.0
0600:  RRF    6E,F
0601:  RRF    6D,F
0602:  RRF    6C,F
0603:  RRF    6B,F
....................  
....................             if (w == 1) { 
0604:  DECFSZ 6F,W
0605:  GOTO   616
....................                 crcreg = crcreg ^ calc; 
0606:  MOVLB  04
0607:  MOVF   20,W
0608:  MOVLB  03
0609:  XORWF  6B,F
060A:  MOVLB  04
060B:  MOVF   21,W
060C:  MOVLB  03
060D:  XORWF  6C,F
060E:  MOVLB  04
060F:  MOVF   22,W
0610:  MOVLB  03
0611:  XORWF  6D,F
0612:  MOVLB  04
0613:  MOVF   23,W
0614:  MOVLB  03
0615:  XORWF  6E,F
....................             } 
....................  
....................             cal_data[k] = cal_data[k] >> 1; 
0616:  MOVLW  4C
0617:  MOVLB  04
0618:  ADDWF  28,W
0619:  MOVWF  78
061A:  MOVLW  21
061B:  ADDWFC 29,W
061C:  MOVWF  7A
061D:  MOVF   78,W
061E:  MOVLB  05
061F:  MOVWF  44
0620:  MOVF   7A,W
0621:  MOVWF  45
0622:  MOVLW  4C
0623:  MOVLB  04
0624:  ADDWF  28,W
0625:  MOVWF  04
0626:  MOVLW  21
0627:  ADDWFC 29,W
0628:  MOVWF  05
0629:  BCF    03.0
062A:  RRF    00,W
062B:  MOVLB  05
062C:  MOVWF  46
062D:  MOVF   45,W
062E:  MOVWF  05
062F:  MOVF   44,W
0630:  MOVWF  04
0631:  MOVF   46,W
0632:  MOVWF  00
0633:  MOVLW  01
0634:  MOVLB  04
0635:  ADDWF  24,F
0636:  BTFSC  03.0
0637:  INCF   25,F
0638:  BTFSC  03.2
0639:  INCF   26,F
063A:  BTFSC  03.2
063B:  INCF   27,F
063C:  GOTO   5D7
....................         } 
063D:  MOVLW  01
063E:  ADDWF  28,F
063F:  BTFSC  03.0
0640:  INCF   29,F
0641:  BTFSC  03.2
0642:  INCF   2A,F
0643:  BTFSC  03.2
0644:  INCF   2B,F
0645:  GOTO   5A5
....................     } 
....................  
....................     crcreg = crcreg ^ 0xffff; 
0646:  MOVLW  FF
0647:  MOVLB  03
0648:  XORWF  6B,F
0649:  XORWF  6C,F
....................     return crcreg; 
064A:  MOVF   6B,W
064B:  MOVWF  78
064C:  MOVF   6C,W
064D:  MOVWF  79
064E:  MOVLB  00
064F:  RETURN
.................... } 
.................... //___________________________________________________________________________<< 
....................  
.................... //___________________________________________________________________________>> 
.................... //_________________Receive data packets________________________________________ 
.................... #define CMD_LEGACY_LENGTH 14 
.................... #define CMD_LENGTH 22 
.................... unsigned int8 cmd_pckt[CMD_LENGTH] = { 0 }; // Makes all elements zero 
....................  
.................... unsigned int ib = 0; //input buffer increment 
....................  
.................... //______________________This function make rx buffer zero______________________________<< 
.................... void rx_bfr_zero() 
.................... { 
....................     for (int p = 0; p < CMD_LENGTH; p++) { 
*
057B:  MOVLB  03
057C:  CLRF   41
057D:  MOVF   41,W
057E:  SUBLW  15
057F:  BTFSS  03.0
0580:  GOTO   58B
....................         cmd_pckt[p] = 0x00; 
0581:  MOVLW  14
0582:  ADDWF  41,W
0583:  MOVWF  04
0584:  MOVLW  20
0585:  MOVWF  05
0586:  BTFSC  03.0
0587:  INCF   05,F
0588:  CLRF   00
0589:  INCF   41,F
058A:  GOTO   57D
....................     } 
....................     ib = 0; 
058B:  MOVLB  00
058C:  CLRF   4A
058D:  RETURN
.................... } 
.................... //_____________________________________________________________________________________<< 
....................  
.................... //_____________________________________________________________________________________<< 
.................... //_________________Receive data dump buffer______________________________________________ 
.................... //_________________This function makes the temporary buffer zero_________________________ 
....................  
.................... #define BUFFER_DELTA 10 
.................... #define BUFFER_LENGTH (CMD_LENGTH + BUFFER_DELTA) 
.................... unsigned int8 buffer[BUFFER_LENGTH]; 
.................... void buffer_zero() 
.................... { 
....................     for (int p = 0; p < BUFFER_LENGTH; p++) { 
*
0685:  MOVLB  03
0686:  CLRF   40
0687:  MOVF   40,W
0688:  SUBLW  1F
0689:  BTFSS  03.0
068A:  GOTO   695
....................         buffer[p] = 0x00; 
068B:  MOVLW  2B
068C:  ADDWF  40,W
068D:  MOVWF  04
068E:  MOVLW  20
068F:  MOVWF  05
0690:  BTFSC  03.0
0691:  INCF   05,F
0692:  CLRF   00
0693:  INCF   40,F
0694:  GOTO   687
....................     } 
.................... } 
....................  
.................... //_____________________________________________________________________________________<< 
....................  
.................... //_____________________________________________________________________________________>> 
.................... //_________________Acknowledgement Success packet________________________________________ 
....................  
.................... #define ACK_LENGTH 32 
.................... unsigned int8 ack_pckt[ACK_LENGTH]; 
....................  
.................... void send_success_ack() 
.................... { 
....................     //    Ground stationCall sign---------------[ 0-----5 ] 
....................     ack_pckt[0] = 0x4A; // J 
*
06E1:  MOVLW  4A
06E2:  MOVWF  6B
....................     ack_pckt[1] = 0x47; // G 
06E3:  MOVLW  47
06E4:  MOVWF  6C
....................     ack_pckt[2] = 0x36; // 6 
06E5:  MOVLW  36
06E6:  MOVWF  6D
....................     ack_pckt[3] = 0x59; // Y 
06E7:  MOVLW  59
06E8:  MOVWF  6E
....................     ack_pckt[4] = 0x42; // B 
06E9:  MOVLW  42
06EA:  MOVWF  6F
....................     ack_pckt[5] = 0x57; // W 
06EB:  MOVLW  57
06EC:  MOVLB  01
06ED:  MOVWF  20
....................  
....................     //    Dest SSID-----------------------------[ 6 ] 
....................     ack_pckt[6] = 0x30; //char 0 
06EE:  MOVLW  30
06EF:  MOVWF  21
....................  
....................     //    Satellite Call Sign-------------------[ 7-----12 ] 
....................     ack_pckt[7] = 'L'; 
06F0:  MOVLW  4C
06F1:  MOVWF  22
....................     ack_pckt[8] = 'E'; 
06F2:  MOVLW  45
06F3:  MOVWF  23
....................     ack_pckt[9] = 'O'; 
06F4:  MOVLW  4F
06F5:  MOVWF  24
....................     ack_pckt[10] = 'P'; 
06F6:  MOVLW  50
06F7:  MOVWF  25
....................     ack_pckt[11] = 'A'; 
06F8:  MOVLW  41
06F9:  MOVWF  26
....................     ack_pckt[12] = 'R'; 
06FA:  MOVLW  52
06FB:  MOVWF  27
....................  
....................     //    Source SSID---------------------------[ 13 ] 
....................     ack_pckt[13] = 0x30; //char 0 
06FC:  MOVLW  30
06FD:  MOVWF  28
....................  
....................     //    Control-------------------------------[ 14 ] 
....................     ack_pckt[14] = 0x3E; // 
06FE:  MOVLW  3E
06FF:  MOVWF  29
....................  
....................     //    PID-----------------------------------[ 15 ] 
....................     ack_pckt[15] = 0xF0; // 
0700:  MOVLW  F0
0701:  MOVWF  2A
....................  
....................     //    Header--------------------------------[ 16 ] 
....................     ack_pckt[16] = 0xAA; // 
0702:  MOVLW  AA
0703:  MOVWF  2B
....................  
....................     //    SAT Header----------------------------[ 17] 
....................     ack_pckt[17] = 0x03; // 
0704:  MOVLW  03
0705:  MOVWF  2C
....................  
....................     //    Pckt sequence number higher byte------[ 18 ] 
....................     ack_pckt[18] = cmd_pckt[1]; // 
0706:  MOVLB  00
0707:  MOVF   35,W
0708:  MOVLB  01
0709:  MOVWF  2D
....................  
....................     //    Pckt sequence number lower byte-------[ 19 ] 
....................     ack_pckt[19] = cmd_pckt[2]; // 
070A:  MOVLB  00
070B:  MOVF   36,W
070C:  MOVLB  01
070D:  MOVWF  2E
....................  
....................     //    CMD back------------------------------[ 20 - 28 ] 
....................     ack_pckt[20] = cmd_pckt[3]; 
070E:  MOVLB  00
070F:  MOVF   37,W
0710:  MOVLB  01
0711:  MOVWF  2F
....................     ack_pckt[21] = cmd_pckt[4]; 
0712:  MOVLB  00
0713:  MOVF   38,W
0714:  MOVLB  01
0715:  MOVWF  30
....................     ack_pckt[22] = cmd_pckt[5]; 
0716:  MOVLB  00
0717:  MOVF   39,W
0718:  MOVLB  01
0719:  MOVWF  31
....................     ack_pckt[23] = cmd_pckt[6]; 
071A:  MOVLB  00
071B:  MOVF   3A,W
071C:  MOVLB  01
071D:  MOVWF  32
....................     ack_pckt[24] = cmd_pckt[7]; 
071E:  MOVLB  00
071F:  MOVF   3B,W
0720:  MOVLB  01
0721:  MOVWF  33
....................     ack_pckt[25] = cmd_pckt[8]; 
0722:  MOVLB  00
0723:  MOVF   3C,W
0724:  MOVLB  01
0725:  MOVWF  34
....................     ack_pckt[26] = cmd_pckt[9]; 
0726:  MOVLB  00
0727:  MOVF   3D,W
0728:  MOVLB  01
0729:  MOVWF  35
....................     ack_pckt[27] = cmd_pckt[10]; 
072A:  MOVLB  00
072B:  MOVF   3E,W
072C:  MOVLB  01
072D:  MOVWF  36
....................     ack_pckt[28] = cmd_pckt[11]; 
072E:  MOVLB  00
072F:  MOVF   3F,W
0730:  MOVLB  01
0731:  MOVWF  37
....................  
....................     //    Footer--------------------------------[ 29 ] 
....................     ack_pckt[29] = 0xAA; // 
0732:  MOVLW  AA
0733:  MOVWF  38
....................  
....................     //    CRC Calculation-----------------------[ 30 - 31 ] 
....................     int16 outdata = mk_crc(ack_pckt, 30); 
0734:  MOVLW  20
0735:  MOVLB  03
0736:  MOVWF  69
0737:  MOVLW  4B
0738:  MOVWF  68
0739:  MOVLW  1E
073A:  MOVWF  6A
073B:  MOVLB  00
073C:  CALL   594
073D:  MOVF   79,W
073E:  MOVLB  03
073F:  MOVWF  42
0740:  MOVF   78,W
0741:  MOVWF  41
....................  
....................     ack_pckt[30] = outdata; 
0742:  MOVF   41,W
0743:  MOVLB  01
0744:  MOVWF  39
....................     ack_pckt[31] = outdata >> 8; 
0745:  MOVLB  03
0746:  MOVF   42,W
0747:  MOVLB  01
0748:  MOVWF  3A
....................  
....................     //    Send pckt------------------------------ 
....................     output_high(pin_d1); 
0749:  BCF    0F.1
074A:  MOVLB  02
074B:  BSF    0F.1
....................     delay_ms(2000); 
074C:  MOVLW  08
074D:  MOVLB  03
074E:  MOVWF  44
074F:  MOVLW  FA
0750:  MOVWF  68
0751:  MOVLB  00
0752:  CALL   079
0753:  MOVLB  03
0754:  DECFSZ 44,F
0755:  GOTO   74F
....................     for (int ih = 0; ih < ACK_LENGTH; ih++) //buffer print 
0756:  CLRF   43
0757:  MOVF   43,W
0758:  SUBLW  1F
0759:  BTFSS  03.0
075A:  GOTO   76A
....................     { 
....................         fputc(ack_pckt[ih], TR_CP); 
075B:  MOVLW  4B
075C:  ADDWF  43,W
075D:  MOVWF  04
075E:  MOVLW  20
075F:  MOVWF  05
0760:  BTFSC  03.0
0761:  INCF   05,F
0762:  MOVF   00,W
0763:  MOVWF  44
0764:  MOVF   44,W
0765:  MOVLB  00
0766:  CALL   6DB
0767:  MOVLB  03
0768:  INCF   43,F
0769:  GOTO   757
....................     } 
....................     delay_ms(500); 
076A:  MOVLW  02
076B:  MOVWF  44
076C:  MOVLW  FA
076D:  MOVWF  68
076E:  MOVLB  00
076F:  CALL   079
0770:  MOVLB  03
0771:  DECFSZ 44,F
0772:  GOTO   76C
....................     output_low(pin_d1); 
0773:  MOVLB  01
0774:  BCF    0F.1
0775:  MOVLB  02
0776:  BCF    0F.1
0777:  MOVLB  00
0778:  RETURN
.................... } 
.................... //___________________________________________________________________________<< 
....................  
.................... //_____________________________________________________________________________________>> 
.................... //_________________Acknoledgement Success packet_________________________________________ 
....................  
.................... void send_not_success_ack() 
.................... { 
....................     //    Ground stationCall sign---------------[ 0-----5 ] 
....................     ack_pckt[0] = 0x4a; // J 
*
0800:  MOVLW  4A
0801:  MOVWF  6B
....................     ack_pckt[1] = 0x47; // G 
0802:  MOVLW  47
0803:  MOVWF  6C
....................     ack_pckt[2] = 0x36; // 6 
0804:  MOVLW  36
0805:  MOVWF  6D
....................     ack_pckt[3] = 0x59; // Y 
0806:  MOVLW  59
0807:  MOVWF  6E
....................     ack_pckt[4] = 0x42; // B 
0808:  MOVLW  42
0809:  MOVWF  6F
....................     ack_pckt[5] = 0x57; // W 
080A:  MOVLW  57
080B:  MOVLB  01
080C:  MOVWF  20
....................  
....................     //    Dest SSID-----------------------------[ 6 ] 
....................     ack_pckt[6] = 0x30; //char 0 
080D:  MOVLW  30
080E:  MOVWF  21
....................  
....................     //    Satellite Call Sign-------------------[ 7-----12 ] 
....................     ack_pckt[7] = 'L'; 
080F:  MOVLW  4C
0810:  MOVWF  22
....................     ack_pckt[8] = 'E'; 
0811:  MOVLW  45
0812:  MOVWF  23
....................     ack_pckt[9] = 'O'; 
0813:  MOVLW  4F
0814:  MOVWF  24
....................     ack_pckt[10] = 'P'; 
0815:  MOVLW  50
0816:  MOVWF  25
....................     ack_pckt[11] = 'A'; 
0817:  MOVLW  41
0818:  MOVWF  26
....................     ack_pckt[12] = 'R'; 
0819:  MOVLW  52
081A:  MOVWF  27
....................  
....................     //    Source SSID---------------------------[ 13 ] 
....................     ack_pckt[13] = 0x30; //char 0 
081B:  MOVLW  30
081C:  MOVWF  28
....................  
....................     //    Control-------------------------------[ 14 ] 
....................     ack_pckt[14] = 0x3E; // 
081D:  MOVLW  3E
081E:  MOVWF  29
....................  
....................     //    PID-----------------------------------[ 15 ] 
....................     ack_pckt[15] = 0xF0; // 
081F:  MOVLW  F0
0820:  MOVWF  2A
....................  
....................     //    Header--------------------------------[ 16 ] 
....................     ack_pckt[16] = 0xAA; // 
0821:  MOVLW  AA
0822:  MOVWF  2B
....................  
....................     //    SAT Header----------------------------[ 17] 
....................     ack_pckt[17] = 0x03; // 
0823:  MOVLW  03
0824:  MOVWF  2C
....................  
....................     //    Pckt sequence number higher byte------[ 18 ] 
....................     ack_pckt[18] = cmd_pckt[1]; // 
0825:  MOVLB  00
0826:  MOVF   35,W
0827:  MOVLB  01
0828:  MOVWF  2D
....................  
....................     //    Pckt sequence number lower byte-------[ 19 ] 
....................     ack_pckt[19] = cmd_pckt[2]; // 
0829:  MOVLB  00
082A:  MOVF   36,W
082B:  MOVLB  01
082C:  MOVWF  2E
....................  
....................     //    CMD back------------------------------[ 20 - 28 ] 
....................     ack_pckt[20] = 0x69; 
082D:  MOVLW  69
082E:  MOVWF  2F
....................     ack_pckt[21] = 0x69; 
082F:  MOVWF  30
....................     ack_pckt[22] = 0x69; 
0830:  MOVWF  31
....................     ack_pckt[23] = 0x69; 
0831:  MOVWF  32
....................     ack_pckt[24] = 0x69; 
0832:  MOVWF  33
....................     ack_pckt[25] = 0x69; 
0833:  MOVWF  34
....................     ack_pckt[26] = 0x69; 
0834:  MOVWF  35
....................     ack_pckt[27] = 0x69; 
0835:  MOVWF  36
....................     ack_pckt[28] = 0x69; 
0836:  MOVWF  37
....................  
....................     //    Footer--------------------------------[ 29 ] 
....................     ack_pckt[29] = 0xAA; // 
0837:  MOVLW  AA
0838:  MOVWF  38
....................  
....................     //    CRC Calculation-----------------------[ 30 - 31 ] 
....................     int16 outdata = mk_crc(ack_pckt, 30); 
0839:  MOVLW  20
083A:  MOVLB  03
083B:  MOVWF  69
083C:  MOVLW  4B
083D:  MOVWF  68
083E:  MOVLW  1E
083F:  MOVWF  6A
0840:  MOVLP  00
0841:  MOVLB  00
0842:  CALL   594
0843:  MOVLP  08
0844:  MOVF   79,W
0845:  MOVLB  03
0846:  MOVWF  41
0847:  MOVF   78,W
0848:  MOVWF  40
....................  
....................     ack_pckt[30] = outdata; 
0849:  MOVF   40,W
084A:  MOVLB  01
084B:  MOVWF  39
....................     ack_pckt[31] = outdata >> 8; 
084C:  MOVLB  03
084D:  MOVF   41,W
084E:  MOVLB  01
084F:  MOVWF  3A
....................  
....................     //    Send pckt------------------------------ 
....................     output_high(pin_d1); 
0850:  BCF    0F.1
0851:  MOVLB  02
0852:  BSF    0F.1
....................     delay_ms(2000); 
0853:  MOVLW  08
0854:  MOVLB  03
0855:  MOVWF  43
0856:  MOVLW  FA
0857:  MOVWF  68
0858:  MOVLP  00
0859:  MOVLB  00
085A:  CALL   079
085B:  MOVLP  08
085C:  MOVLB  03
085D:  DECFSZ 43,F
085E:  GOTO   056
....................     for (int ih = 0; ih < ACK_LENGTH; ih++) //buffer print 
085F:  CLRF   42
0860:  MOVF   42,W
0861:  SUBLW  1F
0862:  BTFSS  03.0
0863:  GOTO   075
....................     { 
....................         fputc(ack_pckt[ih], TR_CP); 
0864:  MOVLW  4B
0865:  ADDWF  42,W
0866:  MOVWF  04
0867:  MOVLW  20
0868:  MOVWF  05
0869:  BTFSC  03.0
086A:  INCF   05,F
086B:  MOVF   00,W
086C:  MOVWF  43
086D:  MOVF   43,W
086E:  MOVLP  00
086F:  MOVLB  00
0870:  CALL   6DB
0871:  MOVLP  08
0872:  MOVLB  03
0873:  INCF   42,F
0874:  GOTO   060
....................     } 
....................     delay_ms(500); 
0875:  MOVLW  02
0876:  MOVWF  43
0877:  MOVLW  FA
0878:  MOVWF  68
0879:  MOVLP  00
087A:  MOVLB  00
087B:  CALL   079
087C:  MOVLP  08
087D:  MOVLB  03
087E:  DECFSZ 43,F
087F:  GOTO   077
....................     output_low(pin_d1); 
0880:  MOVLB  01
0881:  BCF    0F.1
0882:  MOVLB  02
0883:  BCF    0F.1
0884:  MOVLB  00
0885:  RETURN
.................... } 
.................... //_____________________________________________________________________________________<< 
....................  
.................... //_____________________________________________________________________________________>> 
.................... //_________________Output data packets___________________________________________________ 
....................  
.................... #define DATA_PCKT_LENGTH 105 
.................... unsigned int8 data_pckt[DATA_PCKT_LENGTH]; 
....................  
.................... void send_data_packets(unsigned int32 start_address, unsigned int32 data_size, unsigned int32 packets, int1 x, unsigned int8 skip = 1) 
.................... { 
....................     unsigned int32 num_of_pckt; 
....................  
....................     if (packets == 0) { 
*
098A:  MOVLB  03
098B:  MOVF   49,F
098C:  BTFSS  03.2
098D:  GOTO   1BF
098E:  MOVF   4A,F
098F:  BTFSS  03.2
0990:  GOTO   1BF
0991:  MOVF   4B,F
0992:  BTFSS  03.2
0993:  GOTO   1BF
0994:  MOVF   4C,F
0995:  BTFSS  03.2
0996:  GOTO   1BF
....................         num_of_pckt = (data_size / 81) + 1; 
0997:  BCF    03.1
0998:  MOVF   48,W
0999:  MOVWF  6B
099A:  MOVF   47,W
099B:  MOVWF  6A
099C:  MOVF   46,W
099D:  MOVWF  69
099E:  MOVF   45,W
099F:  MOVWF  68
09A0:  CLRF   6F
09A1:  CLRF   6E
09A2:  CLRF   6D
09A3:  MOVLW  51
09A4:  MOVWF  6C
09A5:  MOVLP  00
09A6:  MOVLB  00
09A7:  CALL   0C1
09A8:  MOVLP  08
09A9:  MOVF   7A,W
09AA:  MOVLB  03
09AB:  MOVWF  6B
09AC:  MOVF   79,W
09AD:  MOVWF  6A
09AE:  MOVF   78,W
09AF:  MOVWF  69
09B0:  MOVF   77,W
09B1:  MOVWF  68
09B2:  MOVLW  01
09B3:  ADDWF  68,W
09B4:  MOVWF  4F
09B5:  MOVLW  00
09B6:  ADDWFC 69,W
09B7:  MOVWF  50
09B8:  MOVLW  00
09B9:  ADDWFC 6A,W
09BA:  MOVWF  51
09BB:  MOVLW  00
09BC:  ADDWFC 6B,W
09BD:  MOVWF  52
....................     } 
09BE:  GOTO   1D3
....................  
....................     else if (data_size == 0) { 
09BF:  MOVF   45,F
09C0:  BTFSS  03.2
09C1:  GOTO   1D3
09C2:  MOVF   46,F
09C3:  BTFSS  03.2
09C4:  GOTO   1D3
09C5:  MOVF   47,F
09C6:  BTFSS  03.2
09C7:  GOTO   1D3
09C8:  MOVF   48,F
09C9:  BTFSS  03.2
09CA:  GOTO   1D3
....................         num_of_pckt = packets; 
09CB:  MOVF   4C,W
09CC:  MOVWF  52
09CD:  MOVF   4B,W
09CE:  MOVWF  51
09CF:  MOVF   4A,W
09D0:  MOVWF  50
09D1:  MOVF   49,W
09D2:  MOVWF  4F
....................     } 
....................  
....................     for (unsigned int32 pckt_seq_num = 1; pckt_seq_num <= num_of_pckt; pckt_seq_num++) { 
09D3:  CLRF   56
09D4:  CLRF   55
09D5:  CLRF   54
09D6:  MOVLW  01
09D7:  MOVWF  53
09D8:  MOVF   56,W
09D9:  SUBWF  52,W
09DA:  BTFSS  03.0
09DB:  GOTO   397
09DC:  BTFSS  03.2
09DD:  GOTO   1EE
09DE:  MOVF   55,W
09DF:  SUBWF  51,W
09E0:  BTFSS  03.0
09E1:  GOTO   397
09E2:  BTFSS  03.2
09E3:  GOTO   1EE
09E4:  MOVF   54,W
09E5:  SUBWF  50,W
09E6:  BTFSS  03.0
09E7:  GOTO   397
09E8:  BTFSS  03.2
09E9:  GOTO   1EE
09EA:  MOVF   53,W
09EB:  SUBWF  4F,W
09EC:  BTFSS  03.0
09ED:  GOTO   397
....................         //=================Ground stationCall sign part============================= 
....................         //========================= 0 --- 5 ======================================== 
....................         data_pckt[0] = 0x4a;  // J 
09EE:  MOVLW  4A
09EF:  MOVLB  01
09F0:  MOVWF  3B
....................         data_pckt[1] = 0x47;  // G 
09F1:  MOVLW  47
09F2:  MOVWF  3C
....................         data_pckt[2] = 0x36;  // 6 
09F3:  MOVLW  36
09F4:  MOVWF  3D
....................         data_pckt[3] = 0x59;  // Y 
09F5:  MOVLW  59
09F6:  MOVWF  3E
....................         data_pckt[4] = 0x42;  // B 
09F7:  MOVLW  42
09F8:  MOVWF  3F
....................         data_pckt[5] = 0x57;  // W 
09F9:  MOVLW  57
09FA:  MOVWF  40
....................                               //=========================Dest SSID======================================== 
....................                               //=========================   6     ======================================== 
....................         data_pckt[6] = 0x30;  //char 0 
09FB:  MOVLW  30
09FC:  MOVWF  41
....................                               //===================Satellite Call Sign==================================== 
....................                               //========================= 7 --- 12  ====================================== 
....................         data_pckt[7] = 'L'; 
09FD:  MOVLW  4C
09FE:  MOVWF  42
....................         data_pckt[8] = 'E'; 
09FF:  MOVLW  45
0A00:  MOVWF  43
....................         data_pckt[9] = 'O'; 
0A01:  MOVLW  4F
0A02:  MOVWF  44
....................         data_pckt[10] = 'P'; 
0A03:  MOVLW  50
0A04:  MOVWF  45
....................         data_pckt[11] = 'A'; 
0A05:  MOVLW  41
0A06:  MOVWF  46
....................         data_pckt[12] = 'R'; 
0A07:  MOVLW  52
0A08:  MOVWF  47
....................                               //========================Source SSID======================================= 
....................                               //=========================   13   ========================================= 
....................         data_pckt[13] = 0x30; //char 0 
0A09:  MOVLW  30
0A0A:  MOVWF  48
....................                               //==========================Control========================================= 
....................                               //=========================   14   ========================================= 
....................         data_pckt[14] = 0x3E; // 
0A0B:  MOVLW  3E
0A0C:  MOVWF  49
....................                               //============================PID=========================================== 
....................                               //=========================   15   ========================================= 
....................         data_pckt[15] = 0xF0; // 
0A0D:  MOVLW  F0
0A0E:  MOVWF  4A
....................                               //=====================Packet_specified_data================================ 
....................                               //========================= 16 ---- 17 ===================================== 
....................         data_pckt[16] = 0xFF; 
0A0F:  MOVLW  FF
0A10:  MOVWF  4B
....................         data_pckt[17] = 0xF0; 
0A11:  MOVLW  F0
0A12:  MOVWF  4C
....................         data_pckt[18] = 0xFf; 
0A13:  MOVLW  FF
0A14:  MOVWF  4D
....................         data_pckt[19] = pckt_seq_num >> 16; 
0A15:  MOVLB  03
0A16:  MOVF   55,W
0A17:  MOVLB  01
0A18:  MOVWF  4E
....................         data_pckt[20] = pckt_seq_num >> 8; 
0A19:  MOVLB  03
0A1A:  MOVF   54,W
0A1B:  MOVLB  01
0A1C:  MOVWF  4F
....................         data_pckt[21] = pckt_seq_num; 
0A1D:  MOVLB  03
0A1E:  MOVF   53,W
0A1F:  MOVLB  01
0A20:  MOVWF  50
....................         //===========================Pay_Load======================================= 
....................         //========================= 22 ---- 102 ==================================== 
....................         if (x == 1) { 
0A21:  MOVLB  03
0A22:  DECFSZ 4D,W
0A23:  GOTO   2B1
....................             for (int32 ele_num = 22; ele_num <= 102; ele_num++) { 
0A24:  CLRF   5A
0A25:  CLRF   59
0A26:  CLRF   58
0A27:  MOVLW  16
0A28:  MOVWF  57
0A29:  MOVF   5A,F
0A2A:  BTFSS  03.2
0A2B:  GOTO   2B1
0A2C:  MOVF   59,F
0A2D:  BTFSS  03.2
0A2E:  GOTO   2B1
0A2F:  MOVF   58,F
0A30:  BTFSS  03.2
0A31:  GOTO   2B1
0A32:  MOVF   57,W
0A33:  SUBLW  66
0A34:  BTFSS  03.0
0A35:  GOTO   2B1
....................                 data_pckt[ele_num] = cf_byte_read(start_address + 81 * (pckt_seq_num - 1) + ele_num - 22); 
0A36:  MOVLW  6B
0A37:  ADDWF  57,W
0A38:  MOVWF  78
0A39:  MOVLW  20
0A3A:  ADDWFC 58,W
0A3B:  MOVWF  7A
0A3C:  MOVF   78,W
0A3D:  MOVWF  68
0A3E:  MOVF   7A,W
0A3F:  MOVWF  69
0A40:  MOVLW  01
0A41:  SUBWF  53,W
0A42:  MOVWF  77
0A43:  MOVLW  00
0A44:  SUBWFC 54,W
0A45:  MOVWF  78
0A46:  MOVLW  00
0A47:  SUBWFC 55,W
0A48:  MOVWF  79
0A49:  MOVLW  00
0A4A:  SUBWFC 56,W
0A4B:  MOVWF  7A
0A4C:  MOVWF  6D
0A4D:  MOVF   79,W
0A4E:  MOVWF  6C
0A4F:  MOVF   78,W
0A50:  MOVWF  6B
0A51:  MOVF   77,W
0A52:  MOVWF  6A
0A53:  MOVF   05,W
0A54:  MOVWF  6F
0A55:  MOVF   04,W
0A56:  MOVWF  6E
0A57:  MOVLB  04
0A58:  CLRF   23
0A59:  CLRF   22
0A5A:  CLRF   21
0A5B:  MOVLW  51
0A5C:  MOVWF  20
0A5D:  MOVLB  03
0A5E:  MOVF   6D,W
0A5F:  MOVLB  04
0A60:  MOVWF  27
0A61:  MOVLB  03
0A62:  MOVF   6C,W
0A63:  MOVLB  04
0A64:  MOVWF  26
0A65:  MOVLB  03
0A66:  MOVF   6B,W
0A67:  MOVLB  04
0A68:  MOVWF  25
0A69:  MOVLB  03
0A6A:  MOVF   6A,W
0A6B:  MOVLB  04
0A6C:  MOVWF  24
0A6D:  MOVLP  00
0A6E:  MOVLB  00
0A6F:  CALL   7CB
0A70:  MOVLP  08
0A71:  MOVLB  03
0A72:  MOVF   6F,W
0A73:  MOVWF  05
0A74:  MOVF   6E,W
0A75:  MOVWF  04
0A76:  MOVF   77,W
0A77:  ADDWF  41,W
0A78:  MOVWF  6A
0A79:  MOVF   78,W
0A7A:  ADDWFC 42,W
0A7B:  MOVWF  6B
0A7C:  MOVF   79,W
0A7D:  ADDWFC 43,W
0A7E:  MOVWF  6C
0A7F:  MOVF   7A,W
0A80:  ADDWFC 44,W
0A81:  MOVWF  6D
0A82:  MOVF   57,W
0A83:  ADDWF  6A,F
0A84:  MOVF   58,W
0A85:  ADDWFC 6B,F
0A86:  MOVF   59,W
0A87:  ADDWFC 6C,F
0A88:  MOVF   5A,W
0A89:  ADDWFC 6D,F
0A8A:  MOVLW  16
0A8B:  SUBWF  6A,F
0A8C:  MOVLW  00
0A8D:  SUBWFC 6B,F
0A8E:  SUBWFC 6C,F
0A8F:  SUBWFC 6D,F
0A90:  MOVF   6D,W
0A91:  MOVLB  04
0A92:  MOVWF  23
0A93:  MOVLB  03
0A94:  MOVF   6C,W
0A95:  MOVLB  04
0A96:  MOVWF  22
0A97:  MOVLB  03
0A98:  MOVF   6B,W
0A99:  MOVLB  04
0A9A:  MOVWF  21
0A9B:  MOVLB  03
0A9C:  MOVF   6A,W
0A9D:  MOVLB  04
0A9E:  MOVWF  20
0A9F:  MOVLB  00
0AA0:  CALL   0B2
0AA1:  MOVLB  03
0AA2:  MOVF   69,W
0AA3:  MOVWF  05
0AA4:  MOVF   68,W
0AA5:  MOVWF  04
0AA6:  MOVF   78,W
0AA7:  MOVWF  00
0AA8:  MOVLW  01
0AA9:  ADDWF  57,F
0AAA:  BTFSC  03.0
0AAB:  INCF   58,F
0AAC:  BTFSC  03.2
0AAD:  INCF   59,F
0AAE:  BTFSC  03.2
0AAF:  INCF   5A,F
0AB0:  GOTO   229
....................             } 
....................         } 
....................  
....................         if (x == 0) { 
0AB1:  MOVF   4D,F
0AB2:  BTFSS  03.2
0AB3:  GOTO   341
....................             for (int32 ele_num = 22; ele_num <= 102; ele_num++) { 
0AB4:  CLRF   5E
0AB5:  CLRF   5D
0AB6:  CLRF   5C
0AB7:  MOVLW  16
0AB8:  MOVWF  5B
0AB9:  MOVF   5E,F
0ABA:  BTFSS  03.2
0ABB:  GOTO   341
0ABC:  MOVF   5D,F
0ABD:  BTFSS  03.2
0ABE:  GOTO   341
0ABF:  MOVF   5C,F
0AC0:  BTFSS  03.2
0AC1:  GOTO   341
0AC2:  MOVF   5B,W
0AC3:  SUBLW  66
0AC4:  BTFSS  03.0
0AC5:  GOTO   341
....................                 data_pckt[ele_num] = sf_byte_read(start_address + 81 * (pckt_seq_num - 1) + ele_num - 22); 
0AC6:  MOVLW  6B
0AC7:  ADDWF  5B,W
0AC8:  MOVWF  78
0AC9:  MOVLW  20
0ACA:  ADDWFC 5C,W
0ACB:  MOVWF  7A
0ACC:  MOVF   78,W
0ACD:  MOVWF  68
0ACE:  MOVF   7A,W
0ACF:  MOVWF  69
0AD0:  MOVLW  01
0AD1:  SUBWF  53,W
0AD2:  MOVWF  77
0AD3:  MOVLW  00
0AD4:  SUBWFC 54,W
0AD5:  MOVWF  78
0AD6:  MOVLW  00
0AD7:  SUBWFC 55,W
0AD8:  MOVWF  79
0AD9:  MOVLW  00
0ADA:  SUBWFC 56,W
0ADB:  MOVWF  7A
0ADC:  MOVWF  6D
0ADD:  MOVF   79,W
0ADE:  MOVWF  6C
0ADF:  MOVF   78,W
0AE0:  MOVWF  6B
0AE1:  MOVF   77,W
0AE2:  MOVWF  6A
0AE3:  MOVF   05,W
0AE4:  MOVWF  6F
0AE5:  MOVF   04,W
0AE6:  MOVWF  6E
0AE7:  MOVLB  04
0AE8:  CLRF   23
0AE9:  CLRF   22
0AEA:  CLRF   21
0AEB:  MOVLW  51
0AEC:  MOVWF  20
0AED:  MOVLB  03
0AEE:  MOVF   6D,W
0AEF:  MOVLB  04
0AF0:  MOVWF  27
0AF1:  MOVLB  03
0AF2:  MOVF   6C,W
0AF3:  MOVLB  04
0AF4:  MOVWF  26
0AF5:  MOVLB  03
0AF6:  MOVF   6B,W
0AF7:  MOVLB  04
0AF8:  MOVWF  25
0AF9:  MOVLB  03
0AFA:  MOVF   6A,W
0AFB:  MOVLB  04
0AFC:  MOVWF  24
0AFD:  MOVLP  00
0AFE:  MOVLB  00
0AFF:  CALL   7CB
0B00:  MOVLP  08
0B01:  MOVLB  03
0B02:  MOVF   6F,W
0B03:  MOVWF  05
0B04:  MOVF   6E,W
0B05:  MOVWF  04
0B06:  MOVF   77,W
0B07:  ADDWF  41,W
0B08:  MOVWF  6A
0B09:  MOVF   78,W
0B0A:  ADDWFC 42,W
0B0B:  MOVWF  6B
0B0C:  MOVF   79,W
0B0D:  ADDWFC 43,W
0B0E:  MOVWF  6C
0B0F:  MOVF   7A,W
0B10:  ADDWFC 44,W
0B11:  MOVWF  6D
0B12:  MOVF   5B,W
0B13:  ADDWF  6A,F
0B14:  MOVF   5C,W
0B15:  ADDWFC 6B,F
0B16:  MOVF   5D,W
0B17:  ADDWFC 6C,F
0B18:  MOVF   5E,W
0B19:  ADDWFC 6D,F
0B1A:  MOVLW  16
0B1B:  SUBWF  6A,F
0B1C:  MOVLW  00
0B1D:  SUBWFC 6B,F
0B1E:  SUBWFC 6C,F
0B1F:  SUBWFC 6D,F
0B20:  MOVF   6D,W
0B21:  MOVLB  04
0B22:  MOVWF  23
0B23:  MOVLB  03
0B24:  MOVF   6C,W
0B25:  MOVLB  04
0B26:  MOVWF  22
0B27:  MOVLB  03
0B28:  MOVF   6B,W
0B29:  MOVLB  04
0B2A:  MOVWF  21
0B2B:  MOVLB  03
0B2C:  MOVF   6A,W
0B2D:  MOVLB  04
0B2E:  MOVWF  20
0B2F:  MOVLB  00
0B30:  CALL   134
0B31:  MOVLB  03
0B32:  MOVF   69,W
0B33:  MOVWF  05
0B34:  MOVF   68,W
0B35:  MOVWF  04
0B36:  MOVF   78,W
0B37:  MOVWF  00
0B38:  MOVLW  01
0B39:  ADDWF  5B,F
0B3A:  BTFSC  03.0
0B3B:  INCF   5C,F
0B3C:  BTFSC  03.2
0B3D:  INCF   5D,F
0B3E:  BTFSC  03.2
0B3F:  INCF   5E,F
0B40:  GOTO   2B9
....................             } 
....................         } 
....................  
....................         //===========================CRC Value====================================== 
....................         //======================== 103 ---- 104 ==================================== 
....................         int16 outdata = mk_crc(data_pckt, 103); 
0B41:  MOVLW  20
0B42:  MOVWF  69
0B43:  MOVLW  6B
0B44:  MOVWF  68
0B45:  MOVLW  67
0B46:  MOVWF  6A
0B47:  MOVLP  00
0B48:  MOVLB  00
0B49:  CALL   594
0B4A:  MOVLP  08
0B4B:  MOVF   79,W
0B4C:  MOVLB  03
0B4D:  MOVWF  60
0B4E:  MOVF   78,W
0B4F:  MOVWF  5F
....................  
....................         data_pckt[103] = outdata; 
0B50:  MOVF   5F,W
0B51:  MOVLB  02
0B52:  MOVWF  52
....................         data_pckt[104] = outdata >> 8; 
0B53:  MOVLB  03
0B54:  MOVF   60,W
0B55:  MOVLB  02
0B56:  MOVWF  53
....................  
....................         //__________________________________________________________________________ 
....................  
....................         for (int8 ia = 0; ia <= 104; ia++) { 
0B57:  MOVLB  03
0B58:  CLRF   61
0B59:  MOVF   61,W
0B5A:  SUBLW  68
0B5B:  BTFSS  03.0
0B5C:  GOTO   36E
....................             fputc(data_pckt[ia], tr_cp); 
0B5D:  MOVLW  6B
0B5E:  ADDWF  61,W
0B5F:  MOVWF  04
0B60:  MOVLW  20
0B61:  MOVWF  05
0B62:  BTFSC  03.0
0B63:  INCF   05,F
0B64:  MOVF   00,W
0B65:  MOVWF  68
0B66:  MOVF   68,W
0B67:  MOVLP  00
0B68:  MOVLB  00
0B69:  CALL   6DB
0B6A:  MOVLP  08
0B6B:  MOVLB  03
0B6C:  INCF   61,F
0B6D:  GOTO   359
....................         } 
....................  
....................         if (pckt_seq_num % 2 == 0) 
0B6E:  MOVF   53,W
0B6F:  ANDLW  01
0B70:  MOVWF  68
0B71:  CLRF   69
0B72:  CLRF   6A
0B73:  CLRF   6B
0B74:  MOVF   68,F
0B75:  BTFSS  03.2
0B76:  GOTO   387
0B77:  MOVF   69,F
0B78:  BTFSS  03.2
0B79:  GOTO   387
0B7A:  MOVF   6A,F
0B7B:  BTFSS  03.2
0B7C:  GOTO   387
0B7D:  MOVF   6B,F
0B7E:  BTFSS  03.2
0B7F:  GOTO   387
....................             pckt_seq_num += 2 * skip; 
0B80:  BCF    03.0
0B81:  RLF    4E,W
0B82:  ADDWF  53,F
0B83:  MOVLW  00
0B84:  ADDWFC 54,F
0B85:  ADDWFC 55,F
0B86:  ADDWFC 56,F
....................  
....................         delay_ms(220); 
0B87:  MOVLW  DC
0B88:  MOVWF  68
0B89:  MOVLP  00
0B8A:  MOVLB  00
0B8B:  CALL   079
0B8C:  MOVLP  08
0B8D:  MOVLW  01
0B8E:  MOVLB  03
0B8F:  ADDWF  53,F
0B90:  BTFSC  03.0
0B91:  INCF   54,F
0B92:  BTFSC  03.2
0B93:  INCF   55,F
0B94:  BTFSC  03.2
0B95:  INCF   56,F
0B96:  GOTO   1D8
....................     } 
0B97:  MOVLB  00
0B98:  RETURN
.................... } 
....................  
.................... //___________________________________________________________________________<< 
....................  
.................... void pckt_set_send(unsigned int32 initial_address, unsigned int8 packet_set_size, unsigned int8 packet_set_num, int1 fm_select) 
*
135B:  MOVLW  01
135C:  MOVLB  03
135D:  SUBWF  43,W
135E:  MOVWF  60
135F:  MOVF   42,W
1360:  MOVWF  61
1361:  MOVF   60,W
1362:  MOVWF  62
*
1387:  CLRF   48
1388:  CLRF   47
1389:  CLRF   46
138A:  MOVF   78,W
138B:  MOVWF  45
138C:  MOVLB  04
138D:  CLRF   23
138E:  CLRF   22
138F:  CLRF   21
1390:  MOVLW  51
1391:  MOVWF  20
1392:  MOVLB  03
1393:  MOVF   48,W
1394:  MOVLB  04
1395:  MOVWF  27
1396:  MOVLB  03
1397:  MOVF   47,W
1398:  MOVLB  04
1399:  MOVWF  26
139A:  MOVLB  03
139B:  MOVF   46,W
139C:  MOVLB  04
139D:  MOVWF  25
139E:  MOVLB  03
139F:  MOVF   45,W
13A0:  MOVLB  04
13A1:  MOVWF  24
13A2:  MOVLP  00
13A3:  MOVLB  00
13A4:  CALL   7CB
13A5:  MOVLP  10
13A6:  MOVF   77,W
13A7:  MOVLB  03
13A8:  ADDWF  3E,W
13A9:  MOVWF  49
13AA:  MOVF   78,W
13AB:  ADDWFC 3F,W
13AC:  MOVWF  4A
13AD:  MOVF   79,W
13AE:  ADDWFC 40,W
13AF:  MOVWF  4B
13B0:  MOVF   7A,W
13B1:  ADDWFC 41,W
13B2:  MOVWF  4C
.................... { 
....................     unsigned int32 next_size = packet_set_size * (packet_set_num - 1); 
....................  
....................     unsigned int32 start_address = initial_address + 81 * next_size; 
....................  
....................     for (unsigned int32 pckt_seq_num = 1; pckt_seq_num <= packet_set_size; pckt_seq_num++) { 
13B3:  CLRF   50
13B4:  CLRF   4F
13B5:  CLRF   4E
13B6:  MOVLW  01
13B7:  MOVWF  4D
13B8:  MOVF   50,F
13B9:  BTFSS  03.2
13BA:  GOTO   55A
13BB:  MOVF   4F,F
13BC:  BTFSS  03.2
13BD:  GOTO   55A
13BE:  MOVF   4E,F
13BF:  BTFSS  03.2
13C0:  GOTO   55A
13C1:  MOVF   4D,W
13C2:  SUBWF  42,W
13C3:  BTFSS  03.0
13C4:  GOTO   55A
....................         //=================Ground stationCall sign part============================= 
....................         //========================= 0 --- 5 ======================================== 
....................         data_pckt[0] = 0x4a;  // J 
13C5:  MOVLW  4A
13C6:  MOVLB  01
13C7:  MOVWF  3B
....................         data_pckt[1] = 0x47;  // G 
13C8:  MOVLW  47
13C9:  MOVWF  3C
....................         data_pckt[2] = 0x36;  // 6 
13CA:  MOVLW  36
13CB:  MOVWF  3D
....................         data_pckt[3] = 0x59;  // Y 
13CC:  MOVLW  59
13CD:  MOVWF  3E
....................         data_pckt[4] = 0x42;  // B 
13CE:  MOVLW  42
13CF:  MOVWF  3F
....................         data_pckt[5] = 0x57;  // W 
13D0:  MOVLW  57
13D1:  MOVWF  40
....................                               //=========================Dest SSID======================================== 
....................                               //=========================   6     ======================================== 
....................         data_pckt[6] = 0x30;  //char 0 
13D2:  MOVLW  30
13D3:  MOVWF  41
....................                               //===================Satellite Call Sign==================================== 
....................                               //========================= 7 --- 12  ====================================== 
....................         data_pckt[7] = 'L'; 
13D4:  MOVLW  4C
13D5:  MOVWF  42
....................         data_pckt[8] = 'E'; 
13D6:  MOVLW  45
13D7:  MOVWF  43
....................         data_pckt[9] = 'O'; 
13D8:  MOVLW  4F
13D9:  MOVWF  44
....................         data_pckt[10] = 'P'; 
13DA:  MOVLW  50
13DB:  MOVWF  45
....................         data_pckt[11] = 'A'; 
13DC:  MOVLW  41
13DD:  MOVWF  46
....................         data_pckt[12] = 'R'; 
13DE:  MOVLW  52
13DF:  MOVWF  47
....................                               //========================Source SSID======================================= 
....................                               //=========================   13   ========================================= 
....................         data_pckt[13] = 0x30; //char 0 
13E0:  MOVLW  30
13E1:  MOVWF  48
....................                               //==========================Control========================================= 
....................                               //=========================   14   ========================================= 
....................         data_pckt[14] = 0x3E; // 
13E2:  MOVLW  3E
13E3:  MOVWF  49
....................                               //============================PID=========================================== 
....................                               //=========================   15   ========================================= 
....................         data_pckt[15] = 0xF0; // 
13E4:  MOVLW  F0
13E5:  MOVWF  4A
....................                               //=====================Packet_specified_data================================ 
....................                               //========================= 16 ---- 17 ===================================== 
....................         data_pckt[16] = 0xFF; 
13E6:  MOVLW  FF
13E7:  MOVWF  4B
....................         data_pckt[17] = 0xF0; 
13E8:  MOVLW  F0
13E9:  MOVWF  4C
....................         data_pckt[18] = 0xFF; 
13EA:  MOVLW  FF
13EB:  MOVWF  4D
....................         data_pckt[19] = pckt_seq_num >> 16; 
13EC:  MOVLB  03
13ED:  MOVF   4F,W
13EE:  MOVLB  01
13EF:  MOVWF  4E
....................         data_pckt[20] = pckt_seq_num >> 8; 
13F0:  MOVLB  03
13F1:  MOVF   4E,W
13F2:  MOVLB  01
13F3:  MOVWF  4F
....................         data_pckt[21] = pckt_seq_num; 
13F4:  MOVLB  03
13F5:  MOVF   4D,W
13F6:  MOVLB  01
13F7:  MOVWF  50
....................         //===========================Pay_Load======================================= 
....................         //========================= 22 ---- 102 ==================================== 
....................         if (fm_select == 1) //com flash 
13F8:  MOVLB  03
13F9:  DECFSZ 44,W
13FA:  GOTO   48B
....................         { 
....................             for (int32 ele_num = 22; ele_num <= 102; ele_num++) { 
13FB:  CLRF   54
13FC:  CLRF   53
13FD:  CLRF   52
13FE:  MOVLW  16
13FF:  MOVWF  51
1400:  MOVF   54,F
1401:  BTFSS  03.2
1402:  GOTO   48A
1403:  MOVF   53,F
1404:  BTFSS  03.2
1405:  GOTO   48A
1406:  MOVF   52,F
1407:  BTFSS  03.2
1408:  GOTO   48A
1409:  MOVF   51,W
140A:  SUBLW  66
140B:  BTFSS  03.0
140C:  GOTO   48A
....................                 data_pckt[ele_num] = cf_byte_read(start_address + 81 * (pckt_seq_num - 1) + ele_num - 22); 
140D:  MOVLW  6B
140E:  ADDWF  51,W
140F:  MOVWF  78
1410:  MOVLW  20
1411:  ADDWFC 52,W
1412:  MOVWF  7A
1413:  MOVF   78,W
1414:  MOVWF  60
1415:  MOVF   7A,W
1416:  MOVWF  61
1417:  MOVLW  01
1418:  SUBWF  4D,W
1419:  MOVWF  77
141A:  MOVLW  00
141B:  SUBWFC 4E,W
141C:  MOVWF  78
141D:  MOVLW  00
141E:  SUBWFC 4F,W
141F:  MOVWF  79
1420:  MOVLW  00
1421:  SUBWFC 50,W
1422:  MOVWF  7A
1423:  MOVWF  65
1424:  MOVF   79,W
1425:  MOVWF  64
1426:  MOVF   78,W
1427:  MOVWF  63
1428:  MOVF   77,W
1429:  MOVWF  62
142A:  MOVF   05,W
142B:  MOVWF  67
142C:  MOVF   04,W
142D:  MOVWF  66
142E:  MOVLB  04
142F:  CLRF   23
1430:  CLRF   22
1431:  CLRF   21
1432:  MOVLW  51
1433:  MOVWF  20
1434:  MOVLB  03
1435:  MOVF   65,W
1436:  MOVLB  04
1437:  MOVWF  27
1438:  MOVLB  03
1439:  MOVF   64,W
143A:  MOVLB  04
143B:  MOVWF  26
143C:  MOVLB  03
143D:  MOVF   63,W
143E:  MOVLB  04
143F:  MOVWF  25
1440:  MOVLB  03
1441:  MOVF   62,W
1442:  MOVLB  04
1443:  MOVWF  24
1444:  MOVLP  00
1445:  MOVLB  00
1446:  CALL   7CB
1447:  MOVLP  10
1448:  MOVLB  03
1449:  MOVF   67,W
144A:  MOVWF  05
144B:  MOVF   66,W
144C:  MOVWF  04
144D:  MOVF   77,W
144E:  ADDWF  49,W
144F:  MOVWF  62
1450:  MOVF   78,W
1451:  ADDWFC 4A,W
1452:  MOVWF  63
1453:  MOVF   79,W
1454:  ADDWFC 4B,W
1455:  MOVWF  64
1456:  MOVF   7A,W
1457:  ADDWFC 4C,W
1458:  MOVWF  65
1459:  MOVF   51,W
145A:  ADDWF  62,F
145B:  MOVF   52,W
145C:  ADDWFC 63,F
145D:  MOVF   53,W
145E:  ADDWFC 64,F
145F:  MOVF   54,W
1460:  ADDWFC 65,F
1461:  MOVLW  16
1462:  SUBWF  62,F
1463:  MOVLW  00
1464:  SUBWFC 63,F
1465:  SUBWFC 64,F
1466:  SUBWFC 65,F
1467:  MOVF   65,W
1468:  MOVLB  04
1469:  MOVWF  23
146A:  MOVLB  03
146B:  MOVF   64,W
146C:  MOVLB  04
146D:  MOVWF  22
146E:  MOVLB  03
146F:  MOVF   63,W
1470:  MOVLB  04
1471:  MOVWF  21
1472:  MOVLB  03
1473:  MOVF   62,W
1474:  MOVLB  04
1475:  MOVWF  20
1476:  MOVLP  08
1477:  MOVLB  00
1478:  CALL   0B2
1479:  MOVLP  10
147A:  MOVLB  03
147B:  MOVF   61,W
147C:  MOVWF  05
147D:  MOVF   60,W
147E:  MOVWF  04
147F:  MOVF   78,W
1480:  MOVWF  00
1481:  MOVLW  01
1482:  ADDWF  51,F
1483:  BTFSC  03.0
1484:  INCF   52,F
1485:  BTFSC  03.2
1486:  INCF   53,F
1487:  BTFSC  03.2
1488:  INCF   54,F
1489:  GOTO   400
....................             } 
....................         } 
148A:  GOTO   51D
....................  
....................         else if (fm_select == 0) //shared flash 
148B:  MOVF   44,F
148C:  BTFSS  03.2
148D:  GOTO   51D
....................         { 
....................             for (int32 ele_num = 22; ele_num <= 102; ele_num++) { 
148E:  CLRF   58
148F:  CLRF   57
1490:  CLRF   56
1491:  MOVLW  16
1492:  MOVWF  55
1493:  MOVF   58,F
1494:  BTFSS  03.2
1495:  GOTO   51D
1496:  MOVF   57,F
1497:  BTFSS  03.2
1498:  GOTO   51D
1499:  MOVF   56,F
149A:  BTFSS  03.2
149B:  GOTO   51D
149C:  MOVF   55,W
149D:  SUBLW  66
149E:  BTFSS  03.0
149F:  GOTO   51D
....................                 data_pckt[ele_num] = sf_byte_read(start_address + 81 * (pckt_seq_num - 1) + ele_num - 22); 
14A0:  MOVLW  6B
14A1:  ADDWF  55,W
14A2:  MOVWF  78
14A3:  MOVLW  20
14A4:  ADDWFC 56,W
14A5:  MOVWF  7A
14A6:  MOVF   78,W
14A7:  MOVWF  60
14A8:  MOVF   7A,W
14A9:  MOVWF  61
14AA:  MOVLW  01
14AB:  SUBWF  4D,W
14AC:  MOVWF  77
14AD:  MOVLW  00
14AE:  SUBWFC 4E,W
14AF:  MOVWF  78
14B0:  MOVLW  00
14B1:  SUBWFC 4F,W
14B2:  MOVWF  79
14B3:  MOVLW  00
14B4:  SUBWFC 50,W
14B5:  MOVWF  7A
14B6:  MOVWF  65
14B7:  MOVF   79,W
14B8:  MOVWF  64
14B9:  MOVF   78,W
14BA:  MOVWF  63
14BB:  MOVF   77,W
14BC:  MOVWF  62
14BD:  MOVF   05,W
14BE:  MOVWF  67
14BF:  MOVF   04,W
14C0:  MOVWF  66
14C1:  MOVLB  04
14C2:  CLRF   23
14C3:  CLRF   22
14C4:  CLRF   21
14C5:  MOVLW  51
14C6:  MOVWF  20
14C7:  MOVLB  03
14C8:  MOVF   65,W
14C9:  MOVLB  04
14CA:  MOVWF  27
14CB:  MOVLB  03
14CC:  MOVF   64,W
14CD:  MOVLB  04
14CE:  MOVWF  26
14CF:  MOVLB  03
14D0:  MOVF   63,W
14D1:  MOVLB  04
14D2:  MOVWF  25
14D3:  MOVLB  03
14D4:  MOVF   62,W
14D5:  MOVLB  04
14D6:  MOVWF  24
14D7:  MOVLP  00
14D8:  MOVLB  00
14D9:  CALL   7CB
14DA:  MOVLP  10
14DB:  MOVLB  03
14DC:  MOVF   67,W
14DD:  MOVWF  05
14DE:  MOVF   66,W
14DF:  MOVWF  04
14E0:  MOVF   77,W
14E1:  ADDWF  49,W
14E2:  MOVWF  62
14E3:  MOVF   78,W
14E4:  ADDWFC 4A,W
14E5:  MOVWF  63
14E6:  MOVF   79,W
14E7:  ADDWFC 4B,W
14E8:  MOVWF  64
14E9:  MOVF   7A,W
14EA:  ADDWFC 4C,W
14EB:  MOVWF  65
14EC:  MOVF   55,W
14ED:  ADDWF  62,F
14EE:  MOVF   56,W
14EF:  ADDWFC 63,F
14F0:  MOVF   57,W
14F1:  ADDWFC 64,F
14F2:  MOVF   58,W
14F3:  ADDWFC 65,F
14F4:  MOVLW  16
14F5:  SUBWF  62,F
14F6:  MOVLW  00
14F7:  SUBWFC 63,F
14F8:  SUBWFC 64,F
14F9:  SUBWFC 65,F
14FA:  MOVF   65,W
14FB:  MOVLB  04
14FC:  MOVWF  23
14FD:  MOVLB  03
14FE:  MOVF   64,W
14FF:  MOVLB  04
1500:  MOVWF  22
1501:  MOVLB  03
1502:  MOVF   63,W
1503:  MOVLB  04
1504:  MOVWF  21
1505:  MOVLB  03
1506:  MOVF   62,W
1507:  MOVLB  04
1508:  MOVWF  20
1509:  MOVLP  08
150A:  MOVLB  00
150B:  CALL   134
150C:  MOVLP  10
150D:  MOVLB  03
150E:  MOVF   61,W
150F:  MOVWF  05
1510:  MOVF   60,W
1511:  MOVWF  04
1512:  MOVF   78,W
1513:  MOVWF  00
1514:  MOVLW  01
1515:  ADDWF  55,F
1516:  BTFSC  03.0
1517:  INCF   56,F
1518:  BTFSC  03.2
1519:  INCF   57,F
151A:  BTFSC  03.2
151B:  INCF   58,F
151C:  GOTO   493
....................             } 
....................         } 
....................  
....................         //===========================CRC Value====================================== 
....................         //======================== 103 ---- 104 ==================================== 
....................         int16 outdata = mk_crc(data_pckt, 103); 
151D:  MOVLW  20
151E:  MOVWF  69
151F:  MOVLW  6B
1520:  MOVWF  68
1521:  MOVLW  67
1522:  MOVWF  6A
1523:  MOVLP  00
1524:  MOVLB  00
1525:  CALL   594
1526:  MOVLP  10
1527:  MOVF   79,W
1528:  MOVLB  03
1529:  MOVWF  5A
152A:  MOVF   78,W
152B:  MOVWF  59
....................  
....................         data_pckt[103] = outdata; 
152C:  MOVF   59,W
152D:  MOVLB  02
152E:  MOVWF  52
....................         data_pckt[104] = outdata >> 8; 
152F:  MOVLB  03
1530:  MOVF   5A,W
1531:  MOVLB  02
1532:  MOVWF  53
....................  
....................         //__________________________________________________________________________ 
....................  
....................         for (int8 ia = 0; ia <= 104; ia++) { 
1533:  MOVLB  03
1534:  CLRF   5B
1535:  MOVF   5B,W
1536:  SUBLW  68
1537:  BTFSS  03.0
1538:  GOTO   54A
....................             fputc(data_pckt[ia], tr_cp); 
1539:  MOVLW  6B
153A:  ADDWF  5B,W
153B:  MOVWF  04
153C:  MOVLW  20
153D:  MOVWF  05
153E:  BTFSC  03.0
153F:  INCF   05,F
1540:  MOVF   00,W
1541:  MOVWF  60
1542:  MOVF   60,W
1543:  MOVLP  00
1544:  MOVLB  00
1545:  CALL   6DB
1546:  MOVLP  10
1547:  MOVLB  03
1548:  INCF   5B,F
1549:  GOTO   535
....................         } 
....................         delay_ms(200); 
154A:  MOVLW  C8
154B:  MOVWF  68
154C:  MOVLP  00
154D:  MOVLB  00
154E:  CALL   079
154F:  MOVLP  10
1550:  MOVLW  01
1551:  MOVLB  03
1552:  ADDWF  4D,F
1553:  BTFSC  03.0
1554:  INCF   4E,F
1555:  BTFSC  03.2
1556:  INCF   4F,F
1557:  BTFSC  03.2
1558:  INCF   50,F
1559:  GOTO   3B8
....................     } 
155A:  MOVLB  00
155B:  RETURN
.................... } 
....................  
.................... //_____________________________________________________________________________________>> 
.................... //_________________Output a packet_______________________________________________________ 
....................  
.................... void send_a_packet(int1 x) 
*
0C9F:  MOVF   38,W
0CA0:  MOVLB  03
0CA1:  MOVWF  3D
0CA2:  MOVLB  00
0CA3:  MOVF   39,W
0CA4:  MOVLB  03
0CA5:  MOVWF  3C
0CA6:  MOVLB  00
0CA7:  MOVF   3A,W
0CA8:  MOVLB  03
0CA9:  MOVWF  3B
0CAA:  MOVLB  00
0CAB:  MOVF   3B,W
0CAC:  MOVLB  03
0CAD:  MOVWF  3A
0CAE:  MOVLB  00
0CAF:  MOVF   3C,W
0CB0:  MOVLB  03
0CB1:  MOVWF  41
0CB2:  MOVLB  00
0CB3:  MOVF   3D,W
0CB4:  MOVLB  03
0CB5:  MOVWF  40
0CB6:  MOVLB  00
0CB7:  MOVF   3E,W
0CB8:  MOVLB  03
0CB9:  MOVWF  3F
0CBA:  MOVLB  00
0CBB:  MOVF   3F,W
0CBC:  MOVLB  03
0CBD:  MOVWF  3E
.................... { 
....................     unsigned int32 start_address = make32(cmd_pckt[4], cmd_pckt[5], cmd_pckt[6], cmd_pckt[7]); 
....................     unsigned int32 pckt = make32(cmd_pckt[8], cmd_pckt[9], cmd_pckt[10], cmd_pckt[11]); 
....................  
....................     //=================Ground stationCall sign part============================= 
....................     //========================= 0 --- 5 ======================================== 
....................     data_pckt[0] = 0x4A;  // J 
0CBE:  MOVLW  4A
0CBF:  MOVLB  01
0CC0:  MOVWF  3B
....................     data_pckt[1] = 0x47;  // G 
0CC1:  MOVLW  47
0CC2:  MOVWF  3C
....................     data_pckt[2] = 0x36;  // 6 
0CC3:  MOVLW  36
0CC4:  MOVWF  3D
....................     data_pckt[3] = 0x59;  // Y 
0CC5:  MOVLW  59
0CC6:  MOVWF  3E
....................     data_pckt[4] = 0x42;  // B 
0CC7:  MOVLW  42
0CC8:  MOVWF  3F
....................     data_pckt[5] = 0x57;  // W 
0CC9:  MOVLW  57
0CCA:  MOVWF  40
....................                           //=========================Dest SSID======================================== 
....................                           //=========================   6     ======================================== 
....................     data_pckt[6] = 0x30;  //char 0 
0CCB:  MOVLW  30
0CCC:  MOVWF  41
....................                           //===================Satellite Call Sign==================================== 
....................                           //========================= 7 --- 12  ====================================== 
....................     data_pckt[7] = 'L'; 
0CCD:  MOVLW  4C
0CCE:  MOVWF  42
....................     data_pckt[8] = 'E'; 
0CCF:  MOVLW  45
0CD0:  MOVWF  43
....................     data_pckt[9] = 'O'; 
0CD1:  MOVLW  4F
0CD2:  MOVWF  44
....................     data_pckt[10] = 'P'; 
0CD3:  MOVLW  50
0CD4:  MOVWF  45
....................     data_pckt[11] = 'A'; 
0CD5:  MOVLW  41
0CD6:  MOVWF  46
....................     data_pckt[12] = 'R'; 
0CD7:  MOVLW  52
0CD8:  MOVWF  47
....................                           //========================Source SSID======================================= 
....................                           //=========================   13   ========================================= 
....................     data_pckt[13] = 0x30; //char 0 
0CD9:  MOVLW  30
0CDA:  MOVWF  48
....................                           //==========================Control========================================= 
....................                           //=========================   14   ========================================= 
....................     data_pckt[14] = 0x3E; // 
0CDB:  MOVLW  3E
0CDC:  MOVWF  49
....................                           //============================PID=========================================== 
....................                           //=========================   15   ========================================= 
....................     data_pckt[15] = 0xF0; // 
0CDD:  MOVLW  F0
0CDE:  MOVWF  4A
....................                           //=====================Packet_specified_data================================ 
....................                           //========================= 16 ---- 17 ===================================== 
....................     data_pckt[16] = 0xFF; 
0CDF:  MOVLW  FF
0CE0:  MOVWF  4B
....................     data_pckt[17] = 0xF0; 
0CE1:  MOVLW  F0
0CE2:  MOVWF  4C
....................     data_pckt[18] = 0xFf; 
0CE3:  MOVLW  FF
0CE4:  MOVWF  4D
....................     data_pckt[19] = pckt >> 16; 
0CE5:  MOVLB  03
0CE6:  MOVF   40,W
0CE7:  MOVLB  01
0CE8:  MOVWF  4E
....................     data_pckt[20] = pckt >> 8; 
0CE9:  MOVLB  03
0CEA:  MOVF   3F,W
0CEB:  MOVLB  01
0CEC:  MOVWF  4F
....................     data_pckt[21] = pckt; 
0CED:  MOVLB  03
0CEE:  MOVF   3E,W
0CEF:  MOVLB  01
0CF0:  MOVWF  50
....................     //===========================Pay_Load======================================= 
....................     //========================= 22 ---- 102 ==================================== 
....................     if (x == 1) { 
0CF1:  MOVLB  03
0CF2:  DECFSZ 39,W
0CF3:  GOTO   581
....................         for (int32 ele_num = 22; ele_num <= 102; ele_num++) { 
0CF4:  CLRF   45
0CF5:  CLRF   44
0CF6:  CLRF   43
0CF7:  MOVLW  16
0CF8:  MOVWF  42
0CF9:  MOVF   45,F
0CFA:  BTFSS  03.2
0CFB:  GOTO   581
0CFC:  MOVF   44,F
0CFD:  BTFSS  03.2
0CFE:  GOTO   581
0CFF:  MOVF   43,F
0D00:  BTFSS  03.2
0D01:  GOTO   581
0D02:  MOVF   42,W
0D03:  SUBLW  66
0D04:  BTFSS  03.0
0D05:  GOTO   581
....................             data_pckt[ele_num] = cf_byte_read(start_address + 81 * (pckt - 1) + ele_num - 22); 
0D06:  MOVLW  6B
0D07:  ADDWF  42,W
0D08:  MOVWF  78
0D09:  MOVLW  20
0D0A:  ADDWFC 43,W
0D0B:  MOVWF  7A
0D0C:  MOVF   78,W
0D0D:  MOVWF  50
0D0E:  MOVF   7A,W
0D0F:  MOVWF  51
0D10:  MOVLW  01
0D11:  SUBWF  3E,W
0D12:  MOVWF  77
0D13:  MOVLW  00
0D14:  SUBWFC 3F,W
0D15:  MOVWF  78
0D16:  MOVLW  00
0D17:  SUBWFC 40,W
0D18:  MOVWF  79
0D19:  MOVLW  00
0D1A:  SUBWFC 41,W
0D1B:  MOVWF  7A
0D1C:  MOVWF  55
0D1D:  MOVF   79,W
0D1E:  MOVWF  54
0D1F:  MOVF   78,W
0D20:  MOVWF  53
0D21:  MOVF   77,W
0D22:  MOVWF  52
0D23:  MOVF   05,W
0D24:  MOVWF  57
0D25:  MOVF   04,W
0D26:  MOVWF  56
0D27:  MOVLB  04
0D28:  CLRF   23
0D29:  CLRF   22
0D2A:  CLRF   21
0D2B:  MOVLW  51
0D2C:  MOVWF  20
0D2D:  MOVLB  03
0D2E:  MOVF   55,W
0D2F:  MOVLB  04
0D30:  MOVWF  27
0D31:  MOVLB  03
0D32:  MOVF   54,W
0D33:  MOVLB  04
0D34:  MOVWF  26
0D35:  MOVLB  03
0D36:  MOVF   53,W
0D37:  MOVLB  04
0D38:  MOVWF  25
0D39:  MOVLB  03
0D3A:  MOVF   52,W
0D3B:  MOVLB  04
0D3C:  MOVWF  24
0D3D:  MOVLP  00
0D3E:  MOVLB  00
0D3F:  CALL   7CB
0D40:  MOVLP  08
0D41:  MOVLB  03
0D42:  MOVF   57,W
0D43:  MOVWF  05
0D44:  MOVF   56,W
0D45:  MOVWF  04
0D46:  MOVF   77,W
0D47:  ADDWF  3A,W
0D48:  MOVWF  52
0D49:  MOVF   78,W
0D4A:  ADDWFC 3B,W
0D4B:  MOVWF  53
0D4C:  MOVF   79,W
0D4D:  ADDWFC 3C,W
0D4E:  MOVWF  54
0D4F:  MOVF   7A,W
0D50:  ADDWFC 3D,W
0D51:  MOVWF  55
0D52:  MOVF   42,W
0D53:  ADDWF  52,F
0D54:  MOVF   43,W
0D55:  ADDWFC 53,F
0D56:  MOVF   44,W
0D57:  ADDWFC 54,F
0D58:  MOVF   45,W
0D59:  ADDWFC 55,F
0D5A:  MOVLW  16
0D5B:  SUBWF  52,F
0D5C:  MOVLW  00
0D5D:  SUBWFC 53,F
0D5E:  SUBWFC 54,F
0D5F:  SUBWFC 55,F
0D60:  MOVF   55,W
0D61:  MOVLB  04
0D62:  MOVWF  23
0D63:  MOVLB  03
0D64:  MOVF   54,W
0D65:  MOVLB  04
0D66:  MOVWF  22
0D67:  MOVLB  03
0D68:  MOVF   53,W
0D69:  MOVLB  04
0D6A:  MOVWF  21
0D6B:  MOVLB  03
0D6C:  MOVF   52,W
0D6D:  MOVLB  04
0D6E:  MOVWF  20
0D6F:  MOVLB  00
0D70:  CALL   0B2
0D71:  MOVLB  03
0D72:  MOVF   51,W
0D73:  MOVWF  05
0D74:  MOVF   50,W
0D75:  MOVWF  04
0D76:  MOVF   78,W
0D77:  MOVWF  00
0D78:  MOVLW  01
0D79:  ADDWF  42,F
0D7A:  BTFSC  03.0
0D7B:  INCF   43,F
0D7C:  BTFSC  03.2
0D7D:  INCF   44,F
0D7E:  BTFSC  03.2
0D7F:  INCF   45,F
0D80:  GOTO   4F9
....................         } 
....................     } 
....................  
....................     if (x == 0) { 
0D81:  MOVF   39,F
0D82:  BTFSS  03.2
0D83:  GOTO   611
....................         for (int32 ele_num = 22; ele_num <= 102; ele_num++) { 
0D84:  CLRF   49
0D85:  CLRF   48
0D86:  CLRF   47
0D87:  MOVLW  16
0D88:  MOVWF  46
0D89:  MOVF   49,F
0D8A:  BTFSS  03.2
0D8B:  GOTO   611
0D8C:  MOVF   48,F
0D8D:  BTFSS  03.2
0D8E:  GOTO   611
0D8F:  MOVF   47,F
0D90:  BTFSS  03.2
0D91:  GOTO   611
0D92:  MOVF   46,W
0D93:  SUBLW  66
0D94:  BTFSS  03.0
0D95:  GOTO   611
....................             data_pckt[ele_num] = sf_byte_read(start_address + 81 * (pckt - 1) + ele_num - 22); 
0D96:  MOVLW  6B
0D97:  ADDWF  46,W
0D98:  MOVWF  78
0D99:  MOVLW  20
0D9A:  ADDWFC 47,W
0D9B:  MOVWF  7A
0D9C:  MOVF   78,W
0D9D:  MOVWF  50
0D9E:  MOVF   7A,W
0D9F:  MOVWF  51
0DA0:  MOVLW  01
0DA1:  SUBWF  3E,W
0DA2:  MOVWF  77
0DA3:  MOVLW  00
0DA4:  SUBWFC 3F,W
0DA5:  MOVWF  78
0DA6:  MOVLW  00
0DA7:  SUBWFC 40,W
0DA8:  MOVWF  79
0DA9:  MOVLW  00
0DAA:  SUBWFC 41,W
0DAB:  MOVWF  7A
0DAC:  MOVWF  55
0DAD:  MOVF   79,W
0DAE:  MOVWF  54
0DAF:  MOVF   78,W
0DB0:  MOVWF  53
0DB1:  MOVF   77,W
0DB2:  MOVWF  52
0DB3:  MOVF   05,W
0DB4:  MOVWF  57
0DB5:  MOVF   04,W
0DB6:  MOVWF  56
0DB7:  MOVLB  04
0DB8:  CLRF   23
0DB9:  CLRF   22
0DBA:  CLRF   21
0DBB:  MOVLW  51
0DBC:  MOVWF  20
0DBD:  MOVLB  03
0DBE:  MOVF   55,W
0DBF:  MOVLB  04
0DC0:  MOVWF  27
0DC1:  MOVLB  03
0DC2:  MOVF   54,W
0DC3:  MOVLB  04
0DC4:  MOVWF  26
0DC5:  MOVLB  03
0DC6:  MOVF   53,W
0DC7:  MOVLB  04
0DC8:  MOVWF  25
0DC9:  MOVLB  03
0DCA:  MOVF   52,W
0DCB:  MOVLB  04
0DCC:  MOVWF  24
0DCD:  MOVLP  00
0DCE:  MOVLB  00
0DCF:  CALL   7CB
0DD0:  MOVLP  08
0DD1:  MOVLB  03
0DD2:  MOVF   57,W
0DD3:  MOVWF  05
0DD4:  MOVF   56,W
0DD5:  MOVWF  04
0DD6:  MOVF   77,W
0DD7:  ADDWF  3A,W
0DD8:  MOVWF  52
0DD9:  MOVF   78,W
0DDA:  ADDWFC 3B,W
0DDB:  MOVWF  53
0DDC:  MOVF   79,W
0DDD:  ADDWFC 3C,W
0DDE:  MOVWF  54
0DDF:  MOVF   7A,W
0DE0:  ADDWFC 3D,W
0DE1:  MOVWF  55
0DE2:  MOVF   46,W
0DE3:  ADDWF  52,F
0DE4:  MOVF   47,W
0DE5:  ADDWFC 53,F
0DE6:  MOVF   48,W
0DE7:  ADDWFC 54,F
0DE8:  MOVF   49,W
0DE9:  ADDWFC 55,F
0DEA:  MOVLW  16
0DEB:  SUBWF  52,F
0DEC:  MOVLW  00
0DED:  SUBWFC 53,F
0DEE:  SUBWFC 54,F
0DEF:  SUBWFC 55,F
0DF0:  MOVF   55,W
0DF1:  MOVLB  04
0DF2:  MOVWF  23
0DF3:  MOVLB  03
0DF4:  MOVF   54,W
0DF5:  MOVLB  04
0DF6:  MOVWF  22
0DF7:  MOVLB  03
0DF8:  MOVF   53,W
0DF9:  MOVLB  04
0DFA:  MOVWF  21
0DFB:  MOVLB  03
0DFC:  MOVF   52,W
0DFD:  MOVLB  04
0DFE:  MOVWF  20
0DFF:  MOVLB  00
0E00:  CALL   134
0E01:  MOVLB  03
0E02:  MOVF   51,W
0E03:  MOVWF  05
0E04:  MOVF   50,W
0E05:  MOVWF  04
0E06:  MOVF   78,W
0E07:  MOVWF  00
0E08:  MOVLW  01
0E09:  ADDWF  46,F
0E0A:  BTFSC  03.0
0E0B:  INCF   47,F
0E0C:  BTFSC  03.2
0E0D:  INCF   48,F
0E0E:  BTFSC  03.2
0E0F:  INCF   49,F
0E10:  GOTO   589
....................         } 
....................     } 
....................  
....................     //===========================CRC Value====================================== 
....................     //======================== 103 ---- 104 ==================================== 
....................     int16 outdata = mk_crc(data_pckt, 103); 
0E11:  MOVLW  20
0E12:  MOVWF  69
0E13:  MOVLW  6B
0E14:  MOVWF  68
0E15:  MOVLW  67
0E16:  MOVWF  6A
0E17:  MOVLP  00
0E18:  MOVLB  00
0E19:  CALL   594
0E1A:  MOVLP  08
0E1B:  MOVF   79,W
0E1C:  MOVLB  03
0E1D:  MOVWF  4B
0E1E:  MOVF   78,W
0E1F:  MOVWF  4A
....................  
....................     data_pckt[103] = outdata; 
0E20:  MOVF   4A,W
0E21:  MOVLB  02
0E22:  MOVWF  52
....................     data_pckt[104] = outdata >> 8; 
0E23:  MOVLB  03
0E24:  MOVF   4B,W
0E25:  MOVLB  02
0E26:  MOVWF  53
....................  
....................     //__________________________________________________________________________ 
....................  
....................     for (int8 ia = 0; ia <= 104; ia++) { 
0E27:  MOVLB  03
0E28:  CLRF   4C
0E29:  MOVF   4C,W
0E2A:  SUBLW  68
0E2B:  BTFSS  03.0
0E2C:  GOTO   63E
....................         fputc(data_pckt[ia], tr_cp); 
0E2D:  MOVLW  6B
0E2E:  ADDWF  4C,W
0E2F:  MOVWF  04
0E30:  MOVLW  20
0E31:  MOVWF  05
0E32:  BTFSC  03.0
0E33:  INCF   05,F
0E34:  MOVF   00,W
0E35:  MOVWF  50
0E36:  MOVF   50,W
0E37:  MOVLP  00
0E38:  MOVLB  00
0E39:  CALL   6DB
0E3A:  MOVLP  08
0E3B:  MOVLB  03
0E3C:  INCF   4C,F
0E3D:  GOTO   629
....................     } 
....................     delay_ms(200); 
0E3E:  MOVLW  C8
0E3F:  MOVWF  68
0E40:  MOVLP  00
0E41:  MOVLB  00
0E42:  CALL   079
0E43:  MOVLP  08
0E44:  RETURN
.................... } 
.................... //___________________________________________________________________________<< 
....................  
.................... //_____________________________________________________________________________________<< 
.................... //_________________________This function corrects the receiving buffer___________________ 
....................  
.................... // unsigned int8 sat_id; 
.................... // int crc = 0; // 0 when CRC is wrong, 1 when CRC is correct. 
.................... void buffer_correction() 
.................... { 
....................     unsigned int16 cr, pk; // these are the crc check variables 
....................     for (int i = 0; i < BUFFER_DELTA; i++) { 
*
0650:  MOVLB  03
0651:  CLRF   3D
0652:  MOVF   3D,W
0653:  SUBLW  09
0654:  BTFSS  03.0
0655:  GOTO   698
....................         if (buffer[i] == 0x42) { 
0656:  MOVLW  2B
0657:  ADDWF  3D,W
0658:  MOVWF  04
0659:  MOVLW  20
065A:  MOVWF  05
065B:  BTFSC  03.0
065C:  INCF   05,F
065D:  MOVF   00,W
065E:  SUBLW  42
065F:  BTFSS  03.2
0660:  GOTO   696
....................             for (int ih = 0; ih < CMD_LENGTH; ih++) { 
0661:  CLRF   3E
0662:  MOVF   3E,W
0663:  SUBLW  15
0664:  BTFSS  03.0
0665:  GOTO   683
....................                 cmd_pckt[ih] = buffer[ih + i]; 
0666:  MOVLW  14
0667:  ADDWF  3E,W
0668:  MOVWF  78
0669:  MOVLW  20
066A:  MOVWF  7A
066B:  BTFSC  03.0
066C:  INCF   7A,F
066D:  MOVF   78,W
066E:  MOVWF  40
066F:  MOVF   7A,W
0670:  MOVWF  41
0671:  MOVF   3D,W
0672:  ADDWF  3E,W
0673:  ADDLW  2B
0674:  MOVWF  04
0675:  MOVLW  20
0676:  MOVWF  05
0677:  BTFSC  03.0
0678:  INCF   05,F
0679:  MOVF   00,W
067A:  MOVWF  42
067B:  MOVF   41,W
067C:  MOVWF  05
067D:  MOVF   40,W
067E:  MOVWF  04
067F:  MOVF   42,W
0680:  MOVWF  00
0681:  INCF   3E,F
0682:  GOTO   662
....................             } 
....................             next_in = 0; 
0683:  MOVLB  00
0684:  CLRF   24
....................             buffer_zero(); 
....................             break; 
*
0695:  GOTO   698
....................         } 
0696:  INCF   3D,F
0697:  GOTO   652
....................     } 
....................     sat_id = cmd_pckt[1]; 
0698:  MOVLB  00
0699:  MOVF   35,W
069A:  MOVWF  2D
....................     if (cmd_pckt[2] == 0xCC) { // Extended KITSUNE format (22 bytes) 
069B:  MOVF   36,W
069C:  SUBLW  CC
069D:  BTFSS  03.2
069E:  GOTO   6B6
....................         cr = mk_crc(cmd_pckt, CMD_LENGTH - 2); 
069F:  MOVLW  20
06A0:  MOVLB  03
06A1:  MOVWF  69
06A2:  MOVLW  14
06A3:  MOVWF  68
06A4:  MOVWF  6A
06A5:  MOVLB  00
06A6:  CALL   594
06A7:  MOVF   79,W
06A8:  MOVLB  03
06A9:  MOVWF  3A
06AA:  MOVF   78,W
06AB:  MOVWF  39
....................         pk = make16(cmd_pckt[CMD_LENGTH - 1], cmd_pckt[CMD_LENGTH - 2]); 
06AC:  MOVLB  00
06AD:  MOVF   49,W
06AE:  MOVLB  03
06AF:  MOVWF  3C
06B0:  MOVLB  00
06B1:  MOVF   48,W
06B2:  MOVLB  03
06B3:  MOVWF  3B
....................     } else { // Herritage BIRDS format (14 bytes) 
06B4:  GOTO   6CC
06B5:  MOVLB  00
....................         cr = mk_crc(cmd_pckt, CMD_LEGACY_LENGTH - 2); 
06B6:  MOVLW  20
06B7:  MOVLB  03
06B8:  MOVWF  69
06B9:  MOVLW  14
06BA:  MOVWF  68
06BB:  MOVLW  0C
06BC:  MOVWF  6A
06BD:  MOVLB  00
06BE:  CALL   594
06BF:  MOVF   79,W
06C0:  MOVLB  03
06C1:  MOVWF  3A
06C2:  MOVF   78,W
06C3:  MOVWF  39
....................         pk = make16(cmd_pckt[CMD_LEGACY_LENGTH - 1], cmd_pckt[CMD_LEGACY_LENGTH - 2]); 
06C4:  MOVLB  00
06C5:  MOVF   41,W
06C6:  MOVLB  03
06C7:  MOVWF  3C
06C8:  MOVLB  00
06C9:  MOVF   40,W
06CA:  MOVLB  03
06CB:  MOVWF  3B
....................     } 
....................     crc = (cr == pk); 
06CC:  MOVF   3B,W
06CD:  SUBWF  39,W
06CE:  BTFSS  03.2
06CF:  GOTO   6D4
06D0:  MOVF   3C,W
06D1:  SUBWF  3A,W
06D2:  BTFSC  03.2
06D3:  GOTO   6D6
06D4:  MOVLW  00
06D5:  GOTO   6D7
06D6:  MOVLW  01
06D7:  MOVLB  00
06D8:  MOVWF  2E
06D9:  MOVLP  10
06DA:  GOTO   750 (RETURN)
.................... } 
.................... //___________________________________________________________________________<< 
....................  
.................... //_____________________________________________________________________________________<< 
.................... //_________________CMD to obc____________________________________________________________ 
.................... #define COM_TO_MAIN_LENGTH (CMD_LENGTH + 3) // Adding header, checksum and footer fields 
.................... unsigned int8 com_to_main[COM_TO_MAIN_LENGTH]; 
....................  
.................... #define MAIN_TO_COM_LENGTH 24 
.................... unsigned int8 main_to_com[MAIN_TO_COM_LENGTH] = { 0, 0, 0, 0, 0, 0, 0, 0, 
....................     0, 0, 0, 0, 0, 0, 0, 0, 
....................     0, 0, 0, 0, 0, 0, 0, 0 }; 
....................  
.................... void wait_for_main_pic_response() 
.................... { 
....................     for (; num < 200000; num++) { 
*
0224:  MOVF   33,F
0225:  BTFSS  03.2
0226:  GOTO   27D
0227:  MOVF   32,W
0228:  SUBLW  03
0229:  BTFSS  03.0
022A:  GOTO   27D
022B:  BTFSS  03.2
022C:  GOTO   237
022D:  MOVF   31,W
022E:  SUBLW  0D
022F:  BTFSS  03.0
0230:  GOTO   27D
0231:  BTFSS  03.2
0232:  GOTO   237
0233:  MOVF   30,W
0234:  SUBLW  3F
0235:  BTFSS  03.0
0236:  GOTO   27D
....................         if (kbhit(mp_cp)) { 
0237:  BTFSC  0D.2
0238:  GOTO   274
....................             main_to_com[mbi] = fgetc(mp_cp); 
0239:  MOVLW  ED
023A:  ADDWF  2F,W
023B:  MOVWF  04
023C:  MOVLW  20
023D:  MOVWF  05
023E:  BTFSC  03.0
023F:  INCF   05,F
0240:  MOVF   05,W
0241:  MOVLB  03
0242:  MOVWF  47
0243:  MOVF   04,W
0244:  MOVWF  46
*
026C:  MOVF   47,W
026D:  MOVWF  05
026E:  MOVF   46,W
026F:  MOVWF  04
0270:  MOVF   78,W
0271:  MOVWF  00
....................             mbi++; 
0272:  MOVLB  00
0273:  INCF   2F,F
....................         } 
0274:  MOVLW  01
0275:  ADDWF  30,F
0276:  BTFSC  03.0
0277:  INCF   31,F
0278:  BTFSC  03.2
0279:  INCF   32,F
027A:  BTFSC  03.2
027B:  INCF   33,F
027C:  GOTO   224
....................     } 
....................     mbi = 0; 
027D:  CLRF   2F
....................     num = 0; 
027E:  CLRF   33
027F:  CLRF   32
0280:  CLRF   31
0281:  CLRF   30
0282:  RETURN
.................... } 
....................  
.................... void make_main_pic_buffr_zero() 
.................... { 
....................     for (int p = 0; p < MAIN_TO_COM_LENGTH; p++) { 
*
0164:  MOVLB  03
0165:  CLRF   48
0166:  MOVF   48,W
0167:  SUBLW  17
0168:  BTFSS  03.0
0169:  GOTO   174
....................         main_to_com[p] = 0x00; 
016A:  MOVLW  ED
016B:  ADDWF  48,W
016C:  MOVWF  04
016D:  MOVLW  20
016E:  MOVWF  05
016F:  BTFSC  03.0
0170:  INCF   05,F
0171:  CLRF   00
0172:  INCF   48,F
0173:  GOTO   166
....................     } 
.................... } 
....................  
.................... void initialize_com_to_main() 
.................... { 
....................     com_to_main[0] = 0xC0; // header 
0174:  MOVLW  C0
0175:  MOVLB  02
0176:  MOVWF  54
....................     for (int i = 1; i < COM_TO_MAIN_LENGTH - 2; i++) { 
0177:  MOVLW  01
0178:  MOVLB  03
0179:  MOVWF  48
017A:  MOVF   48,W
017B:  SUBLW  16
017C:  BTFSS  03.0
017D:  GOTO   188
....................         com_to_main[i] = 0; // data 
017E:  MOVLW  D4
017F:  ADDWF  48,W
0180:  MOVWF  04
0181:  MOVLW  20
0182:  MOVWF  05
0183:  BTFSC  03.0
0184:  INCF   05,F
0185:  CLRF   00
0186:  INCF   48,F
0187:  GOTO   17A
....................     } 
....................     com_to_main[COM_TO_MAIN_LENGTH - 2] = 0;    // checksum 
0188:  MOVLB  02
0189:  CLRF   6B
....................     com_to_main[COM_TO_MAIN_LENGTH - 1] = 0xC1; // footer 
018A:  MOVLW  C1
018B:  MOVWF  6C
.................... } 
....................  
.................... void add_checksum_com_to_main() 
*
01D5:  MOVLB  03
01D6:  CLRF   48
.................... { 
....................     char checksum = 0; 
....................     for (int i = 1; i < COM_TO_MAIN_LENGTH - 2; i++) { 
01D7:  MOVLW  01
01D8:  MOVWF  49
01D9:  MOVF   49,W
01DA:  SUBLW  16
01DB:  BTFSS  03.0
01DC:  GOTO   1E8
....................         checksum ^= com_to_main[i]; 
01DD:  MOVLW  D4
01DE:  ADDWF  49,W
01DF:  MOVWF  04
01E0:  MOVLW  20
01E1:  MOVWF  05
01E2:  BTFSC  03.0
01E3:  INCF   05,F
01E4:  MOVF   00,W
01E5:  XORWF  48,F
01E6:  INCF   49,F
01E7:  GOTO   1D9
....................     } 
....................     com_to_main[COM_TO_MAIN_LENGTH - 2] = checksum; 
01E8:  MOVF   48,W
01E9:  MOVLB  02
01EA:  MOVWF  6B
.................... } 
....................  
.................... void communicate_with_main_pic(int8 p, unsigned int8 time) 
.................... { 
....................     make_main_pic_buffr_zero(); 
....................     initialize_com_to_main(); 
....................  
....................     if (p == 0) { // for com to main commands 
*
018C:  MOVLB  03
018D:  MOVF   41,F
018E:  BTFSS  03.2
018F:  GOTO   1B3
....................         for (int i = 0; i < CMD_LENGTH; i++) { 
0190:  CLRF   43
0191:  MOVF   43,W
0192:  SUBLW  15
0193:  BTFSS  03.0
0194:  GOTO   1B2
....................             com_to_main[i + 1] = cmd_pckt[i]; 
0195:  MOVLW  01
0196:  ADDWF  43,W
0197:  ADDLW  D4
0198:  MOVWF  78
0199:  MOVLW  20
019A:  MOVWF  7A
019B:  BTFSC  03.0
019C:  INCF   7A,F
019D:  MOVF   78,W
019E:  MOVWF  48
019F:  MOVF   7A,W
01A0:  MOVWF  49
01A1:  MOVLW  14
01A2:  ADDWF  43,W
01A3:  MOVWF  04
01A4:  MOVLW  20
01A5:  MOVWF  05
01A6:  BTFSC  03.0
01A7:  INCF   05,F
01A8:  MOVF   00,W
01A9:  MOVWF  4A
01AA:  MOVF   49,W
01AB:  MOVWF  05
01AC:  MOVF   48,W
01AD:  MOVWF  04
01AE:  MOVF   4A,W
01AF:  MOVWF  00
01B0:  INCF   43,F
01B1:  GOTO   191
....................         } 
....................     } else if (p == 1) { // cw ask 
01B2:  GOTO   1D4
01B3:  DECFSZ 41,W
01B4:  GOTO   1C8
....................         com_to_main[1] = 0x50; 
01B5:  MOVLW  50
01B6:  MOVLB  02
01B7:  MOVWF  55
....................         *(int16*)&com_to_main[2] = rssi_value; 
01B8:  MOVLW  20
01B9:  MOVLB  03
01BA:  MOVWF  49
01BB:  MOVLW  D6
01BC:  MOVWF  48
01BD:  MOVF   48,W
01BE:  MOVWF  04
01BF:  MOVF   49,W
01C0:  MOVWF  05
01C1:  MOVLB  00
01C2:  MOVF   27,W
01C3:  MOVWF  00
01C4:  MOVF   28,W
01C5:  MOVWI  W,[FSR0+01]
....................     } else if (p == 2) { // get access 
01C6:  GOTO   1D5
01C7:  MOVLB  03
01C8:  MOVF   41,W
01C9:  SUBLW  02
01CA:  BTFSS  03.2
01CB:  GOTO   1D4
....................         com_to_main[1] = 0x59; 
01CC:  MOVLW  59
01CD:  MOVLB  02
01CE:  MOVWF  55
....................         com_to_main[2] = time; 
01CF:  MOVLB  03
01D0:  MOVF   42,W
01D1:  MOVLB  02
01D2:  MOVWF  56
01D3:  MOVLB  03
01D4:  MOVLB  00
....................     } 
....................  
....................     add_checksum_com_to_main(); 
....................  
....................     for (int8 ia = 0; ia < COM_TO_MAIN_LENGTH; ia++) { 
*
01EB:  MOVLB  03
01EC:  CLRF   44
01ED:  MOVF   44,W
01EE:  SUBLW  18
01EF:  BTFSS  03.0
01F0:  GOTO   222
....................         fputc(com_to_main[ia], MP_CP); 
01F1:  MOVLW  D4
01F2:  ADDWF  44,W
01F3:  MOVWF  04
01F4:  MOVLW  20
01F5:  MOVWF  05
01F6:  BTFSC  03.0
01F7:  INCF   05,F
01F8:  MOVF   00,W
01F9:  MOVWF  48
01FA:  MOVF   48,W
01FB:  MOVWF  49
*
021F:  MOVLB  03
0220:  INCF   44,F
0221:  GOTO   1ED
....................     } 
0222:  MOVLB  00
0223:  RETURN
.................... } 
.................... //___________________________________________________________________________<< 
....................  
.................... //___________________________________________________________________________<< 
....................  
.................... //____________________This function create packet of rssi and temp of trx________________ 
.................... void send_com_data() 
.................... { 
....................     //    Ground stationCall sign---------------[ 0-----5 ] 
....................     ack_pckt[0] = 0x4a; // J 
*
11ED:  MOVLW  4A
11EE:  MOVWF  6B
....................     ack_pckt[1] = 0x47; // G 
11EF:  MOVLW  47
11F0:  MOVWF  6C
....................     ack_pckt[2] = 0x36; // 6 
11F1:  MOVLW  36
11F2:  MOVWF  6D
....................     ack_pckt[3] = 0x59; // Y 
11F3:  MOVLW  59
11F4:  MOVWF  6E
....................     ack_pckt[4] = 0x42; // B 
11F5:  MOVLW  42
11F6:  MOVWF  6F
....................     ack_pckt[5] = 0x57; // W 
11F7:  MOVLW  57
11F8:  MOVLB  01
11F9:  MOVWF  20
....................  
....................     //    Dest SSID-----------------------------[ 6 ] 
....................     ack_pckt[6] = 0x30; //char 0 
11FA:  MOVLW  30
11FB:  MOVWF  21
....................  
....................     //    Satellite Call Sign-------------------[ 7-----12 ] 
....................     ack_pckt[7] = 'L'; 
11FC:  MOVLW  4C
11FD:  MOVWF  22
....................     ack_pckt[8] = 'E'; 
11FE:  MOVLW  45
11FF:  MOVWF  23
....................     ack_pckt[9] = 'O'; 
1200:  MOVLW  4F
1201:  MOVWF  24
....................     ack_pckt[10] = 'P'; 
1202:  MOVLW  50
1203:  MOVWF  25
....................     ack_pckt[11] = 'A'; 
1204:  MOVLW  41
1205:  MOVWF  26
....................     ack_pckt[12] = 'R'; 
1206:  MOVLW  52
1207:  MOVWF  27
....................  
....................     //    Source SSID---------------------------[ 13 ] 
....................     ack_pckt[13] = 0x30; //char 0 
1208:  MOVLW  30
1209:  MOVWF  28
....................  
....................     //    Control-------------------------------[ 14 ] 
....................     ack_pckt[14] = 0x3E; // 
120A:  MOVLW  3E
120B:  MOVWF  29
....................  
....................     //    PID-----------------------------------[ 15 ] 
....................     ack_pckt[15] = 0xF0; // 
120C:  MOVLW  F0
120D:  MOVWF  2A
....................  
....................     //    Header--------------------------------[ 16 ] 
....................     ack_pckt[16] = 0xAA; // 
120E:  MOVLW  AA
120F:  MOVWF  2B
....................  
....................     //    SAT Header----------------------------[ 17] 
....................     ack_pckt[17] = 0x03; // 
1210:  MOVLW  03
1211:  MOVWF  2C
....................  
....................     //    Pckt sequence number higher byte------[ 18 ] 
....................     ack_pckt[18] = cmd_pckt[1]; // 
1212:  MOVLB  00
1213:  MOVF   35,W
1214:  MOVLB  01
1215:  MOVWF  2D
....................  
....................     //    Pckt sequence number lower byte-------[ 19 ] 
....................     ack_pckt[19] = cmd_pckt[2]; // 
1216:  MOVLB  00
1217:  MOVF   36,W
1218:  MOVLB  01
1219:  MOVWF  2E
....................  
....................     //    CMD back------------------------------[ 20 - 28 ] 
....................     int16 tempr = trx_temp_read(); 
....................  
....................     unsigned int32 rssi64 = 0; 
*
1233:  MOVF   79,W
1234:  MOVLB  03
1235:  MOVWF  3A
1236:  MOVF   78,W
1237:  MOVWF  39
1238:  CLRF   3E
1239:  CLRF   3D
123A:  CLRF   3C
123B:  CLRF   3B
....................  
....................     for (int lk = 0; lk < 100; lk++) { 
123C:  CLRF   3F
123D:  MOVF   3F,W
123E:  SUBLW  63
123F:  BTFSS  03.0
1240:  GOTO   253
....................         rssi64 = rssi64 + trx_rssi_read(); 
1241:  MOVLP  00
1242:  MOVLB  00
1243:  CALL   0A5
1244:  MOVLP  10
1245:  MOVF   78,W
1246:  MOVLB  03
1247:  ADDWF  3B,F
1248:  MOVF   79,W
1249:  ADDWFC 3C,F
124A:  MOVLW  00
124B:  ADDWFC 3D,F
124C:  ADDWFC 3E,F
....................         delay_us(100); 
124D:  MOVLW  85
124E:  MOVWF  77
124F:  DECFSZ 77,F
1250:  GOTO   24F
1251:  INCF   3F,F
1252:  GOTO   23D
....................     } 
....................  
....................     int16 rssi = rssi64 / 100; 
1253:  BCF    03.1
1254:  MOVF   3E,W
1255:  MOVWF  6B
1256:  MOVF   3D,W
1257:  MOVWF  6A
1258:  MOVF   3C,W
1259:  MOVWF  69
125A:  MOVF   3B,W
125B:  MOVWF  68
125C:  CLRF   6F
125D:  CLRF   6E
125E:  CLRF   6D
125F:  MOVLW  64
1260:  MOVWF  6C
1261:  MOVLP  00
1262:  MOVLB  00
1263:  CALL   0C1
1264:  MOVLP  10
1265:  MOVF   78,W
1266:  MOVLB  03
1267:  MOVWF  41
1268:  MOVF   77,W
1269:  MOVWF  40
....................  
....................     ack_pckt[20] = cmd_pckt[3]; 
126A:  MOVLB  00
126B:  MOVF   37,W
126C:  MOVLB  01
126D:  MOVWF  2F
....................     ack_pckt[21] = 0xDD; 
126E:  MOVLW  DD
126F:  MOVWF  30
....................     ack_pckt[22] = rssi >> 8; 
1270:  MOVLB  03
1271:  MOVF   41,W
1272:  MOVLB  01
1273:  MOVWF  31
....................     ack_pckt[23] = rssi; 
1274:  MOVLB  03
1275:  MOVF   40,W
1276:  MOVLB  01
1277:  MOVWF  32
....................     ack_pckt[24] = 0xDD; 
1278:  MOVLW  DD
1279:  MOVWF  33
....................     ack_pckt[25] = 0xDD; 
127A:  MOVWF  34
....................     ack_pckt[26] = tempr >> 8; 
127B:  MOVLB  03
127C:  MOVF   3A,W
127D:  MOVLB  01
127E:  MOVWF  35
....................     ack_pckt[27] = tempr; 
127F:  MOVLB  03
1280:  MOVF   39,W
1281:  MOVLB  01
1282:  MOVWF  36
....................     ack_pckt[28] = 0xDD; 
1283:  MOVLW  DD
1284:  MOVWF  37
....................  
....................     //    Footer--------------------------------[ 29 ] 
....................     ack_pckt[29] = 0xAA; // 
1285:  MOVLW  AA
1286:  MOVWF  38
....................  
....................     //    CRC Calculation-----------------------[ 30 - 31 ] 
....................     int16 outdata = mk_crc(ack_pckt, 30); 
1287:  MOVLW  20
1288:  MOVLB  03
1289:  MOVWF  69
128A:  MOVLW  4B
128B:  MOVWF  68
128C:  MOVLW  1E
128D:  MOVWF  6A
128E:  MOVLP  00
128F:  MOVLB  00
1290:  CALL   594
1291:  MOVLP  10
1292:  MOVF   79,W
1293:  MOVLB  03
1294:  MOVWF  43
1295:  MOVF   78,W
1296:  MOVWF  42
....................  
....................     ack_pckt[30] = outdata; 
1297:  MOVF   42,W
1298:  MOVLB  01
1299:  MOVWF  39
....................     ack_pckt[31] = outdata >> 8; 
129A:  MOVLB  03
129B:  MOVF   43,W
129C:  MOVLB  01
129D:  MOVWF  3A
....................  
....................     //    Send pckt------------------------------ 
....................     output_high(pin_d1); 
129E:  BCF    0F.1
129F:  MOVLB  02
12A0:  BSF    0F.1
....................     delay_ms(2000); 
12A1:  MOVLW  08
12A2:  MOVLB  03
12A3:  MOVWF  45
12A4:  MOVLW  FA
12A5:  MOVWF  68
12A6:  MOVLP  00
12A7:  MOVLB  00
12A8:  CALL   079
12A9:  MOVLP  10
12AA:  MOVLB  03
12AB:  DECFSZ 45,F
12AC:  GOTO   2A4
....................     for (int ih = 0; ih < ACK_LENGTH; ih++) //buffer print 
12AD:  CLRF   44
12AE:  MOVF   44,W
12AF:  SUBLW  1F
12B0:  BTFSS  03.0
12B1:  GOTO   2C3
....................     { 
....................         fputc(ack_pckt[ih], tr_cp); 
12B2:  MOVLW  4B
12B3:  ADDWF  44,W
12B4:  MOVWF  04
12B5:  MOVLW  20
12B6:  MOVWF  05
12B7:  BTFSC  03.0
12B8:  INCF   05,F
12B9:  MOVF   00,W
12BA:  MOVWF  45
12BB:  MOVF   45,W
12BC:  MOVLP  00
12BD:  MOVLB  00
12BE:  CALL   6DB
12BF:  MOVLP  10
12C0:  MOVLB  03
12C1:  INCF   44,F
12C2:  GOTO   2AE
....................     } 
....................     delay_ms(500); 
12C3:  MOVLW  02
12C4:  MOVWF  45
12C5:  MOVLW  FA
12C6:  MOVWF  68
12C7:  MOVLP  00
12C8:  MOVLB  00
12C9:  CALL   079
12CA:  MOVLP  10
12CB:  MOVLB  03
12CC:  DECFSZ 45,F
12CD:  GOTO   2C5
....................     output_low(pin_d1); 
12CE:  MOVLB  01
12CF:  BCF    0F.1
12D0:  MOVLB  02
12D1:  BCF    0F.1
.................... } 
....................  
.................... unsigned int16 rssi_read() 
*
012E:  MOVLB  03
012F:  CLRF   3C
0130:  CLRF   3B
0131:  CLRF   3A
0132:  CLRF   39
.................... { 
....................     unsigned int32 rssi = 0; 
....................  
....................     for (int lk = 0; lk < 20; lk++) { 
0133:  CLRF   3D
0134:  MOVF   3D,W
0135:  SUBLW  13
0136:  BTFSS  03.0
0137:  GOTO   148
....................         rssi = rssi + trx_rssi_read(); 
0138:  MOVLB  00
0139:  CALL   0A5
013A:  MOVF   78,W
013B:  MOVLB  03
013C:  ADDWF  39,F
013D:  MOVF   79,W
013E:  ADDWFC 3A,F
013F:  MOVLW  00
0140:  ADDWFC 3B,F
0141:  ADDWFC 3C,F
....................         delay_us(10); 
0142:  MOVLW  0D
0143:  MOVWF  77
0144:  DECFSZ 77,F
0145:  GOTO   144
0146:  INCF   3D,F
0147:  GOTO   134
....................     } 
....................  
....................     unsigned int16 rssi1 = rssi / 20; //averaging for better value 
0148:  BCF    03.1
0149:  MOVF   3C,W
014A:  MOVWF  6B
014B:  MOVF   3B,W
014C:  MOVWF  6A
014D:  MOVF   3A,W
014E:  MOVWF  69
014F:  MOVF   39,W
0150:  MOVWF  68
0151:  CLRF   6F
0152:  CLRF   6E
0153:  CLRF   6D
0154:  MOVLW  14
0155:  MOVWF  6C
0156:  MOVLB  00
0157:  CALL   0C1
0158:  MOVF   78,W
0159:  MOVLB  03
015A:  MOVWF  3F
015B:  MOVF   77,W
015C:  MOVWF  3E
....................  
....................     return rssi1; 
015D:  MOVF   3E,W
015E:  MOVWF  78
015F:  MOVF   3F,W
0160:  MOVWF  79
0161:  MOVLP  10
0162:  MOVLB  00
0163:  GOTO   713 (RETURN)
.................... } 
....................  
.................... #include <cwsri.c> //_1 
.................... //___character_space_function___/////////////////////////////////// 
.................... void ch_space() 
.................... { 
....................     LATD3 = 0; 
*
02B7:  MOVLB  02
02B8:  BCF    0F.3
....................     delay_ms(180); 
02B9:  MOVLW  B4
02BA:  MOVLB  03
02BB:  MOVWF  68
02BC:  MOVLB  00
02BD:  CALL   079
....................     return; 
02BE:  RETURN
.................... } 
....................  
.................... //___Word_space_function___//////////////////////////////////////// 
.................... void word_space() 
.................... { 
....................     LATD3 = 0; 
....................     delay_ms(420); 
....................     return; 
.................... } 
....................  
.................... //___dit_function___/////////////////////////////////////////////// 
.................... void dit() 
.................... { 
....................     LATD3 = 1; 
*
02A8:  MOVLB  02
02A9:  BSF    0F.3
....................     delay_ms(60); 
02AA:  MOVLW  3C
02AB:  MOVLB  03
02AC:  MOVWF  68
02AD:  MOVLB  00
02AE:  CALL   079
....................     LATD3 = 0; 
02AF:  MOVLB  02
02B0:  BCF    0F.3
....................     delay_ms(60); 
02B1:  MOVLW  3C
02B2:  MOVLB  03
02B3:  MOVWF  68
02B4:  MOVLB  00
02B5:  CALL   079
....................     return; 
02B6:  RETURN
.................... } 
....................  
.................... //___dit_function___/////////////////////////////////////////////// 
.................... void dah() 
.................... { 
....................     LATD3 = 1; 
*
0299:  MOVLB  02
029A:  BSF    0F.3
....................     delay_ms(180); 
029B:  MOVLW  B4
029C:  MOVLB  03
029D:  MOVWF  68
029E:  MOVLB  00
029F:  CALL   079
....................     LATD3 = 0; 
02A0:  MOVLB  02
02A1:  BCF    0F.3
....................     delay_ms(60); 
02A2:  MOVLW  3C
02A3:  MOVLB  03
02A4:  MOVWF  68
02A5:  MOVLB  00
02A6:  CALL   079
....................     return; 
02A7:  RETURN
.................... } 
....................  
.................... ///////////////////////___character-A___////////////////////////// 
.................... void cw_a() 
.................... { 
....................     dit(); 
*
02F2:  CALL   2A8
....................     dah(); 
02F3:  CALL   299
....................     ch_space(); 
02F4:  CALL   2B7
02F5:  RETURN
.................... } 
....................  
.................... ///////////////////////___character-B___////////////////////////// 
.................... void cw_b() 
.................... { 
....................     dah(); 
*
03BD:  MOVLB  00
03BE:  CALL   299
....................     dit(); 
03BF:  CALL   2A8
....................     dit(); 
03C0:  CALL   2A8
....................     dit(); 
03C1:  CALL   2A8
....................     ch_space(); 
03C2:  CALL   2B7
.................... } 
....................  
.................... ///////////////////////___character-C___////////////////////////// 
.................... void cw_c() 
.................... { 
....................     dah(); 
*
02D5:  CALL   299
....................     dit(); 
02D6:  CALL   2A8
....................     dah(); 
02D7:  CALL   299
....................     dit(); 
02D8:  CALL   2A8
....................     ch_space(); 
02D9:  CALL   2B7
02DA:  RETURN
.................... } 
....................  
.................... ///////////////////////___character-D___////////////////////////// 
.................... void cw_d() 
.................... { 
....................     dah(); 
*
02FB:  CALL   299
....................     dit(); 
02FC:  CALL   2A8
....................     dit(); 
02FD:  CALL   2A8
....................     ch_space(); 
02FE:  CALL   2B7
02FF:  RETURN
.................... } 
....................  
.................... ///////////////////////___character-E___////////////////////////// 
.................... void cw_e() 
.................... { 
....................     dit(); 
*
02D2:  CALL   2A8
....................     ch_space(); 
02D3:  CALL   2B7
02D4:  RETURN
.................... } 
....................  
.................... ///////////////////////___character-F___////////////////////////// 
.................... void cw_f() 
.................... { 
....................     dit(); 
*
03F1:  MOVLB  00
03F2:  CALL   2A8
....................     dit(); 
03F3:  CALL   2A8
....................     dah(); 
03F4:  CALL   299
....................     dit(); 
03F5:  CALL   2A8
....................     ch_space(); 
03F6:  CALL   2B7
.................... } 
....................  
.................... ///////////////////////___character-G___////////////////////////// 
.................... void cw_g() 
.................... { 
....................     dah(); 
*
03FD:  MOVLB  00
03FE:  CALL   299
....................     dah(); 
03FF:  CALL   299
....................     dit(); 
0400:  CALL   2A8
....................     ch_space(); 
0401:  CALL   2B7
.................... } 
....................  
.................... ///////////////////////___character-H___////////////////////////// 
.................... void cw_h() 
.................... { 
....................     dit(); 
*
02DB:  CALL   2A8
....................     dit(); 
02DC:  CALL   2A8
....................     dit(); 
02DD:  CALL   2A8
....................     dit(); 
02DE:  CALL   2A8
....................     ch_space(); 
02DF:  CALL   2B7
02E0:  RETURN
.................... } 
....................  
.................... ///////////////////////___character-I___////////////////////////// 
.................... void cw_i() 
.................... { 
....................     dit(); 
*
0410:  MOVLB  00
0411:  CALL   2A8
....................     dit(); 
0412:  CALL   2A8
....................     ch_space(); 
0413:  CALL   2B7
.................... } 
....................  
.................... ///////////////////////___character-J////////////////////////// 
.................... void cw_j() 
.................... { 
....................     dit(); 
*
041A:  MOVLB  00
041B:  CALL   2A8
....................     dah(); 
041C:  CALL   299
....................     dah(); 
041D:  CALL   299
....................     dah(); 
041E:  CALL   299
....................     ch_space(); 
041F:  CALL   2B7
.................... } 
....................  
.................... ///////////////////////___character-K___////////////////////////// 
.................... void cw_k() 
.................... { 
....................     dah(); 
*
02BF:  CALL   299
....................     dit(); 
02C0:  CALL   2A8
....................     dah(); 
02C1:  CALL   299
....................     ch_space(); 
02C2:  CALL   2B7
02C3:  RETURN
.................... } 
....................  
.................... ///////////////////////___character-L___////////////////////////// 
.................... void cw_l() 
.................... { 
....................     dit(); 
*
02E1:  CALL   2A8
....................     dah(); 
02E2:  CALL   299
....................     dit(); 
02E3:  CALL   2A8
....................     dit(); 
02E4:  CALL   2A8
....................     ch_space(); 
02E5:  CALL   2B7
02E6:  RETURN
.................... } 
....................  
.................... ///////////////////////___character-M___////////////////////////// 
.................... void cw_m() 
.................... { 
....................     dah(); 
*
0436:  MOVLB  00
0437:  CALL   299
....................     dah(); 
0438:  CALL   299
....................     ch_space(); 
0439:  CALL   2B7
.................... } 
....................  
.................... ///////////////////////___character-N___////////////////////////// 
.................... void cw_n() 
.................... { 
....................     dah(); 
*
0440:  MOVLB  00
0441:  CALL   299
....................     dit(); 
0442:  CALL   2A8
....................     ch_space(); 
0443:  CALL   2B7
.................... } 
....................  
.................... ///////////////////////___character-O___////////////////////////// 
.................... void cw_o() 
.................... { 
....................     dah(); 
*
02E7:  CALL   299
....................     dah(); 
02E8:  CALL   299
....................     dah(); 
02E9:  CALL   299
....................     ch_space(); 
02EA:  CALL   2B7
02EB:  RETURN
.................... } 
....................  
.................... ///////////////////////___character-P___////////////////////////// 
.................... void cw_p() 
.................... { 
....................     dit(); 
02EC:  CALL   2A8
....................     dah(); 
02ED:  CALL   299
....................     dah(); 
02EE:  CALL   299
....................     dit(); 
02EF:  CALL   2A8
....................     ch_space(); 
02F0:  CALL   2B7
02F1:  RETURN
.................... } 
....................  
.................... ///////////////////////___character-Q___////////////////////////// 
.................... void cw_q() 
.................... { 
....................     dah(); 
*
045A:  MOVLB  00
045B:  CALL   299
....................     dah(); 
045C:  CALL   299
....................     dit(); 
045D:  CALL   2A8
....................     dah(); 
045E:  CALL   299
....................     ch_space(); 
045F:  CALL   2B7
.................... } 
....................  
.................... ///////////////////////___character-R___////////////////////////// 
.................... void cw_r() 
.................... { 
....................     dit(); 
*
02F6:  CALL   2A8
....................     dah(); 
02F7:  CALL   299
....................     dit(); 
02F8:  CALL   2A8
....................     ch_space(); 
02F9:  CALL   2B7
02FA:  RETURN
.................... } 
....................  
.................... ///////////////////////___character-S___////////////////////////// 
.................... void cw_s() 
.................... { 
....................     dit(); 
*
046E:  MOVLB  00
046F:  CALL   2A8
....................     dit(); 
0470:  CALL   2A8
....................     dit(); 
0471:  CALL   2A8
....................     ch_space(); 
0472:  CALL   2B7
.................... } 
....................  
.................... ///////////////////////___character-T___////////////////////////// 
.................... void cw_t() 
.................... { 
....................     dah(); 
*
02CF:  CALL   299
....................     ch_space(); 
02D0:  CALL   2B7
02D1:  RETURN
.................... } 
....................  
.................... ///////////////////////___character-U___////////////////////////// 
.................... void cw_u() 
.................... { 
....................     dit(); 
*
02CA:  CALL   2A8
....................     dit(); 
02CB:  CALL   2A8
....................     dah(); 
02CC:  CALL   299
....................     ch_space(); 
02CD:  CALL   2B7
02CE:  RETURN
.................... } 
....................  
.................... ///////////////////////___character-V___////////////////////////// 
.................... void cw_v() 
.................... { 
....................     dit(); 
*
0489:  MOVLB  00
048A:  CALL   2A8
....................     dit(); 
048B:  CALL   2A8
....................     dit(); 
048C:  CALL   2A8
....................     dah(); 
048D:  CALL   299
....................     ch_space(); 
048E:  CALL   2B7
.................... } 
....................  
.................... ///////////////////////___character-W___////////////////////////// 
.................... void cw_w() 
.................... { 
....................     dit(); 
*
0495:  MOVLB  00
0496:  CALL   2A8
....................     dah(); 
0497:  CALL   299
....................     dah(); 
0498:  CALL   299
....................     ch_space(); 
0499:  CALL   2B7
.................... } 
....................  
.................... ///////////////////////___character-X___////////////////////////// 
.................... void cw_x() 
.................... { 
....................     dah(); 
*
04A0:  MOVLB  00
04A1:  CALL   299
....................     dit(); 
04A2:  CALL   2A8
....................     dit(); 
04A3:  CALL   2A8
....................     dah(); 
04A4:  CALL   299
....................     ch_space(); 
04A5:  CALL   2B7
.................... } 
....................  
.................... ///////////////////////___character-Y___////////////////////////// 
.................... void cw_y() 
.................... { 
....................     dah(); 
*
02C4:  CALL   299
....................     dit(); 
02C5:  CALL   2A8
....................     dah(); 
02C6:  CALL   299
....................     dah(); 
02C7:  CALL   299
....................     ch_space(); 
02C8:  CALL   2B7
02C9:  RETURN
.................... } 
....................  
.................... ///////////////////////___character-Z___////////////////////////// 
.................... void cw_z() 
.................... { 
....................     dah(); 
*
04B4:  MOVLB  00
04B5:  CALL   299
....................     dah(); 
04B6:  CALL   299
....................     dit(); 
04B7:  CALL   2A8
....................     dit(); 
04B8:  CALL   2A8
....................     ch_space(); 
04B9:  CALL   2B7
04BA:  MOVLB  03
.................... } 
....................  
.................... ///////////////////////___Number-1___///////////////////////////// 
.................... void cw_1() 
.................... { 
....................     dit(); 
*
0318:  MOVLB  00
0319:  CALL   2A8
....................     dah(); 
031A:  CALL   299
....................     dah(); 
031B:  CALL   299
....................     dah(); 
031C:  CALL   299
....................     dah(); 
031D:  CALL   299
....................     ch_space(); 
031E:  CALL   2B7
.................... } 
....................  
.................... ///////////////////////___Number-2___///////////////////////////// 
.................... void cw_2() 
.................... { 
....................     dit(); 
*
0329:  MOVLB  00
032A:  CALL   2A8
....................     dit(); 
032B:  CALL   2A8
....................     dah(); 
032C:  CALL   299
....................     dah(); 
032D:  CALL   299
....................     dah(); 
032E:  CALL   299
....................     ch_space(); 
032F:  CALL   2B7
.................... } 
....................  
.................... ///////////////////////___Number-3___///////////////////////////// 
.................... void cw_3() 
.................... { 
....................     dit(); 
*
033A:  MOVLB  00
033B:  CALL   2A8
....................     dit(); 
033C:  CALL   2A8
....................     dit(); 
033D:  CALL   2A8
....................     dah(); 
033E:  CALL   299
....................     dah(); 
033F:  CALL   299
....................     ch_space(); 
0340:  CALL   2B7
.................... } 
....................  
.................... ///////////////////////___Number-4___///////////////////////////// 
.................... void cw_4() 
.................... { 
....................     dit(); 
*
034B:  MOVLB  00
034C:  CALL   2A8
....................     dit(); 
034D:  CALL   2A8
....................     dit(); 
034E:  CALL   2A8
....................     dit(); 
034F:  CALL   2A8
....................     dah(); 
0350:  CALL   299
....................     ch_space(); 
0351:  CALL   2B7
.................... } 
....................  
.................... ///////////////////////___Number-5___///////////////////////////// 
.................... void cw_5() 
.................... { 
....................     dit(); 
*
035C:  MOVLB  00
035D:  CALL   2A8
....................     dit(); 
035E:  CALL   2A8
....................     dit(); 
035F:  CALL   2A8
....................     dit(); 
0360:  CALL   2A8
....................     dit(); 
0361:  CALL   2A8
....................     ch_space(); 
0362:  CALL   2B7
.................... } 
....................  
.................... ///////////////////////___Number-6___///////////////////////////// 
.................... void cw_6() 
.................... { 
....................     dah(); 
*
036D:  MOVLB  00
036E:  CALL   299
....................     dit(); 
036F:  CALL   2A8
....................     dit(); 
0370:  CALL   2A8
....................     dit(); 
0371:  CALL   2A8
....................     dit(); 
0372:  CALL   2A8
....................     ch_space(); 
0373:  CALL   2B7
.................... } 
....................  
.................... ///////////////////////___Number-7___///////////////////////////// 
.................... void cw_7() 
.................... { 
....................     dah(); 
*
037E:  MOVLB  00
037F:  CALL   299
....................     dah(); 
0380:  CALL   299
....................     dit(); 
0381:  CALL   2A8
....................     dit(); 
0382:  CALL   2A8
....................     dit(); 
0383:  CALL   2A8
....................     ch_space(); 
0384:  CALL   2B7
.................... } 
....................  
.................... ///////////////////////___Number-8___///////////////////////////// 
.................... void cw_8() 
.................... { 
....................     dah(); 
*
038F:  MOVLB  00
0390:  CALL   299
....................     dah(); 
0391:  CALL   299
....................     dah(); 
0392:  CALL   299
....................     dit(); 
0393:  CALL   2A8
....................     dit(); 
0394:  CALL   2A8
....................     ch_space(); 
0395:  CALL   2B7
.................... } 
....................  
.................... ///////////////////////___Number-9___///////////////////////////// 
.................... void cw_9() 
.................... { 
....................     dah(); 
*
03A0:  MOVLB  00
03A1:  CALL   299
....................     dah(); 
03A2:  CALL   299
....................     dah(); 
03A3:  CALL   299
....................     dah(); 
03A4:  CALL   299
....................     dit(); 
03A5:  CALL   2A8
....................     ch_space(); 
03A6:  CALL   2B7
.................... } 
....................  
.................... ///////////////////////___Number-9___///////////////////////////// 
.................... void cw_0() 
.................... { 
....................     dah(); 
*
0308:  MOVLB  00
0309:  CALL   299
....................     dah(); 
030A:  CALL   299
....................     dah(); 
030B:  CALL   299
....................     dah(); 
030C:  CALL   299
....................     dah(); 
030D:  CALL   299
....................     ch_space(); 
030E:  CALL   2B7
.................... } 
....................  
.................... void cw_leopard() 
.................... { 
....................     cw_l(); 
*
04E7:  MOVLB  00
04E8:  CALL   2E1
....................     cw_e(); 
04E9:  CALL   2D2
....................     cw_o(); 
04EA:  CALL   2E7
....................     cw_p(); 
04EB:  CALL   2EC
....................     cw_a(); 
04EC:  CALL   2F2
....................     cw_r(); 
04ED:  CALL   2F6
....................     cw_d(); 
04EE:  CALL   2FB
....................     return; 
.................... } 
....................  
.................... void call_sign() 
.................... { 
....................     cw_k(); 
*
04D5:  MOVLB  00
04D6:  CALL   2BF
....................     cw_y(); 
04D7:  CALL   2C4
....................     cw_u(); 
04D8:  CALL   2CA
....................     cw_t(); 
04D9:  CALL   2CF
....................     cw_e(); 
04DA:  CALL   2D2
....................     cw_c(); 
04DB:  CALL   2D5
....................     cw_h(); 
04DC:  CALL   2DB
....................     return; 
.................... } 
....................  
.................... void cw_letter(unsigned int8 cwl) 
.................... { 
....................     //Hexa decimal values 
....................     if (cwl == 0x00 || cwl == 0x30) 
*
0300:  MOVLB  03
0301:  MOVF   48,F
0302:  BTFSC  03.2
0303:  GOTO   308
0304:  MOVF   48,W
0305:  SUBLW  30
0306:  BTFSS  03.2
0307:  GOTO   311
....................         cw_0(); 
*
030F:  GOTO   4BA
0310:  MOVLB  03
....................     else if (cwl == 0x01 || cwl == 0x31) 
0311:  DECFSZ 48,W
0312:  GOTO   314
0313:  GOTO   318
0314:  MOVF   48,W
0315:  SUBLW  31
0316:  BTFSS  03.2
0317:  GOTO   321
....................         cw_1(); 
*
031F:  GOTO   4BA
0320:  MOVLB  03
....................     else if (cwl == 0x02 || cwl == 0x32) 
0321:  MOVF   48,W
0322:  SUBLW  02
0323:  BTFSC  03.2
0324:  GOTO   329
0325:  MOVF   48,W
0326:  SUBLW  32
0327:  BTFSS  03.2
0328:  GOTO   332
....................         cw_2(); 
*
0330:  GOTO   4BA
0331:  MOVLB  03
....................     else if (cwl == 0x03 || cwl == 0x33) 
0332:  MOVF   48,W
0333:  SUBLW  03
0334:  BTFSC  03.2
0335:  GOTO   33A
0336:  MOVF   48,W
0337:  SUBLW  33
0338:  BTFSS  03.2
0339:  GOTO   343
....................         cw_3(); 
*
0341:  GOTO   4BA
0342:  MOVLB  03
....................     else if (cwl == 0x04 || cwl == 0x34) 
0343:  MOVF   48,W
0344:  SUBLW  04
0345:  BTFSC  03.2
0346:  GOTO   34B
0347:  MOVF   48,W
0348:  SUBLW  34
0349:  BTFSS  03.2
034A:  GOTO   354
....................         cw_4(); 
*
0352:  GOTO   4BA
0353:  MOVLB  03
....................     else if (cwl == 0x05 || cwl == 0x35) 
0354:  MOVF   48,W
0355:  SUBLW  05
0356:  BTFSC  03.2
0357:  GOTO   35C
0358:  MOVF   48,W
0359:  SUBLW  35
035A:  BTFSS  03.2
035B:  GOTO   365
....................         cw_5(); 
*
0363:  GOTO   4BA
0364:  MOVLB  03
....................     else if (cwl == 0x06 || cwl == 0x36) 
0365:  MOVF   48,W
0366:  SUBLW  06
0367:  BTFSC  03.2
0368:  GOTO   36D
0369:  MOVF   48,W
036A:  SUBLW  36
036B:  BTFSS  03.2
036C:  GOTO   376
....................         cw_6(); 
*
0374:  GOTO   4BA
0375:  MOVLB  03
....................     else if (cwl == 0x07 || cwl == 0x37) 
0376:  MOVF   48,W
0377:  SUBLW  07
0378:  BTFSC  03.2
0379:  GOTO   37E
037A:  MOVF   48,W
037B:  SUBLW  37
037C:  BTFSS  03.2
037D:  GOTO   387
....................         cw_7(); 
*
0385:  GOTO   4BA
0386:  MOVLB  03
....................     else if (cwl == 0x08 || cwl == 0x38) 
0387:  MOVF   48,W
0388:  SUBLW  08
0389:  BTFSC  03.2
038A:  GOTO   38F
038B:  MOVF   48,W
038C:  SUBLW  38
038D:  BTFSS  03.2
038E:  GOTO   398
....................         cw_8(); 
*
0396:  GOTO   4BA
0397:  MOVLB  03
....................     else if (cwl == 0x09 || cwl == 0x39) 
0398:  MOVF   48,W
0399:  SUBLW  09
039A:  BTFSC  03.2
039B:  GOTO   3A0
039C:  MOVF   48,W
039D:  SUBLW  39
039E:  BTFSS  03.2
039F:  GOTO   3A9
....................         cw_9(); 
*
03A7:  GOTO   4BA
03A8:  MOVLB  03
....................     else if (cwl == 0x0A || cwl == 0x61) 
03A9:  MOVF   48,W
03AA:  SUBLW  0A
03AB:  BTFSC  03.2
03AC:  GOTO   3B1
03AD:  MOVF   48,W
03AE:  SUBLW  61
03AF:  BTFSS  03.2
03B0:  GOTO   3B5
....................         cw_a(); 
03B1:  MOVLB  00
03B2:  CALL   2F2
03B3:  GOTO   4BA
03B4:  MOVLB  03
....................     else if (cwl == 0x0B || cwl == 0x62) 
03B5:  MOVF   48,W
03B6:  SUBLW  0B
03B7:  BTFSC  03.2
03B8:  GOTO   3BD
03B9:  MOVF   48,W
03BA:  SUBLW  62
03BB:  BTFSS  03.2
03BC:  GOTO   3C5
....................         cw_b(); 
*
03C3:  GOTO   4BA
03C4:  MOVLB  03
....................     else if (cwl == 0x0C || cwl == 0x63) 
03C5:  MOVF   48,W
03C6:  SUBLW  0C
03C7:  BTFSC  03.2
03C8:  GOTO   3CD
03C9:  MOVF   48,W
03CA:  SUBLW  63
03CB:  BTFSS  03.2
03CC:  GOTO   3D1
....................         cw_c(); 
03CD:  MOVLB  00
03CE:  CALL   2D5
03CF:  GOTO   4BA
03D0:  MOVLB  03
....................     else if (cwl == 0x0D || cwl == 0x64) 
03D1:  MOVF   48,W
03D2:  SUBLW  0D
03D3:  BTFSC  03.2
03D4:  GOTO   3D9
03D5:  MOVF   48,W
03D6:  SUBLW  64
03D7:  BTFSS  03.2
03D8:  GOTO   3DD
....................         cw_d(); 
03D9:  MOVLB  00
03DA:  CALL   2FB
03DB:  GOTO   4BA
03DC:  MOVLB  03
....................     else if (cwl == 0x0E || cwl == 0x65) 
03DD:  MOVF   48,W
03DE:  SUBLW  0E
03DF:  BTFSC  03.2
03E0:  GOTO   3E5
03E1:  MOVF   48,W
03E2:  SUBLW  65
03E3:  BTFSS  03.2
03E4:  GOTO   3E9
....................         cw_e(); 
03E5:  MOVLB  00
03E6:  CALL   2D2
03E7:  GOTO   4BA
03E8:  MOVLB  03
....................     else if (cwl == 0x0F || cwl == 0x66) 
03E9:  MOVF   48,W
03EA:  SUBLW  0F
03EB:  BTFSC  03.2
03EC:  GOTO   3F1
03ED:  MOVF   48,W
03EE:  SUBLW  66
03EF:  BTFSS  03.2
03F0:  GOTO   3F9
....................         cw_f(); 
*
03F7:  GOTO   4BA
03F8:  MOVLB  03
....................     //------------------------- 
....................  
....................     //normal ascii 
....................     else if (cwl == 0x67) 
03F9:  MOVF   48,W
03FA:  SUBLW  67
03FB:  BTFSS  03.2
03FC:  GOTO   404
....................         cw_g(); 
*
0402:  GOTO   4BA
0403:  MOVLB  03
....................     else if (cwl == 0x68) 
0404:  MOVF   48,W
0405:  SUBLW  68
0406:  BTFSS  03.2
0407:  GOTO   40C
....................         cw_h(); 
0408:  MOVLB  00
0409:  CALL   2DB
040A:  GOTO   4BA
040B:  MOVLB  03
....................     else if (cwl == 0x69) 
040C:  MOVF   48,W
040D:  SUBLW  69
040E:  BTFSS  03.2
040F:  GOTO   416
....................         cw_i(); 
*
0414:  GOTO   4BA
0415:  MOVLB  03
....................     else if (cwl == 0x6a) 
0416:  MOVF   48,W
0417:  SUBLW  6A
0418:  BTFSS  03.2
0419:  GOTO   422
....................         cw_j(); 
*
0420:  GOTO   4BA
0421:  MOVLB  03
....................     else if (cwl == 0x6b) 
0422:  MOVF   48,W
0423:  SUBLW  6B
0424:  BTFSS  03.2
0425:  GOTO   42A
....................         cw_k(); 
0426:  MOVLB  00
0427:  CALL   2BF
0428:  GOTO   4BA
0429:  MOVLB  03
....................     else if (cwl == 0x6c) 
042A:  MOVF   48,W
042B:  SUBLW  6C
042C:  BTFSS  03.2
042D:  GOTO   432
....................         cw_l(); 
042E:  MOVLB  00
042F:  CALL   2E1
0430:  GOTO   4BA
0431:  MOVLB  03
....................     else if (cwl == 0x6d) 
0432:  MOVF   48,W
0433:  SUBLW  6D
0434:  BTFSS  03.2
0435:  GOTO   43C
....................         cw_m(); 
*
043A:  GOTO   4BA
043B:  MOVLB  03
....................     else if (cwl == 0x6e) 
043C:  MOVF   48,W
043D:  SUBLW  6E
043E:  BTFSS  03.2
043F:  GOTO   446
....................         cw_n(); 
*
0444:  GOTO   4BA
0445:  MOVLB  03
....................     else if (cwl == 0x6f) 
0446:  MOVF   48,W
0447:  SUBLW  6F
0448:  BTFSS  03.2
0449:  GOTO   44E
....................         cw_o(); 
044A:  MOVLB  00
044B:  CALL   2E7
044C:  GOTO   4BA
044D:  MOVLB  03
....................     else if (cwl == 0x70) 
044E:  MOVF   48,W
044F:  SUBLW  70
0450:  BTFSS  03.2
0451:  GOTO   456
....................         cw_p(); 
0452:  MOVLB  00
0453:  CALL   2EC
0454:  GOTO   4BA
0455:  MOVLB  03
....................     else if (cwl == 0x71) 
0456:  MOVF   48,W
0457:  SUBLW  71
0458:  BTFSS  03.2
0459:  GOTO   462
....................         cw_q(); 
*
0460:  GOTO   4BA
0461:  MOVLB  03
....................     else if (cwl == 0x72) 
0462:  MOVF   48,W
0463:  SUBLW  72
0464:  BTFSS  03.2
0465:  GOTO   46A
....................         cw_r(); 
0466:  MOVLB  00
0467:  CALL   2F6
0468:  GOTO   4BA
0469:  MOVLB  03
....................     else if (cwl == 0x73) 
046A:  MOVF   48,W
046B:  SUBLW  73
046C:  BTFSS  03.2
046D:  GOTO   475
....................         cw_s(); 
*
0473:  GOTO   4BA
0474:  MOVLB  03
....................     else if (cwl == 0x74) 
0475:  MOVF   48,W
0476:  SUBLW  74
0477:  BTFSS  03.2
0478:  GOTO   47D
....................         cw_t(); 
0479:  MOVLB  00
047A:  CALL   2CF
047B:  GOTO   4BA
047C:  MOVLB  03
....................     else if (cwl == 0x75) 
047D:  MOVF   48,W
047E:  SUBLW  75
047F:  BTFSS  03.2
0480:  GOTO   485
....................         cw_u(); 
0481:  MOVLB  00
0482:  CALL   2CA
0483:  GOTO   4BA
0484:  MOVLB  03
....................     else if (cwl == 0x76) 
0485:  MOVF   48,W
0486:  SUBLW  76
0487:  BTFSS  03.2
0488:  GOTO   491
....................         cw_v(); 
*
048F:  GOTO   4BA
0490:  MOVLB  03
....................     else if (cwl == 0x77) 
0491:  MOVF   48,W
0492:  SUBLW  77
0493:  BTFSS  03.2
0494:  GOTO   49C
....................         cw_w(); 
*
049A:  GOTO   4BA
049B:  MOVLB  03
....................     else if (cwl == 0x78) 
049C:  MOVF   48,W
049D:  SUBLW  78
049E:  BTFSS  03.2
049F:  GOTO   4A8
....................         cw_x(); 
*
04A6:  GOTO   4BA
04A7:  MOVLB  03
....................     else if (cwl == 0x79) 
04A8:  MOVF   48,W
04A9:  SUBLW  79
04AA:  BTFSS  03.2
04AB:  GOTO   4B0
....................         cw_y(); 
04AC:  MOVLB  00
04AD:  CALL   2C4
04AE:  GOTO   4BA
04AF:  MOVLB  03
....................     else if (cwl == 0x7a) 
04B0:  MOVF   48,W
04B1:  SUBLW  7A
04B2:  BTFSS  03.2
04B3:  GOTO   4BB
....................         cw_z(); 
....................  
....................     return; 
*
04BB:  MOVLB  00
04BC:  RETURN
.................... } 
....................  
.................... //                                     [BIRDS3]__[CALL SIGN]__[CW_MSN]__ 
.................... void cw_pckt() 
.................... { 
....................     unsigned int8 hk[14] = {0}; 
04BD:  MOVLB  03
04BE:  CLRF   3A
04BF:  CLRF   3B
04C0:  CLRF   3C
04C1:  CLRF   3D
04C2:  CLRF   3E
04C3:  CLRF   3F
04C4:  CLRF   40
04C5:  CLRF   41
04C6:  CLRF   42
04C7:  CLRF   43
04C8:  CLRF   44
04C9:  CLRF   45
04CA:  CLRF   46
04CB:  CLRF   47
....................     delay_ms(1000); 
04CC:  MOVLW  04
04CD:  MOVWF  48
04CE:  MOVLW  FA
04CF:  MOVWF  68
04D0:  MOVLB  00
04D1:  CALL   079
04D2:  MOVLB  03
04D3:  DECFSZ 48,F
04D4:  GOTO   4CE
....................     call_sign(); 
....................  
....................     delay_ms(500); // KITSUNE part the CW 
*
04DD:  MOVLW  02
04DE:  MOVLB  03
04DF:  MOVWF  48
04E0:  MOVLW  FA
04E1:  MOVWF  68
04E2:  MOVLB  00
04E3:  CALL   079
04E4:  MOVLB  03
04E5:  DECFSZ 48,F
04E6:  GOTO   4E0
....................  
....................     cw_leopard(); 
....................     delay_ms(500); 
*
04EF:  MOVLW  02
04F0:  MOVLB  03
04F1:  MOVWF  48
04F2:  MOVLW  FA
04F3:  MOVWF  68
04F4:  MOVLB  00
04F5:  CALL   079
04F6:  MOVLB  03
04F7:  DECFSZ 48,F
04F8:  GOTO   4F2
....................  
....................     // cw_msn(); 
....................     // delay_ms(500); 
....................  
....................     if (main_to_com[1] == 0x50) { 
04F9:  MOVLB  02
04FA:  MOVF   6E,W
04FB:  SUBLW  50
04FC:  BTFSS  03.2
04FD:  GOTO   53E
....................         hk[0] = (main_to_com[2] & 0xF0) >> 4; 
04FE:  MOVF   6F,W
04FF:  ANDLW  F0
0500:  MOVWF  77
0501:  SWAPF  77,W
0502:  MOVLB  03
0503:  MOVWF  3A
0504:  MOVLW  0F
0505:  ANDWF  3A,F
....................         hk[1] = (main_to_com[2]) & 0x0F; 
0506:  MOVLB  02
0507:  MOVF   6F,W
0508:  ANDLW  0F
0509:  MOVLB  03
050A:  MOVWF  3B
....................  
....................         hk[2] = (main_to_com[3] & 0xF0) >> 4; 
050B:  MOVF   20,W
050C:  ANDLW  F0
050D:  MOVWF  77
050E:  SWAPF  77,W
050F:  MOVWF  3C
0510:  MOVLW  0F
0511:  ANDWF  3C,F
....................         hk[3] = (main_to_com[3]) & 0x0F; 
0512:  MOVF   20,W
0513:  ANDLW  0F
0514:  MOVWF  3D
....................  
....................         hk[4] = (main_to_com[4] & 0xF0) >> 4; 
0515:  MOVF   21,W
0516:  ANDLW  F0
0517:  MOVWF  77
0518:  SWAPF  77,W
0519:  MOVWF  3E
051A:  MOVLW  0F
051B:  ANDWF  3E,F
....................         hk[5] = (main_to_com[4]) & 0x0F; 
051C:  MOVF   21,W
051D:  ANDLW  0F
051E:  MOVWF  3F
....................  
....................         hk[6] = (main_to_com[5] & 0xF0) >> 4; 
051F:  MOVF   22,W
0520:  ANDLW  F0
0521:  MOVWF  77
0522:  SWAPF  77,W
0523:  MOVWF  40
0524:  MOVLW  0F
0525:  ANDWF  40,F
....................         hk[7] = (main_to_com[5]) & 0x0F; 
0526:  MOVF   22,W
0527:  ANDLW  0F
0528:  MOVWF  41
....................  
....................         hk[8] = (main_to_com[6] & 0xF0) >> 4; 
0529:  MOVF   23,W
052A:  ANDLW  F0
052B:  MOVWF  77
052C:  SWAPF  77,W
052D:  MOVWF  42
052E:  MOVLW  0F
052F:  ANDWF  42,F
....................         hk[9] = (main_to_com[6]) & 0x0F; 
0530:  MOVF   23,W
0531:  ANDLW  0F
0532:  MOVWF  43
....................  
....................         hk[10] = (main_to_com[7] & 0xF0) >> 4; 
0533:  MOVF   24,W
0534:  ANDLW  F0
0535:  MOVWF  77
0536:  SWAPF  77,W
0537:  MOVWF  44
0538:  MOVLW  0F
0539:  ANDWF  44,F
....................         hk[11] = (main_to_com[7]) & 0x0F; 
053A:  MOVF   24,W
053B:  ANDLW  0F
053C:  MOVWF  45
053D:  MOVLB  02
....................     } 
....................  
....................     cw_letter(hk[0]); 
053E:  MOVLB  03
053F:  MOVF   3A,W
0540:  MOVWF  48
0541:  MOVLB  00
0542:  CALL   300
....................     cw_letter(hk[1]); 
0543:  MOVLB  03
0544:  MOVF   3B,W
0545:  MOVWF  48
0546:  MOVLB  00
0547:  CALL   300
....................  
....................     cw_letter(hk[2]); 
0548:  MOVLB  03
0549:  MOVF   3C,W
054A:  MOVWF  48
054B:  MOVLB  00
054C:  CALL   300
....................     cw_letter(hk[3]); 
054D:  MOVLB  03
054E:  MOVF   3D,W
054F:  MOVWF  48
0550:  MOVLB  00
0551:  CALL   300
....................  
....................     cw_letter(hk[4]); 
0552:  MOVLB  03
0553:  MOVF   3E,W
0554:  MOVWF  48
0555:  MOVLB  00
0556:  CALL   300
....................     cw_letter(hk[5]); 
0557:  MOVLB  03
0558:  MOVF   3F,W
0559:  MOVWF  48
055A:  MOVLB  00
055B:  CALL   300
....................  
....................     cw_letter(hk[6]); 
055C:  MOVLB  03
055D:  MOVF   40,W
055E:  MOVWF  48
055F:  MOVLB  00
0560:  CALL   300
....................     cw_letter(hk[7]); 
0561:  MOVLB  03
0562:  MOVF   41,W
0563:  MOVWF  48
0564:  MOVLB  00
0565:  CALL   300
....................  
....................     cw_letter(hk[8]); 
0566:  MOVLB  03
0567:  MOVF   42,W
0568:  MOVWF  48
0569:  MOVLB  00
056A:  CALL   300
....................     cw_letter(hk[9]); 
056B:  MOVLB  03
056C:  MOVF   43,W
056D:  MOVWF  48
056E:  MOVLB  00
056F:  CALL   300
....................  
....................     cw_letter(hk[10]); 
0570:  MOVLB  03
0571:  MOVF   44,W
0572:  MOVWF  48
0573:  MOVLB  00
0574:  CALL   300
....................     cw_letter(hk[11]); 
0575:  MOVLB  03
0576:  MOVF   45,W
0577:  MOVWF  48
0578:  MOVLB  00
0579:  CALL   300
....................  
....................     return; 
057A:  RETURN
.................... } 
....................  
.................... //_________________________________________________________________________________________________ 
....................  
.................... #include <cmd_fun.c> 
.................... //from here the mission________________________________________________________ 
....................  
.................... //_______________________Packet_download_______________________________________ 
.................... void packet_download() 
*
0B99:  MOVF   38,W
0B9A:  MOVLB  03
0B9B:  MOVWF  3C
0B9C:  MOVLB  00
0B9D:  MOVF   39,W
0B9E:  MOVLB  03
0B9F:  MOVWF  3B
0BA0:  MOVLB  00
0BA1:  MOVF   3A,W
0BA2:  MOVLB  03
0BA3:  MOVWF  3A
0BA4:  MOVLB  00
0BA5:  MOVF   3B,W
0BA6:  MOVLB  03
0BA7:  MOVWF  39
0BA8:  MOVLB  00
0BA9:  MOVF   3C,W
0BAA:  MOVLB  03
0BAB:  MOVWF  40
0BAC:  MOVLB  00
0BAD:  MOVF   3D,W
0BAE:  MOVLB  03
0BAF:  MOVWF  3F
0BB0:  MOVLB  00
0BB1:  MOVF   3E,W
0BB2:  MOVLB  03
0BB3:  MOVWF  3E
0BB4:  MOVLB  00
0BB5:  MOVF   3F,W
0BB6:  MOVLB  03
0BB7:  MOVWF  3D
.................... { 
....................     unsigned int32 start_adress = make32(cmd_pckt[4], cmd_pckt[5], cmd_pckt[6], cmd_pckt[7]); 
....................     unsigned int32 pckt_num = make32(cmd_pckt[8], cmd_pckt[9], cmd_pckt[10], cmd_pckt[11]); 
....................  
....................     tx_on(); 
0BB8:  MOVLP  00
0BB9:  MOVLB  00
0BBA:  CALL   7B5
0BBB:  MOVLP  08
....................     delay_ms(1000); 
0BBC:  MOVLW  04
0BBD:  MOVLB  03
0BBE:  MOVWF  41
0BBF:  MOVLW  FA
0BC0:  MOVWF  68
0BC1:  MOVLP  00
0BC2:  MOVLB  00
0BC3:  CALL   079
0BC4:  MOVLP  08
0BC5:  MOVLB  03
0BC6:  DECFSZ 41,F
0BC7:  GOTO   3BF
....................     if (cmd_pckt[3] == 0x10) { 
0BC8:  MOVLB  00
0BC9:  MOVF   37,W
0BCA:  SUBLW  10
0BCB:  BTFSS  03.2
0BCC:  GOTO   3EA
....................         send_data_packets(start_adress, 0, pckt_num, 1); 
0BCD:  MOVLB  03
0BCE:  MOVF   3C,W
0BCF:  MOVWF  44
0BD0:  MOVF   3B,W
0BD1:  MOVWF  43
0BD2:  MOVF   3A,W
0BD3:  MOVWF  42
0BD4:  MOVF   39,W
0BD5:  MOVWF  41
0BD6:  CLRF   48
0BD7:  CLRF   47
0BD8:  CLRF   46
0BD9:  CLRF   45
0BDA:  MOVF   40,W
0BDB:  MOVWF  4C
0BDC:  MOVF   3F,W
0BDD:  MOVWF  4B
0BDE:  MOVF   3E,W
0BDF:  MOVWF  4A
0BE0:  MOVF   3D,W
0BE1:  MOVWF  49
0BE2:  MOVLW  01
0BE3:  MOVWF  4D
0BE4:  MOVWF  4E
0BE5:  MOVLB  00
0BE6:  CALL   18A
....................         rx_bfr_zero(); 
0BE7:  MOVLP  00
0BE8:  CALL   57B
0BE9:  MOVLP  08
....................     } 
....................  
....................     if (cmd_pckt[3] == 0x11) { 
0BEA:  MOVF   37,W
0BEB:  SUBLW  11
0BEC:  BTFSS  03.2
0BED:  GOTO   40B
....................         send_data_packets(start_adress, 0, pckt_num, 0); 
0BEE:  MOVLB  03
0BEF:  MOVF   3C,W
0BF0:  MOVWF  44
0BF1:  MOVF   3B,W
0BF2:  MOVWF  43
0BF3:  MOVF   3A,W
0BF4:  MOVWF  42
0BF5:  MOVF   39,W
0BF6:  MOVWF  41
0BF7:  CLRF   48
0BF8:  CLRF   47
0BF9:  CLRF   46
0BFA:  CLRF   45
0BFB:  MOVF   40,W
0BFC:  MOVWF  4C
0BFD:  MOVF   3F,W
0BFE:  MOVWF  4B
0BFF:  MOVF   3E,W
0C00:  MOVWF  4A
0C01:  MOVF   3D,W
0C02:  MOVWF  49
0C03:  CLRF   4D
0C04:  MOVLW  01
0C05:  MOVWF  4E
0C06:  MOVLB  00
0C07:  CALL   18A
....................         rx_bfr_zero(); 
0C08:  MOVLP  00
0C09:  CALL   57B
0C0A:  MOVLP  08
....................     } 
....................     delay_ms(500); 
0C0B:  MOVLW  02
0C0C:  MOVLB  03
0C0D:  MOVWF  41
0C0E:  MOVLW  FA
0C0F:  MOVWF  68
0C10:  MOVLP  00
0C11:  MOVLB  00
0C12:  CALL   079
0C13:  MOVLP  08
0C14:  MOVLB  03
0C15:  DECFSZ 41,F
0C16:  GOTO   40E
....................     rx_on(); 
0C17:  MOVLP  00
0C18:  MOVLB  00
0C19:  CALL   08F
0C1A:  MOVLP  08
0C1B:  RETURN
.................... } 
....................  
.................... //____________________Lenth_Download___________________________________________ 
.................... void length_download() 
0C1C:  MOVF   38,W
0C1D:  MOVLB  03
0C1E:  MOVWF  3C
0C1F:  MOVLB  00
0C20:  MOVF   39,W
0C21:  MOVLB  03
0C22:  MOVWF  3B
0C23:  MOVLB  00
0C24:  MOVF   3A,W
0C25:  MOVLB  03
0C26:  MOVWF  3A
0C27:  MOVLB  00
0C28:  MOVF   3B,W
0C29:  MOVLB  03
0C2A:  MOVWF  39
0C2B:  MOVLB  00
0C2C:  MOVF   3C,W
0C2D:  MOVLB  03
0C2E:  MOVWF  40
0C2F:  MOVLB  00
0C30:  MOVF   3D,W
0C31:  MOVLB  03
0C32:  MOVWF  3F
0C33:  MOVLB  00
0C34:  MOVF   3E,W
0C35:  MOVLB  03
0C36:  MOVWF  3E
0C37:  MOVLB  00
0C38:  MOVF   3F,W
0C39:  MOVLB  03
0C3A:  MOVWF  3D
.................... { 
....................     unsigned int32 start_adress = make32(cmd_pckt[4], cmd_pckt[5], cmd_pckt[6], cmd_pckt[7]); 
....................     unsigned int32 length = make32(cmd_pckt[8], cmd_pckt[9], cmd_pckt[10], cmd_pckt[11]); 
....................  
....................     tx_on(); 
0C3B:  MOVLP  00
0C3C:  MOVLB  00
0C3D:  CALL   7B5
0C3E:  MOVLP  08
....................     delay_ms(1000); 
0C3F:  MOVLW  04
0C40:  MOVLB  03
0C41:  MOVWF  41
0C42:  MOVLW  FA
0C43:  MOVWF  68
0C44:  MOVLP  00
0C45:  MOVLB  00
0C46:  CALL   079
0C47:  MOVLP  08
0C48:  MOVLB  03
0C49:  DECFSZ 41,F
0C4A:  GOTO   442
....................  
....................     if (cmd_pckt[3] == 0x13) { 
0C4B:  MOVLB  00
0C4C:  MOVF   37,W
0C4D:  SUBLW  13
0C4E:  BTFSS  03.2
0C4F:  GOTO   46D
....................         send_data_packets(start_adress, length, 0, 1); 
0C50:  MOVLB  03
0C51:  MOVF   3C,W
0C52:  MOVWF  44
0C53:  MOVF   3B,W
0C54:  MOVWF  43
0C55:  MOVF   3A,W
0C56:  MOVWF  42
0C57:  MOVF   39,W
0C58:  MOVWF  41
0C59:  MOVF   40,W
0C5A:  MOVWF  48
0C5B:  MOVF   3F,W
0C5C:  MOVWF  47
0C5D:  MOVF   3E,W
0C5E:  MOVWF  46
0C5F:  MOVF   3D,W
0C60:  MOVWF  45
0C61:  CLRF   4C
0C62:  CLRF   4B
0C63:  CLRF   4A
0C64:  CLRF   49
0C65:  MOVLW  01
0C66:  MOVWF  4D
0C67:  MOVWF  4E
0C68:  MOVLB  00
0C69:  CALL   18A
....................         rx_bfr_zero(); 
0C6A:  MOVLP  00
0C6B:  CALL   57B
0C6C:  MOVLP  08
....................     } 
....................  
....................     if (cmd_pckt[3] == 0x14) { 
0C6D:  MOVF   37,W
0C6E:  SUBLW  14
0C6F:  BTFSS  03.2
0C70:  GOTO   48E
....................         send_data_packets(start_adress, length, 0, 0); 
0C71:  MOVLB  03
0C72:  MOVF   3C,W
0C73:  MOVWF  44
0C74:  MOVF   3B,W
0C75:  MOVWF  43
0C76:  MOVF   3A,W
0C77:  MOVWF  42
0C78:  MOVF   39,W
0C79:  MOVWF  41
0C7A:  MOVF   40,W
0C7B:  MOVWF  48
0C7C:  MOVF   3F,W
0C7D:  MOVWF  47
0C7E:  MOVF   3E,W
0C7F:  MOVWF  46
0C80:  MOVF   3D,W
0C81:  MOVWF  45
0C82:  CLRF   4C
0C83:  CLRF   4B
0C84:  CLRF   4A
0C85:  CLRF   49
0C86:  CLRF   4D
0C87:  MOVLW  01
0C88:  MOVWF  4E
0C89:  MOVLB  00
0C8A:  CALL   18A
....................         rx_bfr_zero(); 
0C8B:  MOVLP  00
0C8C:  CALL   57B
0C8D:  MOVLP  08
....................     } 
....................  
....................     delay_ms(500); 
0C8E:  MOVLW  02
0C8F:  MOVLB  03
0C90:  MOVWF  41
0C91:  MOVLW  FA
0C92:  MOVWF  68
0C93:  MOVLP  00
0C94:  MOVLB  00
0C95:  CALL   079
0C96:  MOVLP  08
0C97:  MOVLB  03
0C98:  DECFSZ 41,F
0C99:  GOTO   491
....................     rx_on(); 
0C9A:  MOVLP  00
0C9B:  MOVLB  00
0C9C:  CALL   08F
0C9D:  MOVLP  08
0C9E:  RETURN
.................... } 
....................  
.................... //____________________One_packt_download_______________________________________ 
....................  
.................... void one_pckt_download() 
.................... { 
....................     tx_on(); 
*
0E45:  MOVLP  00
0E46:  CALL   7B5
0E47:  MOVLP  08
....................     delay_ms(1000); 
0E48:  MOVLW  04
0E49:  MOVLB  03
0E4A:  MOVWF  39
0E4B:  MOVLW  FA
0E4C:  MOVWF  68
0E4D:  MOVLP  00
0E4E:  MOVLB  00
0E4F:  CALL   079
0E50:  MOVLP  08
0E51:  MOVLB  03
0E52:  DECFSZ 39,F
0E53:  GOTO   64B
....................  
....................     if (cmd_pckt[3] == 0x15) { 
0E54:  MOVLB  00
0E55:  MOVF   37,W
0E56:  SUBLW  15
0E57:  BTFSS  03.2
0E58:  GOTO   661
....................         send_a_packet(1); 
0E59:  MOVLW  01
0E5A:  MOVLB  03
0E5B:  MOVWF  39
0E5C:  MOVLB  00
0E5D:  CALL   49F
....................         rx_bfr_zero(); 
0E5E:  MOVLP  00
0E5F:  CALL   57B
0E60:  MOVLP  08
....................     } 
....................  
....................     if (cmd_pckt[3] == 0x16) { 
0E61:  MOVF   37,W
0E62:  SUBLW  16
0E63:  BTFSS  03.2
0E64:  GOTO   66C
....................         send_a_packet(0); 
0E65:  MOVLB  03
0E66:  CLRF   39
0E67:  MOVLB  00
0E68:  CALL   49F
....................         rx_bfr_zero(); 
0E69:  MOVLP  00
0E6A:  CALL   57B
0E6B:  MOVLP  08
....................     } 
....................  
....................     delay_ms(500); 
0E6C:  MOVLW  02
0E6D:  MOVLB  03
0E6E:  MOVWF  39
0E6F:  MOVLW  FA
0E70:  MOVWF  68
0E71:  MOVLP  00
0E72:  MOVLB  00
0E73:  CALL   079
0E74:  MOVLP  08
0E75:  MOVLB  03
0E76:  DECFSZ 39,F
0E77:  GOTO   66F
....................     rx_on(); 
0E78:  MOVLP  00
0E79:  MOVLB  00
0E7A:  CALL   08F
0E7B:  MOVLP  08
0E7C:  RETURN
.................... } 
....................  
.................... //__________________________SET of packet download________________________________________ 
.................... void set_of_packets_download() 
*
155C:  MOVF   38,W
155D:  MOVLB  03
155E:  MOVWF  3C
155F:  MOVLB  00
1560:  MOVF   39,W
1561:  MOVLB  03
1562:  MOVWF  3B
1563:  MOVLB  00
1564:  MOVF   3A,W
1565:  MOVLB  03
1566:  MOVWF  3A
1567:  MOVLB  00
1568:  MOVF   3B,W
1569:  MOVLB  03
156A:  MOVWF  39
.................... { 
....................     unsigned int32 start_adress = make32(cmd_pckt[4], cmd_pckt[5], cmd_pckt[6], cmd_pckt[7]); 
....................  
....................     tx_on(); 
156B:  MOVLP  00
156C:  MOVLB  00
156D:  CALL   7B5
156E:  MOVLP  10
....................     delay_ms(1000); 
156F:  MOVLW  04
1570:  MOVLB  03
1571:  MOVWF  3D
1572:  MOVLW  FA
1573:  MOVWF  68
1574:  MOVLP  00
1575:  MOVLB  00
1576:  CALL   079
1577:  MOVLP  10
1578:  MOVLB  03
1579:  DECFSZ 3D,F
157A:  GOTO   572
....................     if (cmd_pckt[3] == 0x40) { 
157B:  MOVLB  00
157C:  MOVF   37,W
157D:  SUBLW  40
157E:  BTFSS  03.2
157F:  GOTO   599
....................         pckt_set_send(start_adress, cmd_pckt[11], cmd_pckt[10], 1); 
1580:  MOVLB  03
1581:  MOVF   3C,W
1582:  MOVWF  41
1583:  MOVF   3B,W
1584:  MOVWF  40
1585:  MOVF   3A,W
1586:  MOVWF  3F
1587:  MOVF   39,W
1588:  MOVWF  3E
1589:  MOVLB  00
158A:  MOVF   3F,W
158B:  MOVLB  03
158C:  MOVWF  42
158D:  MOVLB  00
158E:  MOVF   3E,W
158F:  MOVLB  03
1590:  MOVWF  43
1591:  MOVLW  01
1592:  MOVWF  44
1593:  MOVLB  00
1594:  CALL   35B
....................         rx_bfr_zero(); 
1595:  MOVLP  00
1596:  CALL   57B
1597:  MOVLP  10
....................     } 
1598:  GOTO   5B4
....................  
....................     else if (cmd_pckt[3] == 0x41) { 
1599:  MOVF   37,W
159A:  SUBLW  41
159B:  BTFSS  03.2
159C:  GOTO   5B4
....................         pckt_set_send(start_adress, cmd_pckt[11], cmd_pckt[10], 0); 
159D:  MOVLB  03
159E:  MOVF   3C,W
159F:  MOVWF  41
15A0:  MOVF   3B,W
15A1:  MOVWF  40
15A2:  MOVF   3A,W
15A3:  MOVWF  3F
15A4:  MOVF   39,W
15A5:  MOVWF  3E
15A6:  MOVLB  00
15A7:  MOVF   3F,W
15A8:  MOVLB  03
15A9:  MOVWF  42
15AA:  MOVLB  00
15AB:  MOVF   3E,W
15AC:  MOVLB  03
15AD:  MOVWF  43
15AE:  CLRF   44
15AF:  MOVLB  00
15B0:  CALL   35B
....................         rx_bfr_zero(); 
15B1:  MOVLP  00
15B2:  CALL   57B
15B3:  MOVLP  10
....................     } 
....................  
....................     delay_ms(500); 
15B4:  MOVLW  02
15B5:  MOVLB  03
15B6:  MOVWF  3D
15B7:  MOVLW  FA
15B8:  MOVWF  68
15B9:  MOVLP  00
15BA:  MOVLB  00
15BB:  CALL   079
15BC:  MOVLP  10
15BD:  MOVLB  03
15BE:  DECFSZ 3D,F
15BF:  GOTO   5B7
....................     rx_on(); 
15C0:  MOVLP  00
15C1:  MOVLB  00
15C2:  CALL   08F
15C3:  MOVLP  10
15C4:  RETURN
.................... } 
....................  
.................... //set of acess downpppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp 
.................... void set_of_packets_download_with_access() 
*
1601:  MOVF   38,W
1602:  MOVLB  03
1603:  MOVWF  3C
1604:  MOVLB  00
1605:  MOVF   39,W
1606:  MOVLB  03
1607:  MOVWF  3B
1608:  MOVLB  00
1609:  MOVF   3A,W
160A:  MOVLB  03
160B:  MOVWF  3A
160C:  MOVLB  00
160D:  MOVF   3B,W
160E:  MOVLB  03
160F:  MOVWF  39
.................... { 
....................     unsigned int32 start_adress = make32(cmd_pckt[4], cmd_pckt[5], cmd_pckt[6], cmd_pckt[7]); 
....................     for (int try = 0; try < 5; try ++) { 
1610:  CLRF   3D
1611:  MOVF   3D,W
1612:  SUBLW  04
1613:  BTFSS  03.0
1614:  GOTO   629
....................         communicate_with_main_pic(2, cmd_pckt[8]); //getting accees 
1615:  MOVLW  02
1616:  MOVWF  41
1617:  MOVLB  00
1618:  MOVF   3C,W
1619:  MOVLB  03
161A:  MOVWF  42
161B:  MOVLP  00
161C:  MOVLB  00
161D:  CALL   164
161E:  MOVLP  10
....................         wait_for_main_pic_response(); 
161F:  MOVLP  00
1620:  CALL   224
1621:  MOVLP  10
....................         if (main_to_com[23] == 0x0C) 
1622:  MOVLB  03
1623:  MOVF   34,W
1624:  SUBLW  0C
1625:  BTFSC  03.2
....................             break; 
1626:  GOTO   629
1627:  INCF   3D,F
1628:  GOTO   611
....................     } 
....................  
....................     tx_on(); 
1629:  MOVLP  00
162A:  MOVLB  00
162B:  CALL   7B5
162C:  MOVLP  10
....................     delay_ms(1000); 
162D:  MOVLW  04
162E:  MOVLB  03
162F:  MOVWF  3E
1630:  MOVLW  FA
1631:  MOVWF  68
1632:  MOVLP  00
1633:  MOVLB  00
1634:  CALL   079
1635:  MOVLP  10
1636:  MOVLB  03
1637:  DECFSZ 3E,F
1638:  GOTO   630
....................  
....................     pckt_set_send(start_adress, cmd_pckt[11], cmd_pckt[10], 0); 
1639:  MOVF   3C,W
163A:  MOVWF  41
163B:  MOVF   3B,W
163C:  MOVWF  40
163D:  MOVF   3A,W
163E:  MOVWF  3F
163F:  MOVF   39,W
1640:  MOVWF  3E
1641:  MOVLB  00
1642:  MOVF   3F,W
1643:  MOVLB  03
1644:  MOVWF  42
1645:  MOVLB  00
1646:  MOVF   3E,W
1647:  MOVLB  03
1648:  MOVWF  43
1649:  CLRF   44
164A:  MOVLB  00
164B:  CALL   35B
....................     rx_bfr_zero(); 
164C:  MOVLP  00
164D:  CALL   57B
164E:  MOVLP  10
....................  
....................     delay_ms(500); 
164F:  MOVLW  02
1650:  MOVLB  03
1651:  MOVWF  3E
1652:  MOVLW  FA
1653:  MOVWF  68
1654:  MOVLP  00
1655:  MOVLB  00
1656:  CALL   079
1657:  MOVLP  10
1658:  MOVLB  03
1659:  DECFSZ 3E,F
165A:  GOTO   652
....................     rx_on(); 
165B:  MOVLP  00
165C:  MOVLB  00
165D:  CALL   08F
165E:  MOVLP  10
165F:  MOVLP  10
1660:  GOTO   7E2 (RETURN)
.................... } 
....................  
.................... //________________________FM_data_copy_________________________________________ 
.................... void fm_copy() 
.................... { 
....................     send_success_ack(); 
*
0FAF:  MOVLP  00
0FB0:  CALL   6E1
0FB1:  MOVLP  08
....................     unsigned int32 start_adress = make32(cmd_pckt[4], cmd_pckt[5], cmd_pckt[6], cmd_pckt[7]); 
....................     unsigned int32 length = make32(cmd_pckt[8], cmd_pckt[9], cmd_pckt[10], cmd_pckt[11]); 
0FB2:  MOVF   38,W
0FB3:  MOVLB  03
0FB4:  MOVWF  3C
0FB5:  MOVLB  00
0FB6:  MOVF   39,W
0FB7:  MOVLB  03
0FB8:  MOVWF  3B
0FB9:  MOVLB  00
0FBA:  MOVF   3A,W
0FBB:  MOVLB  03
0FBC:  MOVWF  3A
0FBD:  MOVLB  00
0FBE:  MOVF   3B,W
0FBF:  MOVLB  03
0FC0:  MOVWF  39
0FC1:  MOVLB  00
0FC2:  MOVF   3C,W
0FC3:  MOVLB  03
0FC4:  MOVWF  40
0FC5:  MOVLB  00
0FC6:  MOVF   3D,W
0FC7:  MOVLB  03
0FC8:  MOVWF  3F
0FC9:  MOVLB  00
0FCA:  MOVF   3E,W
0FCB:  MOVLB  03
0FCC:  MOVWF  3E
0FCD:  MOVLB  00
0FCE:  MOVF   3F,W
0FCF:  MOVLB  03
0FD0:  MOVWF  3D
....................  
....................     flash_copy(start_adress, length); 
0FD1:  MOVF   3C,W
0FD2:  MOVWF  45
0FD3:  MOVF   3B,W
0FD4:  MOVWF  44
0FD5:  MOVF   3A,W
0FD6:  MOVWF  43
0FD7:  MOVF   39,W
0FD8:  MOVWF  42
0FD9:  MOVF   40,W
0FDA:  MOVWF  49
0FDB:  MOVF   3F,W
0FDC:  MOVWF  48
0FDD:  MOVF   3E,W
0FDE:  MOVWF  47
0FDF:  MOVF   3D,W
0FE0:  MOVWF  46
0FE1:  MOVLB  00
0FE2:  CALL   746
....................  
....................     send_success_ack(); 
0FE3:  MOVLP  00
0FE4:  CALL   6E1
0FE5:  MOVLP  08
....................     rx_bfr_zero(); 
0FE6:  MOVLP  00
0FE7:  CALL   57B
0FE8:  MOVLP  08
....................  
....................     rx_on(); 
0FE9:  MOVLP  00
0FEA:  CALL   08F
0FEB:  MOVLP  08
0FEC:  MOVLP  10
0FED:  GOTO   7E2 (RETURN)
.................... } 
....................  
.................... //________________________Copy With Access_________________________________________________ 
.................... void fm_copy_with_access() 
*
10BB:  MOVF   38,W
10BC:  MOVLB  03
10BD:  MOVWF  3C
10BE:  MOVLB  00
10BF:  MOVF   39,W
10C0:  MOVLB  03
10C1:  MOVWF  3B
10C2:  MOVLB  00
10C3:  MOVF   3A,W
10C4:  MOVLB  03
10C5:  MOVWF  3A
10C6:  MOVLB  00
10C7:  MOVF   3B,W
10C8:  MOVLB  03
10C9:  MOVWF  39
10CA:  MOVLB  00
10CB:  MOVF   3E,W
10CC:  MOVLB  03
10CD:  MOVWF  3E
10CE:  MOVLB  00
10CF:  MOVF   3F,W
10D0:  MOVLB  03
10D1:  MOVWF  3D
.................... { 
....................     unsigned int32 start_adress = make32(cmd_pckt[4], cmd_pckt[5], cmd_pckt[6], cmd_pckt[7]); 
....................     unsigned int16 packet = make16(cmd_pckt[10], cmd_pckt[11]); //as 256byte packets 
....................  
....................     for (int try = 0; try < 5; try ++) { 
10D2:  CLRF   3F
10D3:  MOVF   3F,W
10D4:  SUBLW  04
10D5:  BTFSS  03.0
10D6:  GOTO   0EB
....................         communicate_with_main_pic(2, cmd_pckt[8]); //getting accees 
10D7:  MOVLW  02
10D8:  MOVWF  41
10D9:  MOVLB  00
10DA:  MOVF   3C,W
10DB:  MOVLB  03
10DC:  MOVWF  42
10DD:  MOVLP  00
10DE:  MOVLB  00
10DF:  CALL   164
10E0:  MOVLP  10
....................         wait_for_main_pic_response(); 
10E1:  MOVLP  00
10E2:  CALL   224
10E3:  MOVLP  10
....................         if (main_to_com[23] == 0x0C) 
10E4:  MOVLB  03
10E5:  MOVF   34,W
10E6:  SUBLW  0C
10E7:  BTFSC  03.2
....................             break; 
10E8:  GOTO   0EB
10E9:  INCF   3F,F
10EA:  GOTO   0D3
....................     } 
....................  
....................     if (main_to_com[12] == 0x66) { 
10EB:  MOVF   29,W
10EC:  SUBLW  66
10ED:  BTFSS  03.2
10EE:  GOTO   119
....................         send_success_ack(); // success of access 
10EF:  MOVLP  00
10F0:  MOVLB  00
10F1:  CALL   6E1
10F2:  MOVLP  10
....................         delay_ms(1000); 
10F3:  MOVLW  04
10F4:  MOVLB  03
10F5:  MOVWF  40
10F6:  MOVLW  FA
10F7:  MOVWF  68
10F8:  MOVLP  00
10F9:  MOVLB  00
10FA:  CALL   079
10FB:  MOVLP  10
10FC:  MOVLB  03
10FD:  DECFSZ 40,F
10FE:  GOTO   0F6
....................         flash_copy(start_adress, packet * 256); 
10FF:  MOVF   3D,W
1100:  MOVWF  41
1101:  CLRF   40
1102:  MOVF   3C,W
1103:  MOVWF  45
1104:  MOVF   3B,W
1105:  MOVWF  44
1106:  MOVF   3A,W
1107:  MOVWF  43
1108:  MOVF   39,W
1109:  MOVWF  42
110A:  CLRF   49
110B:  CLRF   48
110C:  MOVF   3D,W
110D:  MOVWF  47
110E:  MOVF   40,W
110F:  MOVWF  46
1110:  MOVLP  08
1111:  MOVLB  00
1112:  CALL   746
1113:  MOVLP  10
....................         send_success_ack(); // success of copieng 
1114:  MOVLP  00
1115:  CALL   6E1
1116:  MOVLP  10
....................     } 
1117:  GOTO   11D
1118:  MOVLB  03
....................  
....................     else 
....................         send_not_success_ack(); 
1119:  MOVLP  08
111A:  MOVLB  00
111B:  CALL   000
111C:  MOVLP  10
....................  
....................     rx_bfr_zero(); 
111D:  MOVLP  00
111E:  CALL   57B
111F:  MOVLP  10
....................     rx_on(); 
1120:  MOVLP  00
1121:  CALL   08F
1122:  MOVLP  10
1123:  MOVLP  10
1124:  GOTO   7E2 (RETURN)
.................... } 
....................  
.................... //________________________Copy With Access_________________________________________________ 
.................... void fm_copy_and_data_down_from_cfm() 
1125:  MOVF   38,W
1126:  MOVLB  03
1127:  MOVWF  3C
1128:  MOVLB  00
1129:  MOVF   39,W
112A:  MOVLB  03
112B:  MOVWF  3B
112C:  MOVLB  00
112D:  MOVF   3A,W
112E:  MOVLB  03
112F:  MOVWF  3A
1130:  MOVLB  00
1131:  MOVF   3B,W
1132:  MOVLB  03
1133:  MOVWF  39
1134:  MOVLB  00
1135:  MOVF   3E,W
1136:  MOVLB  03
1137:  MOVWF  3E
1138:  MOVLB  00
1139:  MOVF   3F,W
113A:  MOVLB  03
113B:  MOVWF  3D
.................... { 
....................     unsigned int32 start_adress = make32(cmd_pckt[4], cmd_pckt[5], cmd_pckt[6], cmd_pckt[7]); 
....................     unsigned int16 packet = make16(cmd_pckt[10], cmd_pckt[11]); //as 81byte packets 
....................  
....................     for (int try = 0; try < 5; try ++) { 
113C:  CLRF   3F
113D:  MOVF   3F,W
113E:  SUBLW  04
113F:  BTFSS  03.0
1140:  GOTO   155
....................         communicate_with_main_pic(2, cmd_pckt[8]); //getting accees for 1 min 
1141:  MOVLW  02
1142:  MOVWF  41
1143:  MOVLB  00
1144:  MOVF   3C,W
1145:  MOVLB  03
1146:  MOVWF  42
1147:  MOVLP  00
1148:  MOVLB  00
1149:  CALL   164
114A:  MOVLP  10
....................         wait_for_main_pic_response(); 
114B:  MOVLP  00
114C:  CALL   224
114D:  MOVLP  10
....................         if (main_to_com[23] == 0x0C) 
114E:  MOVLB  03
114F:  MOVF   34,W
1150:  SUBLW  0C
1151:  BTFSC  03.2
....................             break; 
1152:  GOTO   155
1153:  INCF   3F,F
1154:  GOTO   13D
....................     } 
....................  
....................     if (main_to_com[12] == 0x66) { 
1155:  MOVF   29,W
1156:  SUBLW  66
1157:  BTFSS  03.2
1158:  GOTO   1C4
....................         flash_copy(start_adress, packet * 81); 
1159:  MOVF   3E,W
115A:  MOVWF  41
115B:  MOVF   3D,W
115C:  MOVWF  40
115D:  CLRF   43
115E:  MOVLW  51
115F:  MOVWF  42
*
1174:  MOVF   79,W
1175:  MOVWF  41
1176:  MOVF   78,W
1177:  MOVWF  40
1178:  MOVF   3C,W
1179:  MOVWF  45
117A:  MOVF   3B,W
117B:  MOVWF  44
117C:  MOVF   3A,W
117D:  MOVWF  43
117E:  MOVF   39,W
117F:  MOVWF  42
1180:  CLRF   49
1181:  CLRF   48
1182:  MOVF   41,W
1183:  MOVWF  47
1184:  MOVF   40,W
1185:  MOVWF  46
1186:  MOVLP  08
1187:  MOVLB  00
1188:  CALL   746
1189:  MOVLP  10
....................  
....................         tx_on(); 
118A:  MOVLP  00
118B:  CALL   7B5
118C:  MOVLP  10
....................         delay_ms(1000); 
118D:  MOVLW  04
118E:  MOVLB  03
118F:  MOVWF  40
1190:  MOVLW  FA
1191:  MOVWF  68
1192:  MOVLP  00
1193:  MOVLB  00
1194:  CALL   079
1195:  MOVLP  10
1196:  MOVLB  03
1197:  DECFSZ 40,F
1198:  GOTO   190
....................         send_data_packets(start_adress, 0, packet, 1); 
1199:  MOVF   3C,W
119A:  MOVWF  44
119B:  MOVF   3B,W
119C:  MOVWF  43
119D:  MOVF   3A,W
119E:  MOVWF  42
119F:  MOVF   39,W
11A0:  MOVWF  41
11A1:  CLRF   48
11A2:  CLRF   47
11A3:  CLRF   46
11A4:  CLRF   45
11A5:  CLRF   4C
11A6:  CLRF   4B
11A7:  MOVF   3E,W
11A8:  MOVWF  4A
11A9:  MOVF   3D,W
11AA:  MOVWF  49
11AB:  MOVLW  01
11AC:  MOVWF  4D
11AD:  MOVWF  4E
11AE:  MOVLP  08
11AF:  MOVLB  00
11B0:  CALL   18A
11B1:  MOVLP  10
....................         delay_ms(500); 
11B2:  MOVLW  02
11B3:  MOVLB  03
11B4:  MOVWF  40
11B5:  MOVLW  FA
11B6:  MOVWF  68
11B7:  MOVLP  00
11B8:  MOVLB  00
11B9:  CALL   079
11BA:  MOVLP  10
11BB:  MOVLB  03
11BC:  DECFSZ 40,F
11BD:  GOTO   1B5
....................         rx_on(); 
11BE:  MOVLP  00
11BF:  MOVLB  00
11C0:  CALL   08F
11C1:  MOVLP  10
....................     } 
11C2:  GOTO   1E8
11C3:  MOVLB  03
....................  
....................     else { 
....................         tx_on(); 
11C4:  MOVLP  00
11C5:  MOVLB  00
11C6:  CALL   7B5
11C7:  MOVLP  10
....................         delay_ms(1000); 
11C8:  MOVLW  04
11C9:  MOVLB  03
11CA:  MOVWF  40
11CB:  MOVLW  FA
11CC:  MOVWF  68
11CD:  MOVLP  00
11CE:  MOVLB  00
11CF:  CALL   079
11D0:  MOVLP  10
11D1:  MOVLB  03
11D2:  DECFSZ 40,F
11D3:  GOTO   1CB
....................         send_not_success_ack(); 
11D4:  MOVLP  08
11D5:  MOVLB  00
11D6:  CALL   000
11D7:  MOVLP  10
....................         delay_ms(500); 
11D8:  MOVLW  02
11D9:  MOVLB  03
11DA:  MOVWF  40
11DB:  MOVLW  FA
11DC:  MOVWF  68
11DD:  MOVLP  00
11DE:  MOVLB  00
11DF:  CALL   079
11E0:  MOVLP  10
11E1:  MOVLB  03
11E2:  DECFSZ 40,F
11E3:  GOTO   1DB
....................         rx_on(); 
11E4:  MOVLP  00
11E5:  MOVLB  00
11E6:  CALL   08F
11E7:  MOVLP  10
....................     } 
....................  
....................     rx_bfr_zero(); 
11E8:  MOVLP  00
11E9:  CALL   57B
11EA:  MOVLP  10
11EB:  MOVLP  10
11EC:  GOTO   7E2 (RETURN)
.................... } 
....................  
.................... //999999999999999999999999999999999999999999999999999999999999999999999999999999999999999 
.................... //________________________Copy With Access_________________________________________________ 
.................... void data_down_from_sfm_with_access() 
*
12D8:  MOVF   38,W
12D9:  MOVLB  03
12DA:  MOVWF  3C
12DB:  MOVLB  00
12DC:  MOVF   39,W
12DD:  MOVLB  03
12DE:  MOVWF  3B
12DF:  MOVLB  00
12E0:  MOVF   3A,W
12E1:  MOVLB  03
12E2:  MOVWF  3A
12E3:  MOVLB  00
12E4:  MOVF   3B,W
12E5:  MOVLB  03
12E6:  MOVWF  39
12E7:  MOVLB  00
12E8:  MOVF   3E,W
12E9:  MOVLB  03
12EA:  MOVWF  3E
12EB:  MOVLB  00
12EC:  MOVF   3F,W
12ED:  MOVLB  03
12EE:  MOVWF  3D
12EF:  MOVLB  00
12F0:  MOVF   3D,W
12F1:  MOVLB  03
12F2:  MOVWF  3F
.................... { 
....................     unsigned int32 start_adress = make32(cmd_pckt[4], cmd_pckt[5], cmd_pckt[6], cmd_pckt[7]); 
....................     unsigned int16 packet = make16(cmd_pckt[10], cmd_pckt[11]); //as 81byte packets 
....................     unsigned int8 skip = cmd_pckt[9]; 
....................  
....................     for (int try = 0; try < 5; try ++) { 
12F3:  CLRF   40
12F4:  MOVF   40,W
12F5:  SUBLW  04
12F6:  BTFSS  03.0
12F7:  GOTO   30C
....................         communicate_with_main_pic(2, cmd_pckt[8]); //getting accees 
12F8:  MOVLW  02
12F9:  MOVWF  41
12FA:  MOVLB  00
12FB:  MOVF   3C,W
12FC:  MOVLB  03
12FD:  MOVWF  42
12FE:  MOVLP  00
12FF:  MOVLB  00
1300:  CALL   164
1301:  MOVLP  10
....................         wait_for_main_pic_response(); 
1302:  MOVLP  00
1303:  CALL   224
1304:  MOVLP  10
....................         if (main_to_com[23] == 0x0C) 
1305:  MOVLB  03
1306:  MOVF   34,W
1307:  SUBLW  0C
1308:  BTFSC  03.2
....................             break; 
1309:  GOTO   30C
130A:  INCF   40,F
130B:  GOTO   2F4
....................     } 
....................  
....................     delay_ms(2000); 
130C:  MOVLW  08
130D:  MOVWF  41
130E:  MOVLW  FA
130F:  MOVWF  68
1310:  MOVLP  00
1311:  MOVLB  00
1312:  CALL   079
1313:  MOVLP  10
1314:  MOVLB  03
1315:  DECFSZ 41,F
1316:  GOTO   30E
....................  
....................     if (main_to_com[12] == 0x66) { 
1317:  MOVF   29,W
1318:  SUBLW  66
1319:  BTFSS  03.2
131A:  GOTO   355
....................  
....................         tx_on(); 
131B:  MOVLP  00
131C:  MOVLB  00
131D:  CALL   7B5
131E:  MOVLP  10
....................         delay_ms(1000); 
131F:  MOVLW  04
1320:  MOVLB  03
1321:  MOVWF  41
1322:  MOVLW  FA
1323:  MOVWF  68
1324:  MOVLP  00
1325:  MOVLB  00
1326:  CALL   079
1327:  MOVLP  10
1328:  MOVLB  03
1329:  DECFSZ 41,F
132A:  GOTO   322
....................         send_data_packets(start_adress, 0, packet, 0, skip); 
132B:  MOVF   3C,W
132C:  MOVWF  44
132D:  MOVF   3B,W
132E:  MOVWF  43
132F:  MOVF   3A,W
1330:  MOVWF  42
1331:  MOVF   39,W
1332:  MOVWF  41
1333:  CLRF   48
1334:  CLRF   47
1335:  CLRF   46
1336:  CLRF   45
1337:  CLRF   4C
1338:  CLRF   4B
1339:  MOVF   3E,W
133A:  MOVWF  4A
133B:  MOVF   3D,W
133C:  MOVWF  49
133D:  CLRF   4D
133E:  MOVF   3F,W
133F:  MOVWF  4E
1340:  MOVLP  08
1341:  MOVLB  00
1342:  CALL   18A
1343:  MOVLP  10
....................         delay_ms(500); 
1344:  MOVLW  02
1345:  MOVLB  03
1346:  MOVWF  41
1347:  MOVLW  FA
1348:  MOVWF  68
1349:  MOVLP  00
134A:  MOVLB  00
134B:  CALL   079
134C:  MOVLP  10
134D:  MOVLB  03
134E:  DECFSZ 41,F
134F:  GOTO   347
....................         rx_on(); 
1350:  MOVLP  00
1351:  MOVLB  00
1352:  CALL   08F
1353:  MOVLP  10
1354:  MOVLB  03
....................     } 
....................  
....................     rx_bfr_zero(); 
1355:  MOVLP  00
1356:  MOVLB  00
1357:  CALL   57B
1358:  MOVLP  10
1359:  MOVLP  10
135A:  GOTO   7E2 (RETURN)
.................... } 
....................  
.................... void sync() 
*
0790:  MOVF   3F,W
0791:  MOVLB  03
0792:  MOVWF  39
.................... { 
....................     unsigned int8 delay = cmd_pckt[11]; 
....................  
....................     if (delay <= 120) { 
0793:  MOVF   39,W
0794:  SUBLW  78
0795:  BTFSS  03.0
0796:  GOTO   7AC
....................         send_success_ack(); 
0797:  MOVLB  00
0798:  CALL   6E1
....................         for (int i = 0; i < delay; i++) { 
0799:  MOVLB  03
079A:  CLRF   3A
079B:  MOVF   39,W
079C:  SUBWF  3A,W
079D:  BTFSC  03.0
079E:  GOTO   7AB
....................             delay_ms(5000); 
079F:  MOVLW  14
07A0:  MOVWF  3B
07A1:  MOVLW  FA
07A2:  MOVWF  68
07A3:  MOVLB  00
07A4:  CALL   079
07A5:  MOVLB  03
07A6:  DECFSZ 3B,F
07A7:  GOTO   7A1
....................             restart_wdt(); //***********************//} 
07A8:  CLRWDT
07A9:  INCF   3A,F
07AA:  GOTO   79B
....................         } 
....................     } 
07AB:  GOTO   7B1
....................  
....................     else { 
....................         send_not_success_ack(); 
07AC:  MOVLP  08
07AD:  MOVLB  00
07AE:  CALL   000
07AF:  MOVLP  00
07B0:  MOVLB  03
....................     } 
....................  
....................     rx_bfr_zero(); 
07B1:  MOVLB  00
07B2:  CALL   57B
07B3:  MOVLP  10
07B4:  GOTO   76D (RETURN)
.................... } 
....................  
.................... // ___________________CMD to main PIC___________________________________________________ 
.................... void cmd_to_mpic() 
.................... { 
....................     for (int try = 0; try < 5; try ++) { 
*
1661:  MOVLB  03
1662:  CLRF   39
1663:  MOVF   39,W
1664:  SUBLW  04
1665:  BTFSS  03.0
1666:  GOTO   677
....................         communicate_with_main_pic(0, 0); 
1667:  CLRF   41
1668:  CLRF   42
1669:  MOVLP  00
166A:  MOVLB  00
166B:  CALL   164
166C:  MOVLP  10
....................         wait_for_main_pic_response(); 
166D:  MOVLP  00
166E:  CALL   224
166F:  MOVLP  10
....................         if (main_to_com[23] == 0x0C) 
1670:  MOVLB  03
1671:  MOVF   34,W
1672:  SUBLW  0C
1673:  BTFSC  03.2
....................             break; 
1674:  GOTO   677
1675:  INCF   39,F
1676:  GOTO   663
....................     } 
....................  
....................     if (main_to_com[12] == 0x66) { 
1677:  MOVF   29,W
1678:  SUBLW  66
1679:  BTFSS  03.2
167A:  GOTO   68E
....................         memcpy(cmd_pckt, main_to_com + 2, 9); // echo from main pic, usually the same as before, except for command 0x00, when time is returned instead 
167B:  MOVLW  20
167C:  MOVWF  05
167D:  MOVLW  EF
167E:  MOVWF  04
167F:  MOVLW  09
1680:  MOVWF  78
1681:  MOVLW  20
1682:  MOVWF  07
1683:  MOVLW  14
1684:  MOVWF  06
1685:  MOVIW  [FSR0++],W
1686:  MOVWI  W,[FSR1++]
1687:  DECFSZ 78,F
1688:  GOTO   685
....................         send_success_ack(); 
1689:  MOVLP  00
168A:  MOVLB  00
168B:  CALL   6E1
168C:  MOVLP  10
168D:  MOVLB  03
....................     } 
....................  
....................     if (main_to_com[12] == 0x00) 
168E:  MOVF   29,F
168F:  BTFSS  03.2
1690:  GOTO   696
....................         send_not_success_ack(); 
1691:  MOVLP  08
1692:  MOVLB  00
1693:  CALL   000
1694:  MOVLP  10
1695:  MOVLB  03
....................  
....................     rx_bfr_zero(); 
1696:  MOVLP  00
1697:  MOVLB  00
1698:  CALL   57B
1699:  MOVLP  10
169A:  MOVLP  10
169B:  GOTO   7E2 (RETURN)
.................... } 
....................  
.................... //_________________________GET_FM_ACCESS_________________________________________________ 
.................... void get_sfm_access_given_time() 
.................... { 
....................     if ((cmd_pckt[11] == 0x01) || (cmd_pckt[11] == 0x05) || (cmd_pckt[11] == 0x0a)) // main pic comands 
*
15C5:  DECFSZ 3F,W
15C6:  GOTO   5C8
15C7:  GOTO   5D0
15C8:  MOVF   3F,W
15C9:  SUBLW  05
15CA:  BTFSC  03.2
15CB:  GOTO   5D0
15CC:  MOVF   3F,W
15CD:  SUBLW  0A
15CE:  BTFSS  03.2
15CF:  GOTO   5FF
....................     { 
....................  
....................         for (int try = 0; try < 5; try ++) { 
15D0:  MOVLB  03
15D1:  CLRF   39
15D2:  MOVF   39,W
15D3:  SUBLW  04
15D4:  BTFSS  03.0
15D5:  GOTO   5EA
....................             communicate_with_main_pic(2, cmd_pckt[11]); 
15D6:  MOVLW  02
15D7:  MOVWF  41
15D8:  MOVLB  00
15D9:  MOVF   3F,W
15DA:  MOVLB  03
15DB:  MOVWF  42
15DC:  MOVLP  00
15DD:  MOVLB  00
15DE:  CALL   164
15DF:  MOVLP  10
....................             wait_for_main_pic_response(); 
15E0:  MOVLP  00
15E1:  CALL   224
15E2:  MOVLP  10
....................             if (main_to_com[23] == 0x0C) 
15E3:  MOVLB  03
15E4:  MOVF   34,W
15E5:  SUBLW  0C
15E6:  BTFSC  03.2
....................                 break; 
15E7:  GOTO   5EA
15E8:  INCF   39,F
15E9:  GOTO   5D2
....................         } 
....................  
....................         if (main_to_com[12] == 0x66) 
15EA:  MOVF   29,W
15EB:  SUBLW  66
15EC:  BTFSS  03.2
15ED:  GOTO   5F3
....................             send_success_ack(); 
15EE:  MOVLP  00
15EF:  MOVLB  00
15F0:  CALL   6E1
15F1:  MOVLP  10
15F2:  MOVLB  03
....................  
....................         if (main_to_com[12] == 0x00) 
15F3:  MOVF   29,F
15F4:  BTFSS  03.2
15F5:  GOTO   5FB
....................             send_not_success_ack(); 
15F6:  MOVLP  08
15F7:  MOVLB  00
15F8:  CALL   000
15F9:  MOVLP  10
15FA:  MOVLB  03
....................  
....................         rx_bfr_zero(); 
15FB:  MOVLP  00
15FC:  MOVLB  00
15FD:  CALL   57B
15FE:  MOVLP  10
....................     } 
15FF:  MOVLP  10
1600:  GOTO   7E2 (RETURN)
.................... } 
....................  
.................... //__________________________SPECIAL______________________________________________________ 
.................... void delay_for_data_downlink() 
.................... { 
....................     send_success_ack(); 
*
0779:  CALL   6E1
....................  
....................     for (int i = 0; i < 30; i++) { 
077A:  MOVLB  03
077B:  CLRF   39
077C:  MOVF   39,W
077D:  SUBLW  1D
077E:  BTFSS  03.0
077F:  GOTO   78C
....................         delay_ms(20000); 
0780:  MOVLW  50
0781:  MOVWF  3A
0782:  MOVLW  FA
0783:  MOVWF  68
0784:  MOVLB  00
0785:  CALL   079
0786:  MOVLB  03
0787:  DECFSZ 3A,F
0788:  GOTO   782
....................         restart_wdt(); //***********************//} 
0789:  CLRWDT
078A:  INCF   39,F
078B:  GOTO   77C
....................     } 
....................  
....................     rx_bfr_zero(); 
078C:  MOVLB  00
078D:  CALL   57B
078E:  MOVLP  10
078F:  GOTO   75B (RETURN)
.................... } 
....................  
.................... //__________________force CW send________________________________________________________ 
.................... void cw_send_bgsc() 
.................... { 
....................     cw_on(); 
*
1072:  MOVLP  00
1073:  CALL   283
1074:  MOVLP  10
....................  
....................     if (cmd_pckt[4]) { 
1075:  MOVF   38,F
1076:  BTFSC  03.2
1077:  GOTO   08A
....................         LATD3 = 1; 
1078:  MOVLB  02
1079:  BSF    0F.3
....................         delay_ms(30000); 
107A:  MOVLW  78
107B:  MOVLB  03
107C:  MOVWF  3A
107D:  MOVLW  FA
107E:  MOVWF  68
107F:  MOVLP  00
1080:  MOVLB  00
1081:  CALL   079
1082:  MOVLP  10
1083:  MOVLB  03
1084:  DECFSZ 3A,F
1085:  GOTO   07D
....................         LATD3 = 0; 
1086:  MOVLB  02
1087:  BCF    0F.3
....................     } else { 
1088:  GOTO   0B2
1089:  MOVLB  00
....................         for (int try = 0; try < 5; try++) { 
108A:  MOVLB  03
108B:  CLRF   39
108C:  MOVF   39,W
108D:  SUBLW  04
108E:  BTFSS  03.0
108F:  GOTO   0A1
....................             communicate_with_main_pic(1, 0); // Asking CW Data. 
1090:  MOVLW  01
1091:  MOVWF  41
1092:  CLRF   42
1093:  MOVLP  00
1094:  MOVLB  00
1095:  CALL   164
1096:  MOVLP  10
....................             wait_for_main_pic_response(); 
1097:  MOVLP  00
1098:  CALL   224
1099:  MOVLP  10
....................             if (main_to_com[23] == 0x0C) 
109A:  MOVLB  03
109B:  MOVF   34,W
109C:  SUBLW  0C
109D:  BTFSC  03.2
....................                 break; 
109E:  GOTO   0A1
109F:  INCF   39,F
10A0:  GOTO   08C
....................         } 
....................         cw_pckt(); 
10A1:  MOVLP  00
10A2:  MOVLB  00
10A3:  CALL   4BD
10A4:  MOVLP  10
....................         delay_ms(500); 
10A5:  MOVLW  02
10A6:  MOVLB  03
10A7:  MOVWF  3A
10A8:  MOVLW  FA
10A9:  MOVWF  68
10AA:  MOVLP  00
10AB:  MOVLB  00
10AC:  CALL   079
10AD:  MOVLP  10
10AE:  MOVLB  03
10AF:  DECFSZ 3A,F
10B0:  GOTO   0A8
10B1:  MOVLB  02
....................     } 
....................  
....................     rx_on(); 
10B2:  MOVLP  00
10B3:  MOVLB  00
10B4:  CALL   08F
10B5:  MOVLP  10
....................     rx_bfr_zero(); 
10B6:  MOVLP  00
10B7:  CALL   57B
10B8:  MOVLP  10
10B9:  MOVLP  10
10BA:  GOTO   7E2 (RETURN)
.................... } 
....................  
.................... //__________________CW update mission____________________________________________________ 
.................... void cw_update_mission() 
.................... { 
....................     cf_sector_erase(0x00000000); 
*
1000:  MOVLB  03
1001:  CLRF   53
1002:  CLRF   52
1003:  CLRF   51
1004:  CLRF   50
1005:  MOVLP  08
1006:  MOVLB  00
1007:  CALL   68F
1008:  MOVLP  10
....................  
....................     cf_byte_write(0x00000000, cmd_pckt[10]); //should be ff 
1009:  MOVLB  03
100A:  CLRF   58
100B:  CLRF   57
100C:  CLRF   56
100D:  CLRF   55
100E:  MOVLB  00
100F:  MOVF   3E,W
1010:  MOVLB  03
1011:  MOVWF  59
1012:  MOVLP  08
1013:  MOVLB  00
1014:  CALL   6EF
1015:  MOVLP  10
....................  
....................     cf_byte_write(0x00000001, cmd_pckt[4]); 
1016:  MOVLB  03
1017:  CLRF   58
1018:  CLRF   57
1019:  CLRF   56
101A:  MOVLW  01
101B:  MOVWF  55
101C:  MOVLB  00
101D:  MOVF   38,W
101E:  MOVLB  03
101F:  MOVWF  59
1020:  MOVLP  08
1021:  MOVLB  00
1022:  CALL   6EF
1023:  MOVLP  10
....................     cf_byte_write(0x00000002, cmd_pckt[5]); 
1024:  MOVLB  03
1025:  CLRF   58
1026:  CLRF   57
1027:  CLRF   56
1028:  MOVLW  02
1029:  MOVWF  55
102A:  MOVLB  00
102B:  MOVF   39,W
102C:  MOVLB  03
102D:  MOVWF  59
102E:  MOVLP  08
102F:  MOVLB  00
1030:  CALL   6EF
1031:  MOVLP  10
....................     cf_byte_write(0x00000003, cmd_pckt[6]); 
1032:  MOVLB  03
1033:  CLRF   58
1034:  CLRF   57
1035:  CLRF   56
1036:  MOVLW  03
1037:  MOVWF  55
1038:  MOVLB  00
1039:  MOVF   3A,W
103A:  MOVLB  03
103B:  MOVWF  59
103C:  MOVLP  08
103D:  MOVLB  00
103E:  CALL   6EF
103F:  MOVLP  10
....................     cf_byte_write(0x00000004, cmd_pckt[7]); 
1040:  MOVLB  03
1041:  CLRF   58
1042:  CLRF   57
1043:  CLRF   56
1044:  MOVLW  04
1045:  MOVWF  55
1046:  MOVLB  00
1047:  MOVF   3B,W
1048:  MOVLB  03
1049:  MOVWF  59
104A:  MOVLP  08
104B:  MOVLB  00
104C:  CALL   6EF
104D:  MOVLP  10
....................     cf_byte_write(0x00000005, cmd_pckt[8]); 
104E:  MOVLB  03
104F:  CLRF   58
1050:  CLRF   57
1051:  CLRF   56
1052:  MOVLW  05
1053:  MOVWF  55
1054:  MOVLB  00
1055:  MOVF   3C,W
1056:  MOVLB  03
1057:  MOVWF  59
1058:  MOVLP  08
1059:  MOVLB  00
105A:  CALL   6EF
105B:  MOVLP  10
....................     cf_byte_write(0x00000006, cmd_pckt[9]); 
105C:  MOVLB  03
105D:  CLRF   58
105E:  CLRF   57
105F:  CLRF   56
1060:  MOVLW  06
1061:  MOVWF  55
1062:  MOVLB  00
1063:  MOVF   3D,W
1064:  MOVLB  03
1065:  MOVWF  59
1066:  MOVLP  08
1067:  MOVLB  00
1068:  CALL   6EF
1069:  MOVLP  10
....................  
....................     send_success_ack(); 
106A:  MOVLP  00
106B:  CALL   6E1
106C:  MOVLP  10
....................     rx_bfr_zero(); 
106D:  MOVLP  00
106E:  CALL   57B
106F:  MOVLP  10
1070:  MOVLP  10
1071:  GOTO   7E2 (RETURN)
.................... } 
.................... //__________________Enable/disable CW____________________________________________________ 
.................... void enable_cw() 
.................... { 
....................     cw_enabled = true; 
*
0FEE:  MOVLW  01
0FEF:  MOVWF  25
....................     send_success_ack(); 
0FF0:  MOVLP  00
0FF1:  CALL   6E1
0FF2:  MOVLP  08
....................     rx_bfr_zero(); 
0FF3:  MOVLP  00
0FF4:  CALL   57B
0FF5:  MOVLP  08
0FF6:  MOVLP  10
0FF7:  GOTO   7E2 (RETURN)
.................... } 
....................  
.................... void disable_cw() 
.................... { 
....................     cw_enabled = false; 
*
07F7:  CLRF   25
....................     send_success_ack(); 
07F8:  CALL   6E1
....................     rx_bfr_zero(); 
07F9:  CALL   57B
07FA:  MOVLP  10
07FB:  GOTO   7E2 (RETURN)
.................... } 
....................  
.................... //_______________________________SEND temp rssi__________________________________________ 
.................... void send_com_temp_rssi_to_gs() 
.................... { 
....................     send_com_data(); 
....................     rx_bfr_zero(); 
*
12D2:  MOVLP  00
12D3:  MOVLB  00
12D4:  CALL   57B
12D5:  MOVLP  10
12D6:  MOVLP  10
12D7:  GOTO   7E2 (RETURN)
.................... } 
....................  
.................... //_______________________________CW_send_________________________________________________ 
.................... void send_cw() 
.................... { 
....................     cw_on(); 
*
058E:  CALL   283
....................     cw_pckt(); 
058F:  CALL   4BD
....................     rx_on(); 
0590:  CALL   08F
....................     rx_bfr_zero(); 
0591:  CALL   57B
0592:  MOVLP  10
0593:  GOTO   73C (RETURN)
.................... } 
....................  
....................  
.................... //_________________Tranceiver Control__________________________________________ 
.................... void tx_on(); //__Data Transmission Enable__ 
.................... void rx_on(); //__Commamd Receiving Enable__ 
.................... void cw_on(); //__CW Transmission Enable__ 
....................  
.................... unsigned int16 trx_temp_read(); //__Tranceiver Temperature Read__ 
.................... unsigned int16 trx_rssi_read(); //__Received Power Level__ 
....................                                 //_____________________________________________________________________________ 
....................  
.................... //_________________Input Command Buffer________________________________________ 
.................... void rx_bfr_zero(); //Make receive buffer Zero__ 
....................                     //_____________________________________________________________________________ 
....................  
.................... //_________________Flash memory functions______________________________________ 
.................... void cf_write_enable(); 
.................... void sf_write_enable(); 
....................  
.................... void cf_sector_erase(unsigned int32 sector_address); 
.................... void sf_sector_erase(unsigned int32 sector_address); 
....................  
.................... void cf_byte_write(unsigned int32 byte_address, int8 data); 
.................... void sf_byte_write(unsigned int32 byte_address, int8 data); 
....................  
.................... int8 cf_byte_read(unsigned int32 address); 
.................... int8 sf_byte_read(unsigned int32 address); 
....................  
.................... void flash_copy(unsigned int32 start_address, unsigned int32 data_length); 
.................... //_____________________________________________________________________________ 
....................  
....................  
.................... #INT_RDA 
.................... void serial_isr() 
.................... { 
....................     buffer[next_in] = fgetc(TR_CP); 
*
0021:  MOVLW  2B
0022:  ADDWF  24,W
0023:  MOVWF  04
0024:  MOVLW  20
0025:  MOVWF  05
0026:  BTFSC  03.0
0027:  INCF   05,F
0028:  MOVF   05,W
0029:  MOVLB  05
002A:  MOVWF  53
002B:  MOVF   04,W
002C:  MOVWF  52
*
003E:  MOVLB  05
003F:  MOVF   53,W
0040:  MOVWF  05
0041:  MOVF   52,W
0042:  MOVWF  04
0043:  MOVF   78,W
0044:  MOVWF  00
....................     next_in = (next_in + 1) % BUFFER_LENGTH; // Protects from buffer overflow. 
0045:  MOVLW  01
0046:  MOVLB  00
0047:  ADDWF  24,W
0048:  ANDLW  1F
0049:  MOVWF  24
004A:  BCF    11.5
004B:  MOVLP  00
004C:  GOTO   016
.................... } 
....................  
.................... void main(void) 
*
169C:  CLRF   24
169D:  MOVLW  01
169E:  MOVWF  25
169F:  CLRF   26
16A0:  MOVLB  03
16A1:  BSF    1F.3
16A2:  MOVLW  22
16A3:  MOVWF  1B
16A4:  MOVLW  00
16A5:  MOVWF  1C
16A6:  MOVLW  A6
16A7:  MOVWF  1E
16A8:  MOVLW  90
16A9:  MOVWF  1D
16AA:  MOVLB  01
16AB:  BCF    0D.3
16AC:  MOVLB  02
16AD:  BSF    0D.3
16AE:  MOVLB  01
16AF:  BCF    0D.1
16B0:  MOVLB  02
16B1:  BSF    0D.1
16B2:  MOVLB  01
16B3:  BSF    0F.6
16B4:  BCF    0F.7
16B5:  BCF    0F.4
16B6:  MOVLB  02
16B7:  BCF    0F.4
16B8:  MOVLB  01
16B9:  BSF    0E.4
16BA:  BCF    0E.5
16BB:  BCF    0E.3
16BC:  MOVLB  02
16BD:  BCF    0E.3
16BE:  MOVLB  00
16BF:  CLRF   2E
16C0:  CLRF   2F
16C1:  CLRF   33
16C2:  CLRF   32
16C3:  CLRF   31
16C4:  CLRF   30
16C5:  CLRF   4A
16C6:  MOVLB  03
16C7:  CLRF   0C
16C8:  CLRF   0D
16C9:  CLRF   0E
16CA:  CLRF   0F
16CB:  CLRF   10
16CC:  MOVLB  02
16CD:  CLRF   12
16CE:  CLRF   11
16CF:  GOTO   6DF
16D0:  DATA 16,34
16D1:  DATA 40,34
16D2:  DATA 34,34
16D3:  DATA 00,34
16D4:  DATA 03,34
16D5:  DATA 01,34
16D6:  DATA 6D,34
16D7:  DATA 00,34
16D8:  DATA 00,34
16D9:  DATA 00,34
16DA:  DATA 15,34
16DB:  DATA 41,34
16DC:  DATA A0,34
16DD:  DATA 00,34
16DE:  DATA 00,34
16DF:  MOVLW  16
16E0:  MOVWF  05
16E1:  MOVLW  D0
16E2:  MOVWF  04
16E3:  BSF    05.7
16E4:  MOVIW  [FSR0++],W
16E5:  MOVWF  77
16E6:  XORLW  00
16E7:  BTFSC  03.2
16E8:  GOTO   6F9
16E9:  MOVIW  [FSR0++],W
16EA:  MOVWF  78
16EB:  BTFSC  78.7
16EC:  GOTO   6F1
16ED:  ANDLW  0F
16EE:  MOVWF  07
16EF:  MOVIW  [FSR0++],W
16F0:  MOVWF  06
16F1:  BTFSC  78.6
16F2:  MOVIW  [FSR0++],W
16F3:  BTFSS  78.6
16F4:  MOVIW  [FSR0++],W
16F5:  MOVWI  W,[FSR1++]
16F6:  DECFSZ 77,F
16F7:  GOTO   6F3
16F8:  GOTO   6E4
.................... { 
....................     settings(); // Initial settings of COM PIC goes here. 
16F9:  MOVLP  00
16FA:  MOVLB  00
16FB:  GOTO   04D
16FC:  MOVLP  10
....................     setup_wdt(wdt_256s); 
16FD:  MOVLW  25
16FE:  MOVLB  01
16FF:  MOVWF  17
....................     restart_wdt(); 
1700:  CLRWDT
....................     delay_ms(5000L); // Just a delay before starting. 
1701:  MOVLW  14
1702:  MOVLB  03
1703:  MOVWF  39
1704:  MOVLW  FA
1705:  MOVWF  68
1706:  MOVLP  00
1707:  MOVLB  00
1708:  CALL   079
1709:  MOVLP  10
170A:  MOVLB  03
170B:  DECFSZ 39,F
170C:  GOTO   704
....................     rx_on(); 
170D:  MOVLP  00
170E:  MOVLB  00
170F:  CALL   08F
1710:  MOVLP  10
....................  
....................     // // Uncomment block below for continuous CW carrier transmission 
....................     // cw_on(); 
....................     // LATD3 = 1; 
....................     // while(true){ 
....................     //     restart_wdt(); 
....................     // } 
....................  
....................     while (true) { 
....................         //______________(1)______CW_RELATED_TASKS__________________________________________<< 
....................         rssi_value = rssi_read(); // Reading satellite noise level. 
1711:  MOVLP  00
1712:  GOTO   12E
1713:  MOVLP  10
1714:  MOVF   79,W
1715:  MOVWF  28
1716:  MOVF   78,W
1717:  MOVWF  27
....................         for (int try = 0; try < 5; try ++) { 
1718:  MOVLB  03
1719:  CLRF   35
171A:  MOVF   35,W
171B:  SUBLW  04
171C:  BTFSS  03.0
171D:  GOTO   72F
....................             communicate_with_main_pic(1, 0); // Asking CW Data. 
171E:  MOVLW  01
171F:  MOVWF  41
1720:  CLRF   42
1721:  MOVLP  00
1722:  MOVLB  00
1723:  CALL   164
1724:  MOVLP  10
....................             wait_for_main_pic_response(); 
1725:  MOVLP  00
1726:  CALL   224
1727:  MOVLP  10
....................             if (main_to_com[23] == 0x0C) 
1728:  MOVLB  03
1729:  MOVF   34,W
172A:  SUBLW  0C
172B:  BTFSC  03.2
....................                 break; 
172C:  GOTO   72F
172D:  INCF   35,F
172E:  GOTO   71A
....................         } 
....................         const int8 ok_to_send_cw_index = 8; // After header and CW: 2 (header,cmd) + 6 (cw length) 
....................         int8 ok_to_send_cw = main_to_com[ok_to_send_cw_index]; 
172F:  MOVF   25,W
1730:  MOVWF  36
....................         if(ok_to_send_cw && cw_enabled){ 
1731:  MOVF   36,F
1732:  BTFSC  03.2
1733:  GOTO   73E
1734:  MOVLB  00
1735:  MOVF   25,F
1736:  BTFSS  03.2
1737:  GOTO   73A
1738:  MOVLB  03
1739:  GOTO   73E
....................             send_cw(); 
173A:  MOVLP  00
173B:  GOTO   58E
173C:  MOVLP  10
173D:  MOVLB  03
....................         } 
....................  
....................         restart_wdt(); //***********************// 
173E:  CLRWDT
....................         rx_on(); 
173F:  MOVLP  00
1740:  MOVLB  00
1741:  CALL   08F
1742:  MOVLP  10
....................  
....................         //______________(3)____RECEIVING_MODE_START_HERE___________________________________<< 
....................         for (int16 i = 0; i < 60; i++) { 
1743:  MOVLB  03
1744:  CLRF   38
1745:  CLRF   37
1746:  MOVF   38,F
1747:  BTFSS  03.2
1748:  GOTO   7F7
1749:  MOVF   37,W
174A:  SUBLW  3B
174B:  BTFSS  03.0
174C:  GOTO   7F7
....................             buffer_correction(); 
174D:  MOVLP  00
174E:  MOVLB  00
174F:  GOTO   650
1750:  MOVLP  10
....................             if ((sat_id != SPACECRAFT_ID) && (cmd_pckt[2] == 0x90)) // Be polite and keep quiet when other satellites are talking. 
1751:  MOVF   2D,W
1752:  SUBLW  53
1753:  BTFSC  03.2
1754:  GOTO   75C
1755:  MOVF   36,W
1756:  SUBLW  90
1757:  BTFSS  03.2
1758:  GOTO   75C
....................                 delay_for_data_downlink(); 
1759:  MOVLP  00
175A:  GOTO   779
175B:  MOVLP  10
....................             if (crc && ((sat_id == SPACECRAFT_ID) || (sat_id == 0x70))) // Checking crc, 49 is CURTIS satellite ID, 70 is the common ID for all satellites. 
175C:  MOVF   2E,F
175D:  BTFSC  03.2
175E:  GOTO   7E2
175F:  MOVF   2D,W
1760:  SUBLW  53
1761:  BTFSC  03.2
1762:  GOTO   767
1763:  MOVF   2D,W
1764:  SUBLW  70
1765:  BTFSS  03.2
1766:  GOTO   7E2
....................             { 
....................                 if (cmd_pckt[2] == 0x77) 
1767:  MOVF   36,W
1768:  SUBLW  77
1769:  BTFSS  03.2
176A:  GOTO   76E
....................                     sync(); // 38 Sync or delay 
176B:  MOVLP  00
176C:  GOTO   790
176D:  MOVLP  10
....................                 switch (cmd_pckt[3]) { 
176E:  MOVF   37,W
176F:  XORLW  10
1770:  BTFSC  03.2
1771:  GOTO   7A9
1772:  XORLW  01
1773:  BTFSC  03.2
1774:  GOTO   7AD
1775:  XORLW  02
1776:  BTFSC  03.2
1777:  GOTO   7B1
1778:  XORLW  07
1779:  BTFSC  03.2
177A:  GOTO   7B5
177B:  XORLW  01
177C:  BTFSC  03.2
177D:  GOTO   7B9
177E:  XORLW  03
177F:  BTFSC  03.2
1780:  GOTO   7BD
1781:  XORLW  01
1782:  BTFSC  03.2
1783:  GOTO   7C1
1784:  XORLW  37
1785:  BTFSC  03.2
1786:  GOTO   7C5
1787:  XORLW  01
1788:  BTFSC  03.2
1789:  GOTO   7C7
178A:  XORLW  03
178B:  BTFSC  03.2
178C:  GOTO   7C9
178D:  XORLW  01
178E:  BTFSC  03.2
178F:  GOTO   7CB
1790:  XORLW  07
1791:  BTFSC  03.2
1792:  GOTO   7CF
1793:  XORLW  03
1794:  BTFSC  03.2
1795:  GOTO   7D3
1796:  XORLW  17
1797:  BTFSC  03.2
1798:  GOTO   7D5
1799:  XORLW  05
179A:  BTFSC  03.2
179B:  GOTO   7D7
179C:  XORLW  75
179D:  BTFSC  03.2
179E:  GOTO   7D9
179F:  XORLW  01
17A0:  BTFSC  03.2
17A1:  GOTO   7DB
17A2:  XORLW  03
17A3:  BTFSC  03.2
17A4:  GOTO   7DD
17A5:  XORLW  06
17A6:  BTFSC  03.2
17A7:  GOTO   7DF
17A8:  GOTO   7E1
....................                 case 0x10: packet_download(); break; 
17A9:  MOVLP  08
17AA:  CALL   399
17AB:  MOVLP  10
17AC:  GOTO   7E2
....................                 case 0x11: packet_download(); break; 
17AD:  MOVLP  08
17AE:  CALL   399
17AF:  MOVLP  10
17B0:  GOTO   7E2
....................                 case 0x13: length_download(); break; 
17B1:  MOVLP  08
17B2:  CALL   41C
17B3:  MOVLP  10
17B4:  GOTO   7E2
....................                 case 0x14: length_download(); break; 
17B5:  MOVLP  08
17B6:  CALL   41C
17B7:  MOVLP  10
17B8:  GOTO   7E2
....................                 case 0x15: one_pckt_download(); break; 
17B9:  MOVLP  08
17BA:  CALL   645
17BB:  MOVLP  10
17BC:  GOTO   7E2
....................                 case 0x16: one_pckt_download(); break; 
17BD:  MOVLP  08
17BE:  CALL   645
17BF:  MOVLP  10
17C0:  GOTO   7E2
....................                 case 0x17: fm_copy(); break;                        // Without getting access. 
17C1:  MOVLP  08
17C2:  GOTO   7AF
17C3:  MOVLP  10
17C4:  GOTO   7E2
....................                 case 0x20: cw_update_mission(); break; 
17C5:  GOTO   000
17C6:  GOTO   7E2
....................                 case 0x21: cw_send_bgsc(); break; 
17C7:  GOTO   072
17C8:  GOTO   7E2
....................                 case 0x22: fm_copy_with_access(); break; 
17C9:  GOTO   0BB
17CA:  GOTO   7E2
....................                 case 0x23: enable_cw(); break; 
17CB:  MOVLP  08
17CC:  GOTO   7EE
17CD:  MOVLP  10
17CE:  GOTO   7E2
....................                 case 0x24: disable_cw(); break; 
17CF:  MOVLP  00
17D0:  GOTO   7F7
17D1:  MOVLP  10
17D2:  GOTO   7E2
....................                 case 0x27: fm_copy_and_data_down_from_cfm(); break; // 25 00 00 00 00    00 00 packet size 
17D3:  GOTO   125
17D4:  GOTO   7E2
....................                 case 0x30: send_com_temp_rssi_to_gs(); break;       // 30 00 00 00 00    00 00 00 00 
17D5:  GOTO   1ED
17D6:  GOTO   7E2
....................                 case 0x35: data_down_from_sfm_with_access(); break; 
17D7:  GOTO   2D8
17D8:  GOTO   7E2
....................                 case 0x40: set_of_packets_download(); break; 
17D9:  CALL   55C
17DA:  GOTO   7E2
....................                 case 0x41: set_of_packets_download(); break;        // 40 00 00 00 00    00 00 setsize setnumber 
17DB:  CALL   55C
17DC:  GOTO   7E2
....................                 case 0x42: get_sfm_access_given_time(); break; 
17DD:  GOTO   5C5
17DE:  GOTO   7E2
....................                 case 0x44: set_of_packets_download_with_access(); break; 
17DF:  GOTO   601
17E0:  GOTO   7E2
....................                 default: cmd_to_mpic(); break; // Previously A0. 
17E1:  GOTO   661
....................                 } 
....................             } 
....................             next_in = 0; 
17E2:  CLRF   24
....................             rx_bfr_zero(); 
17E3:  MOVLP  00
17E4:  CALL   57B
17E5:  MOVLP  10
....................             delay_ms(2000); 
17E6:  MOVLW  08
17E7:  MOVLB  03
17E8:  MOVWF  39
17E9:  MOVLW  FA
17EA:  MOVWF  68
17EB:  MOVLP  00
17EC:  MOVLB  00
17ED:  CALL   079
17EE:  MOVLP  10
17EF:  MOVLB  03
17F0:  DECFSZ 39,F
17F1:  GOTO   7E9
....................             restart_wdt(); 
17F2:  CLRWDT
17F3:  INCF   37,F
17F4:  BTFSC  03.2
17F5:  INCF   38,F
17F6:  GOTO   746
....................         } 
17F7:  MOVLB  00
17F8:  GOTO   711
....................     } 
.................... } 
17F9:  SLEEP

Configuration Fuses:
   Word  1: 39BA   HS WDT NOPUT NOMCLR NOPROTECT NOCPD NOBROWNOUT NOCLKOUT IESO FCMEN
   Word  2: 1E23   NOWRT NOVCAP PLL_SW STVREN BORV19 NOLPBOR NODEBUG NOLVP
